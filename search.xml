<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker常见命令</title>
    <url>/posts/a70288e8.html</url>
    <content><![CDATA[<h2 id="Docker常见命令"><a href="#Docker常见命令" class="headerlink" title="Docker常见命令"></a>Docker常见命令</h2><p>添加阿里云镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>添加当前用户到docker用户组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $USER （需注销）</span><br><span class="line"></span><br><span class="line">newgrp docker （立即生效）</span><br></pre></td></tr></table></figure>

<p>pull nginx 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx（等效于nginx:latest）</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx</span><br></pre></td></tr></table></figure>

<p>查看正在运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>查看本地容器ID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f &lt;container id(不用打全，前缀区分)&gt;</span><br></pre></td></tr></table></figure>

<p>进入bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;container id(不用打全，前缀区分)&gt; bash</span><br></pre></td></tr></table></figure>

<p>commit镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit &lt;container id(不用打全，前缀区分)&gt; &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>查看镜像列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images （刚才commit的镜像）</span><br></pre></td></tr></table></figure>

<p>使用运行刚才commit的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>使用Dockerfile构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;name&gt; &lt;存放Dockerfile的文件夹&gt;</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>保存为tar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save &lt;name&gt; &gt; &lt;tar name&gt;</span><br></pre></td></tr></table></figure>

<p>从tar加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load &lt; &lt;tar name&gt;</span><br></pre></td></tr></table></figure>

<p>一些启动参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后台运行容器：-d</span><br><span class="line"></span><br><span class="line">容器内外端口映射：-p 内部端口号:外部端口号</span><br><span class="line"></span><br><span class="line">目录映射：-v &#x27;dir name&#x27; : &lt;dir&gt;</span><br><span class="line"></span><br><span class="line">指定映像版本：&lt;name&gt;:&lt;ver&gt;</span><br></pre></td></tr></table></figure>

<p>Docker容器中的文件拷贝至本地</p>
<p>#格式 docker cp CONTAINER ID:容器目录 本地目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker cp 52ea915e6527:/aha /home/aha2</span><br></pre></td></tr></table></figure>

<p>本地文件拷贝至容器</p>
<p>#格式 docker cp 本地路径 CONTAINER ID:容器目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp license.dat 52ea915e6527:/home</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/a70288e8.html">http://ulemony.github.io/posts/a70288e8.html</a> </p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile用法</title>
    <url>/posts/387270af.html</url>
    <content><![CDATA[<h2 id="Dockerfile用法"><a href="#Dockerfile用法" class="headerlink" title="Dockerfile用法"></a>Dockerfile用法</h2><h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><p>From XXX（基于什么镜像）<br>WORKDIR（指定shell语句运行在那个路径下）<br>COPY（将宿主机的文件拷贝到某路径下）<br>RUN（运行shell语句，只要构建就会运行，如echo 321 &gt;&gt; 1.txt）<br>CMD （指定镜像启动运行的脚本，只有容器真正运行的时候才会运行的脚本，执行后容器的生命周期即结束，且一般为阻塞式语句，如tail语句）</p>
<p>一般语句为：<br>FROM WORKDIR COPY-ADD RUN CMD-ENTRYPOINT<br>ENTRYPOINT非json则以ENTRYPOT为准，如果ENTRYPOINT和CMD都是JSON则ENTRYPOINT+CMD拼接成shell</p>
<p>EXPOSE—暴露镜像的指定端口<br>VOLUME—指定映射文件<br>ENV—指定doker的环境变量，运行时一直生效<br>ARG—构建参数，运行时无效，可以构建时候临时修改变量<br>LABEL—指定元数据，便于找到docker<br>ONBUILD—当前镜像构建的时候不会执行，基于当前镜像的镜像去构建的时候才会执行<br>STOPSIGNAL—指定容器使用什么信号，一般指定信号名<br>HEALTHCHECK—检查容易的健康状态<br>SHELL—指定linux为&#x2F;bin&#x2F;sh，windows为cmd</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">LABEl k=&quot;v&quot; k1=&quot;v1&quot;</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY src/ /app</span><br><span class="line">RUN echo helloword &gt;&gt; 1.txt</span><br><span class="line">ARG B=11</span><br><span class="line">ONBUILD ENV C=100</span><br><span class="line">CMD echo $C</span><br></pre></td></tr></table></figure>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用Dockerfile构建镜像：docker build -t &lt;存放Dockerfile的文件夹&gt;</p>
<p>例如：在当前文件夹构建名为test的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t test .</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/387270af.html">http://ulemony.github.io/posts/387270af.html</a> </p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM</title>
    <url>/posts/66c016fb.html</url>
    <content><![CDATA[<h3 id="Java-虚拟机运行时数据区"><a href="#Java-虚拟机运行时数据区" class="headerlink" title="Java 虚拟机运行时数据区"></a>Java 虚拟机运行时数据区</h3><p><img src="/posts/66c016fb/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA.png" alt="java虚拟机运行时数据区"></p>
<h4 id="java虚拟机栈"><a href="#java虚拟机栈" class="headerlink" title="java虚拟机栈"></a>java虚拟机栈</h4><p>由栈帧组成，存储了局部变量表、操作数栈、动态链接、方法出口等信息</p>
<p>局部变量表包含：</p>
<ol>
<li>基本数据类型（byte 1字节、char 2字节、short 2字节、int 4字节、float 4字节、long 8字节、double 8字节、boolean）</li>
<li>对象引用类型，只保存对象的地址，不保存对象内容</li>
</ol>
<p>这些数据类型的存储空间以<strong>局部变量槽（slot）</strong>表示</p>
<p><strong>操作数栈</strong>用于存储字节码指令执行过程中所需的操作数，比如，栈会存储加法、减法、乘法等操作符的操作数，并返回计算结果。操作数栈是临时性的，方法执行完后栈中的数据也会被销毁。</p>
<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>存放对象实例，能被所有线程共享</p>
<p>物理上可以存于不连续的空间，逻辑上是连续的</p>
<p><img src="/posts/66c016fb/%E5%A0%86.png" alt="堆"></p>
<p><strong>年轻代</strong>主要用于存储新创建的对象。大部分对象在创建时都会首先进入年轻代。年轻代的垃圾回收非常频繁，称为<strong>Minor GC</strong>（轻度垃圾回收）</p>
<p>年轻代的内存进一步分为：</p>
<ul>
<li><p><strong>Eden空间</strong>：新创建的对象通常会首先分配到Eden区。</p>
</li>
<li><p><strong>From Survivor区</strong>和<strong>To Survivor区</strong>：这两个区域用于存活对象的转移。如果Eden区的对象在一次GC后依然存活，会被移动到这两个区域之一。存活的对象会在两者之间来回复制，直到它们足够“老”而转移到老年代。</p>
<p>-XX:MaxTenuringThreshold 设置垃圾最大年龄，SurvivorTo和SurvivorFrom复制交换的次数 默认为15 取值范围0-15</p>
</li>
</ul>
<p><strong>老年代</strong>用于存储长时间存活的对象。经过多次GC后，年轻代中的一些对象会被晋升到老年代。老年代的垃圾回收比较少，称为<strong>Major GC</strong>或<strong>Full GC</strong>。老年代通常包含的是一些长时间存在于程序中的对象，如常驻内存的对象或较大的数据结构。</p>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>存储类信息、常量、静态变量、运行时常量池、编译后的代码缓存</p>
<p>注意：JDK8废弃永久代概念，改用元空间</p>
<p><strong>运行时常量池</strong> 用于存放类的常量信息，例如字面量和符号引用</p>
<p>​	<strong>字面量</strong>（Literal）是指在源代码中直接写出来的常量值，通常是一个固定的数值、字符串或字符。字面量在编译时就会被确定下来，并	且在编译后会被存储到<strong>常量池</strong>中。</p>
<p>​	例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiteralExample</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 字面量</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">5</span>; <span class="comment">// 数值字面量</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>; <span class="comment">// 字符串字面量</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>5</code> 和 <code>&quot;Hello&quot;</code> 就是字面量。</li>
<li><strong>整数字面量</strong>（比如5）是数值型字面量。</li>
<li><strong>字符串字面量</strong>（比如”Hello”）是字符串常量。</li>
</ul>
<p>​	这些字面量在编译期间就已经存在于类的常量池中了。</p>
<p>​	</p>
<p>​	<strong>符号引用</strong> 是指在类的字节码中，引用其他类、方法、字段等时所使用的<strong>符号名</strong>（例如类名、方法名、字段名等），而不是直接的内存	地址。这些符号引用是<strong>延迟解析的</strong>，即JVM在运行时会根据符号引用来定位对应的实际内存地址。</p>
<p>​	例子：类的符号引用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SymbolicReferenceExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用 String 类的符号引用</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 使用 Class 类的符号引用</span></span><br><span class="line">        Class&lt;?&gt; clazz = String.class;  <span class="comment">// 获取 String 类的 Class 对象</span></span><br><span class="line">        System.out.println(clazz.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>​	<strong>解释</strong></p>
<ul>
<li>在上面的代码中，<code>String.class</code> 是一个<strong>符号引用</strong>。它代表的是 <code>String</code> 类的类类型（<code>Class</code> 对象）。在编译时，JVM 只是记录了 <code>String.class</code>，而没有直接知道它在内存中的位置。只有在运行时，JVM 会根据符号引用 <code>String.class</code> 来查找并加载 <code>String</code> 类。</li>
<li>在 <code>clazz.getName()</code> 调用时，JVM 会根据符号引用解析出 <code>String.class</code> 对应的类对象，并且返回类的名称 <code>&quot;java.lang.String&quot;</code>。</li>
</ul>
<p>链接 <a href="http://ulemony.github.io/posts/66c016fb.html">http://ulemony.github.io/posts/66c016fb.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java开发小技巧</title>
    <url>/posts/736315d6.html</url>
    <content><![CDATA[<h3 id="数据库插入自动创建时间"><a href="#数据库插入自动创建时间" class="headerlink" title="数据库插入自动创建时间"></a>数据库插入自动创建时间</h3><p>在<code>createTime</code>字段上添加<code>@TableField(fill = FieldFill.INSERT)</code>注解插入数据时自动填充数据，</p>
<p>使用<code>@DateTimeFormat</code>注解来指定日期的格式如yy-MM-dd hh:mm:ss</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> org.springframework.format.annotation.DateTimeFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;your_table_name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他字段...</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="meta">@DateTimeFormat(pattern = &quot;yy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法、Getter和Setter方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>对于指定日期格式还可以使用Timestamp类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableField;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Timestamp;</span><br><span class="line"></span><br><span class="line"><span class="meta">@TableName(&quot;your_table_name&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">YourEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他字段...</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Timestamp createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法、Getter和Setter方法...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>创建处理器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="comment">/* 创建时间 */</span></span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, Timestamp.class, DateTime.now().toTimestamp());</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, Timestamp.class, DateTime.now().toTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject,<span class="string">&quot;updateTime&quot;</span>,Timestamp.class, DateTime.now().toTimestamp());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/736315d6.html">http://ulemony.github.io/posts/736315d6.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>mybatis plus</tag>
      </tags>
  </entry>
  <entry>
    <title>Jvm指令和工具</title>
    <url>/posts/817f8310.html</url>
    <content><![CDATA[<h2 id="Jvm指令和工具"><a href="#Jvm指令和工具" class="headerlink" title="Jvm指令和工具"></a>Jvm指令和工具</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p> 查看java进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lee<span class="meta">@lee</span>-mac ~ % jps</span><br><span class="line"><span class="number">63266</span> miniLegionInit.jar</span><br><span class="line"><span class="number">63964</span> Jps</span><br></pre></td></tr></table></figure>

<h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>Java监视和管理平台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jconsole</span><br></pre></td></tr></table></figure>

<p><img src="/posts/817f8310/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2.png" alt="初始化界面"></p>
<p><img src="/posts/817f8310/%E8%BF%90%E8%A1%8C%E7%95%8C%E9%9D%A2.png" alt="运行界面"></p>
<h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p>查看内存</p>
<h3 id="常用命令1"><a href="#常用命令1" class="headerlink" title="常用命令1"></a>常用命令1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcutil pid interval</span><br><span class="line">pid:进程</span><br><span class="line">interval: 间隔时间</span><br><span class="line">lee@lee-mac ~ % jstat -gcutil 63266 1000 </span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br></pre></td></tr></table></figure>

<h3 id="常用命令2"><a href="#常用命令2" class="headerlink" title="常用命令2"></a>常用命令2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gc pid</span><br><span class="line">lee@lee-mac ~ % jstat -gc 63266 </span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">6656.0 7680.0  0.0    0.0   71680.0  63287.4   90624.0    13323.2   35496.0 33765.1 4608.0 4304.3     10    0.079   2      0.202    0.281</span><br></pre></td></tr></table></figure>

<h3 id="常用命令3"><a href="#常用命令3" class="headerlink" title="常用命令3"></a>常用命令3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcnew pid</span><br><span class="line">lee@lee-mac ~ % jstat -gcnew 63266 </span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT  </span><br><span class="line">6656.0 7680.0    0.0    0.0  1  15 7680.0  71680.0  63287.4     10    0.079</span><br></pre></td></tr></table></figure>

<h3 id="常用命令4"><a href="#常用命令4" class="headerlink" title="常用命令4"></a>常用命令4</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcold pid</span><br><span class="line">lee@lee-mac ~ % jstat -gcold 63266 </span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT   </span><br><span class="line"> 35496.0  33765.1   4608.0   4304.3     90624.0     13323.2     10     2    0.202    0.281</span><br></pre></td></tr></table></figure>

<h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p>分析线程运行状况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstack pid</span><br></pre></td></tr></table></figure>

<p>但是jconsole已经集成jstack和jstat的功能</p>
<h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p>可以把堆情况dump下来 然后用软件查看文件信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmap -dump:file=a pid</span><br><span class="line">例如</span><br><span class="line">jmap -dump:file=a 63266</span><br></pre></td></tr></table></figure>

<p>打印当前进程堆内存信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmap -heap pid</span><br></pre></td></tr></table></figure>

<h2 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h2><p>java虚拟机监控工具</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>1.进入jdk安装目录的bin目录，双击打开jvisualvm</p>
<p>2.终端模式下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jvisualvm</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/817f8310.html">http://ulemony.github.io/posts/817f8310.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>GPT-4体验</title>
    <url>/posts/e0a37648.html</url>
    <content><![CDATA[<h1 id="GPT-4"><a href="#GPT-4" class="headerlink" title="GPT-4"></a>GPT-4</h1><p>今天openai发布了目前为止AI领域最先进的人工智能系统——GPT-4</p>
<p><img src="/posts/e0a37648/GPT-4.jpg" alt="head"></p>
<p>于是申请注册体验，由于人太多，估计要等几个工作日，期待能通过申请</p>
<h2 id="GPT-4可以做什么"><a href="#GPT-4可以做什么" class="headerlink" title="GPT-4可以做什么"></a>GPT-4可以做什么</h2><h3 id="1-Creativity-创造力"><a href="#1-Creativity-创造力" class="headerlink" title="1.Creativity 创造力"></a>1.Creativity 创造力</h3><p>它可以生成、编辑和迭代用户进行创意和技术写作任务，例如创作歌曲、编写剧本或学习用户的写作风格。</p>
<p>例如我们输入要求让它解释灰姑娘的故事情节，它会根据要求生成相应的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">Explain the plot of Cinderella in a sentence where each word has to begin with the next letter in the alphabet from A to Z, without repeating any letters.</span><br><span class="line">用一个句子解释灰姑娘的情节，其中每个单词必须以字母表中从 A 到 Z 的下一个字母开头，不要重复任何字母</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line"></span><br><span class="line">A beautiful Cinderella, dwelling eagerly, finally gains happiness; inspiring jealous kin, love magically nurtures opulent prince; quietly rescues, slipper triumphs, uniting very wondrously, xenial youth zealously.</span><br><span class="line">美丽的灰姑娘，急切地栖息着，终于获得了幸福;激发嫉妒的亲人，爱情神奇地培育出华丽的王子;悄悄地营救，拖鞋胜利，团结得非常奇妙，青春热心。</span><br></pre></td></tr></table></figure>

<p>这个功能对于写作辅助可谓一大利器，对于写论文、高考作文训练真是大大滴好呀！</p>
<h3 id="2-Visual-input-图像输入"><a href="#2-Visual-input-图像输入" class="headerlink" title="2.Visual input  图像输入"></a>2.Visual input  图像输入</h3><p>GPT-4 根据输入的图像并生成标题、分类和分析，例如我们输入一张图片，询问它可以利用图片中的原材料做成什么食物</p>
<p>它会识别图片内容并给出建议：煎饼或华夫饼&#x2F;薄饼&#x2F;法式吐司&#x2F;煎蛋或煎蛋饼    （没有广东肠粉差评～-～）</p>
<p>如果你对有选择困难症，可以拍下自家的冰箱，让chatgt告诉你今天吃什么</p>
<p>PS：很好奇发一张九转大肠的图片给chatgt，它给的食谱会不会保留大肠原来的味道～-～</p>
<p><img src="/posts/e0a37648/food.jpg" alt="food"></p>
<h3 id="3-Longer-context-更长的文字处理"><a href="#3-Longer-context-更长的文字处理" class="headerlink" title="3.Longer context 更长的文字处理"></a>3.Longer context 更长的文字处理</h3><p>GPT-4 能够处理超过 25，000 字的文本，允许使用长篇内容创建、扩展对话以及文档搜索和分析等用例。</p>
<p>打个比方，附上蕾哈娜的维基百科信息网址，让它分析蕾哈娜在超级碗中的表现以及过人之处：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[Text from: https://en.wikipedia.org/wiki/Rihanna]</span><br><span class="line"></span><br><span class="line">Describe her Super Bowl performance and what made it special.</span><br></pre></td></tr></table></figure>

<p>GPT-4会从长达几万字的维基百科介绍中提炼出如下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line">Rihanna&#x27;s Super Bowl LVII halftime show performance was special for a number of reasons. For one, it marked her first live performance in over five years, and it was her first time headlining the Super Bowl halftime show. Additionally, she made history by becoming the first person to perform at the Super Bowl while pregnant. The show itself was critically acclaimed, with many praising her high-energy performance and impressive vocals. It also garnered a massive viewership, becoming the second most-watched halftime show in history.</span><br><span class="line">蕾哈娜的超级碗LVII中场秀表演很特别，原因有很多。首先，这是她五年多来的第一次现场表演，这是她第一次在超级碗中场秀中担任头条新闻。此外，她创造了历史，成为第一个在怀孕期间在超级碗上表演的人。该节目本身广受好评，许多人称赞她的高能量表演和令人印象深刻的人声。它还获得了大量的收视率，成为历史上收视率第二高的中场秀。</span><br></pre></td></tr></table></figure>



<h2 id="GPT-4的亮点"><a href="#GPT-4的亮点" class="headerlink" title="GPT-4的亮点"></a>GPT-4的亮点</h2><p>GPT-4在其先进的推理能力方面超过了上一个版本ChatGPT。</p>
<p>例如同一个问题，GPT-4比ChatGPT给出了更加精准的答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">Andrew is free from 11 am to 3 pm, Joanne is free from noon to 2 pm and then 3:30 pm to 5 pm. Hannah is available at noon for half an hour, and then 4 pm to 6 pm. What are some options for start times for a 30 minute meeting for Andrew, Hannah, and Joanne?安德鲁从上午 11 点到下午 3 点有空，乔安妮从中午到下午 2 点，然后下午 3：30 到下午 5 点自由。汉娜在中午半小时可用，然后下午4点到6点。对于安德鲁、汉娜和乔安妮来说，30 分钟会议的开始时间有哪些选择？</span><br></pre></td></tr></table></figure>



<p>ChatGPT给出的答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line">Here is a list of their availability:</span><br><span class="line">- Andrew: 11 am to 3 pm</span><br><span class="line">- Joanne: noon to 2 pm, and 3:30 pm to 5 pm</span><br><span class="line">- Hannah: noon to 12:30 pm, and 4 pm to 6 pm</span><br><span class="line"></span><br><span class="line">Based on their availability, there is a 30-minute window where all three of them are available, which is from 4 pm to 4:30 pm. So, the meeting can be scheduled at 4 pm.</span><br><span class="line">以下是它们的可用性列表：</span><br><span class="line">- 安德鲁：上午 11 点至下午 3 点</span><br><span class="line">- 乔安妮：中午至下午 2 点，下午 3：30 至下午 5 点</span><br><span class="line">- 汉娜：中午至下午 12：30，下午 4 点至下午 6 点</span><br><span class="line"></span><br><span class="line">根据他们的可用性，有一个 30 分钟的窗口，所有三个都可用，即下午 4 点到 4：30。因此，会议可以安排在下午 4 点。</span><br></pre></td></tr></table></figure>



<p>GPT-4给出的答案</p>
<p>Andrew: 11 am - 3 pm Joanne: 12 pm - 2 pm, 3:30 pm - 5 pm Hannah: 12 pm - 12:30 pm, 4 pm - 6 pm Common availability for a 30-minute meeting: 12 pm - 12:30 pm<br>安德鲁：上午 11 点至下午 3 点<br>乔安妮：中午 12 点至下午 2 点，下午 3：30 至下午 5 点<br>汉娜：中午12时至下午12时30分，下午4时至下午6时</p>
<p>30 分钟会议的通用可用性：中午 12 点至下午 12：30</p>
<h2 id="人类未来的诗歌"><a href="#人类未来的诗歌" class="headerlink" title="人类未来的诗歌"></a>人类未来的诗歌</h2><p>最后附上一首CHATGPT写的诗歌，人工智能在将会彻底颠覆人类社会的各个方面，希望这是写给人类的颂歌</p>
<p><img src="/posts/e0a37648/poem.jpg" alt="poem"></p>
<p>链接 <a href="http://ulemony.github.io/posts/e0a37648.html">http://ulemony.github.io/posts/e0a37648.html</a> </p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka常用命令</title>
    <url>/posts/d25e2bb0.html</url>
    <content><![CDATA[<p>进入容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure>

<p>进入到kafka的安装目录，查看到kafka相关的命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd /opt/kafka/bin/</span><br></pre></td></tr></table></figure>

<h2 id="topic操作"><a href="#topic操作" class="headerlink" title="topic操作"></a>topic操作</h2><h3 id="创建一个topic"><a href="#创建一个topic" class="headerlink" title="创建一个topic"></a>创建一个topic</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加名为test的topic 一个分区，3个副本,其中xxxx:2181为zookeeper的端口</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --create --topic test --replication-factor 1 --partitions 3</span><br></pre></td></tr></table></figure>

<p>执行后效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Created topic test.</span><br></pre></td></tr></table></figure>

<h3 id="查询topic列表"><a href="#查询topic列表" class="headerlink" title="查询topic列表"></a>查询topic列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#其中xxxx:2181为zookeeper的端口</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --list</span><br></pre></td></tr></table></figure>

<p> 执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test</span><br></pre></td></tr></table></figure>

<h3 id="查询topic详情"><a href="#查询topic详情" class="headerlink" title="查询topic详情"></a>查询topic详情</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询名为test2的topic详情</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --describe --topic test2</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Topic: test2	TopicId: uly4F1d3SEyregeocjltZA	PartitionCount: 3	ReplicationFactor: 1	Configs: </span><br><span class="line">	Topic: test2	Partition: 0	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: test2	Partition: 1	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: test2	Partition: 2	Leader: 0	Replicas: 0	Isr: 0</span><br></pre></td></tr></table></figure>

<h3 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除名为test2的topic</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --delete --topic test2</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Topic test2 is marked for deletion.</span><br><span class="line">Note: This will have no impact if delete.topic.enable is not set to true.</span><br></pre></td></tr></table></figure>

<h2 id="发送消费消息"><a href="#发送消费消息" class="headerlink" title="发送消费消息"></a>发送消费消息</h2><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic example</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;^Croot@f48c27085ce3:/opt/kafka/bin# kafka-console-producer.sh --broker-list  localhost:9092 --topic example</span><br><span class="line">&gt;hello world！</span><br></pre></td></tr></table></figure>

<h3 id="消费者消费消息"><a href="#消费者消费消息" class="headerlink" title="消费者消费消息"></a>消费者消费消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic example --from-beginning</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world！</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/d25e2bb0.html">http://ulemony.github.io/posts/d25e2bb0.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>kafka&#39;</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/d0edc1ed.html</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>使用scp将一个Linux系统中的文件或文件夹复制到另一台Linux服务器上</p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>1.将本地文件拷贝到远程主机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp 文件名 用户名@计算机IP或者计算机名称:远程路径</span></span><br><span class="line"><span class="comment">//192.168.1.12为远程服务器</span></span><br><span class="line">scp /root/install.* root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>:/usr/local/src</span><br></pre></td></tr></table></figure>

<p>2.从远程将文件拷回本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp 用户名@计算机IP或者计算机名称:文件名 本地路径</span></span><br><span class="line"><span class="comment">//本地192.168.1.8客户端取远程服务器12、11上的文件</span></span><br><span class="line">scp root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>:/usr/local/src<span class="comment">/*.log /root/</span></span><br></pre></td></tr></table></figure>

<h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><p>1.将本地文件夹拷贝到远程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp -r 目录名 用户名@计算机IP或者计算机名称:远程路径</span></span><br><span class="line"><span class="comment">//test1为源目录，test2为目标目录，zhidao@192.168.0.1为远程服务器的用户名和ip地址。</span></span><br><span class="line">scp -r /home/test1 zhidao@<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:/home/test2 </span><br></pre></td></tr></table></figure>

<p>2.从远程拷贝目录回本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp -r 用户名@计算机IP或者计算机名称:目录名 本地路径</span></span><br><span class="line"><span class="comment">//zhidao@192.168.0.1为远程服务器的用户名和ip地址，test1为源目录，test2为目标目录</span></span><br><span class="line">scp  -r zhidao@<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:/home/test2 /home/test1</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/d0edc1ed.html">http://ulemony.github.io/posts/d0edc1ed.html</a> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL基础</title>
    <url>/posts/bce68613.html</url>
    <content><![CDATA[<h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><h1 id="1-存储引擎对比"><a href="#1-存储引擎对比" class="headerlink" title="1. 存储引擎对比"></a>1. 存储引擎对比</h1><table>
<thead>
<tr>
<th>对比项</th>
<th><strong>InnoDB</strong></th>
<th><strong>MyISAM</strong></th>
</tr>
</thead>
<tbody><tr>
<td><strong>事务支持</strong></td>
<td>✅ 支持（ACID），支持事务的四种隔离级别</td>
<td>❌ 不支持事务</td>
</tr>
<tr>
<td><strong>锁机制</strong></td>
<td>行级锁 + 多种锁（意向锁、间隙锁等）</td>
<td>表级锁</td>
</tr>
<tr>
<td><strong>并发能力</strong></td>
<td>高并发性能好</td>
<td>并发性能差，写时锁表</td>
</tr>
<tr>
<td><strong>外键支持</strong></td>
<td>✅ 支持外键</td>
<td>❌ 不支持外键</td>
</tr>
<tr>
<td><strong>崩溃恢复能力</strong></td>
<td>✅ 强（支持崩溃恢复、Redo&#x2F;Undo Log）</td>
<td>❌ 弱，崩溃后易数据损坏</td>
</tr>
<tr>
<td><strong>MVCC 支持</strong></td>
<td>✅ 支持（多版本并发控制）</td>
<td>❌ 不支持</td>
</tr>
<tr>
<td><strong>全文索引</strong></td>
<td>✅ 支持（MySQL 5.6+）</td>
<td>✅ 支持（较早）</td>
</tr>
<tr>
<td><strong>索引结构</strong></td>
<td>聚簇索引（主键与数据在一起）</td>
<td>非聚簇索引（索引与数据分离）</td>
</tr>
<tr>
<td><strong>存储文件</strong></td>
<td><code>.ibd</code> 或共享表空间</td>
<td><code>.MYD</code>（数据） + <code>.MYI</code>（索引）</td>
</tr>
<tr>
<td><strong>表行统计</strong></td>
<td>估算值（快速但不准）</td>
<td>精确计数（慢）</td>
</tr>
<tr>
<td><strong>表空间大小</strong></td>
<td>通常较大</td>
<td>通常较小</td>
</tr>
<tr>
<td><strong>删除数据后空间</strong></td>
<td>不会自动收缩（可用 OPTIMIZE）</td>
<td>可重用空间</td>
</tr>
<tr>
<td><strong>使用场景</strong></td>
<td>事务系统、高并发、数据一致性要求高</td>
<td>静态数据查询为主、读多写少</td>
</tr>
<tr>
<td><strong>默认引擎（5.5+）</strong></td>
<td>✅ 是</td>
<td>❌ 否</td>
</tr>
</tbody></table>
<h1 id="2-Explain语句结果各字段分别表示什么"><a href="#2-Explain语句结果各字段分别表示什么" class="headerlink" title="2.Explain语句结果各字段分别表示什么"></a>2.Explain语句结果各字段分别表示什么</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> name <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>     <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible\_keys <span class="operator">|</span> key      <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>   <span class="operator">|</span> <span class="keyword">rows</span> <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="comment">-- | ------------ | --------- | ---------- | ---- | -------------- | -------- | -------- | ----- | ---- | -------- | ----------- |</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>  <span class="operator">|</span> SIMPLE       <span class="operator">|</span> employees <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> idx\_age       <span class="operator">|</span> idx\_age <span class="operator">|</span> <span class="number">5</span>        <span class="operator">|</span> const <span class="operator">|</span> <span class="number">3</span>    <span class="operator">|</span> <span class="number">100.00</span>   <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>字段解释：</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>id</strong></td>
<td>一个select对应一个id，如果是一个select的join操作，会有两个相同id。如果有子查询id会增加，如果能转join的子查询会优化成join。</td>
</tr>
<tr>
<td><strong>select_type</strong></td>
<td>查询类型，如 <code>SIMPLE</code>（简单查询）、<code>PRIMARY</code>、<code>SUBQUERY</code> 等。</td>
</tr>
<tr>
<td><strong>table</strong></td>
<td>当前访问的表名或别名。</td>
</tr>
<tr>
<td><strong>partitions</strong></td>
<td>如果用到分区表，这里会显示所使用的分区；没有分区则为 <code>NULL</code>。</td>
</tr>
<tr>
<td><strong>type</strong></td>
<td><strong>连接类型（访问方式）</strong>，反映性能的关键字段（见下方类型说明）。</td>
</tr>
<tr>
<td><strong>possible_keys</strong></td>
<td>查询可能使用的索引列表（优化器认为可用）。</td>
</tr>
<tr>
<td><strong>key</strong></td>
<td>实际使用的索引。如果为 <code>NULL</code>，表示未使用索引。</td>
</tr>
<tr>
<td><strong>key_len</strong></td>
<td>实际使用索引的长度（字节数）。表示索引利用了多少列。</td>
</tr>
<tr>
<td><strong>ref</strong></td>
<td>使用索引进行等值查询时与索引进行比较的对象（常为常量或列）。</td>
</tr>
<tr>
<td><strong>rows</strong></td>
<td>MySQL <strong>预估</strong>扫描的行数（越小越好）。</td>
</tr>
<tr>
<td><strong>filtered</strong></td>
<td>过滤后保留的百分比（估算值），与 <code>rows</code> 一起判断数据过滤情况。</td>
</tr>
<tr>
<td><strong>Extra</strong></td>
<td>附加信息，例如是否用到临时表、排序，是否用到索引等。</td>
</tr>
</tbody></table>
<h2 id="2-1-type常见值说明"><a href="#2-1-type常见值说明" class="headerlink" title="2.1 type常见值说明"></a>2.1 type常见值说明</h2><table>
<thead>
<tr>
<th><code>type</code> 值</th>
<th>含义说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>system</strong></td>
<td>表仅有一行（系统表）</td>
</tr>
<tr>
<td><strong>const</strong></td>
<td>索引唯一匹配一行（如主键或唯一键）</td>
</tr>
<tr>
<td><strong>eq_ref</strong></td>
<td>多表连接中，使用主键或唯一索引</td>
</tr>
<tr>
<td><strong>ref</strong></td>
<td>使用普通索引等值匹配（如 <code>WHERE age = 30</code>）</td>
</tr>
<tr>
<td><strong>range</strong></td>
<td>使用索引范围扫描（如 <code>BETWEEN</code>、<code>&gt;</code>、<code>&lt;</code>）</td>
</tr>
<tr>
<td><strong>index</strong></td>
<td>扫描整个索引（不访问数据行）</td>
</tr>
<tr>
<td><strong>ALL</strong></td>
<td>全表扫描</td>
</tr>
</tbody></table>
<h2 id="2-2-Extra常见值说明"><a href="#2-2-Extra常见值说明" class="headerlink" title="2.2 Extra常见值说明"></a>2.2 Extra常见值说明</h2><table>
<thead>
<tr>
<th>Extra 值</th>
<th>含义说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>Using index</strong></td>
<td>覆盖索引（只用索引就能获取数据）</td>
</tr>
<tr>
<td><strong>Using where</strong></td>
<td>使用了 <code>WHERE</code> 条件进行过滤</td>
</tr>
<tr>
<td><strong>Using temporary</strong></td>
<td>使用了临时表（如排序、分组时）</td>
</tr>
<tr>
<td><strong>Using filesort</strong></td>
<td>使用文件排序（不能用索引排序）</td>
</tr>
<tr>
<td><strong>NULL</strong></td>
<td>没有额外操作</td>
</tr>
</tbody></table>
<h1 id="3-Mysql主从同步原理"><a href="#3-Mysql主从同步原理" class="headerlink" title="3.Mysql主从同步原理"></a>3.Mysql主从同步原理</h1><h2 id="3-1同步流程"><a href="#3-1同步流程" class="headerlink" title="3.1同步流程"></a>3.1同步流程</h2><p><strong>主库（Master）写 binlog</strong></p>
<ul>
<li>主库执行完一个事务后，会把操作记录写入 <code>binlog</code>（如 insert、update 等 DML 操作）。</li>
</ul>
<p><strong>从库（Slave）IO线程读 binlog</strong></p>
<ul>
<li>从库启动后，会开启一个 <strong>IO 线程</strong> 去连接主库的 <code>binlog dump 线程</code>，将主库的 binlog 日志拉到自己本地，并写入 <code>relay log</code>。</li>
</ul>
<p><strong>从库 SQL线程执行 relay log</strong></p>
<ul>
<li>从库的 <strong>SQL 线程</strong> 读取 <code>relay log</code> 的内容，并在本地重放（执行相同 SQL），以达到主从一致。</li>
</ul>
<p><img src="/posts/undefined/%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5.png" alt="主从同步"></p>
<h2 id="3-2-同步策略"><a href="#3-2-同步策略" class="headerlink" title="3.2 同步策略"></a>3.2 同步策略</h2><ul>
<li><p>异步复制，master不管slave，只管自己写binlog，slave异步去同步，这种新能最好，但是一致性最差。</p>
</li>
<li><p>半同步复制，事务提交要求n个slave收到日志才算提交成功，当n设置为全部slave节点就是同步复制了。</p>
</li>
<li><p>全同步复制，事务提交要求全部的slave收到日志才算提交成功</p>
</li>
</ul>
<h1 id="4-为什么使用了索引，还是慢查询"><a href="#4-为什么使用了索引，还是慢查询" class="headerlink" title="4.为什么使用了索引，还是慢查询"></a>4.为什么使用了索引，还是慢查询</h1><h2 id="场景1-慢SQL的原因是没命中索引"><a href="#场景1-慢SQL的原因是没命中索引" class="headerlink" title="场景1: 慢SQL的原因是没命中索引"></a>场景1: 慢SQL的原因是没命中索引</h2><p>实时分析：</p>
<p><img src="/posts/undefined/%E4%BC%98%E5%8C%96%E5%89%8D%E7%BB%9F%E8%AE%A1.png" alt="优化前统计"></p>
<p>慢SQL</p>
<p>在慢查询中，最多的一条语句是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> `white_user` <span class="keyword">WHERE</span> `user_id`<span class="operator">=</span>? <span class="keyword">AND</span> `status`<span class="operator">=</span>? <span class="keyword">AND</span> `level`<span class="operator">=</span>? <span class="keyword">AND</span> `type`<span class="operator">=</span>? LIMIT ?,?;</span><br></pre></td></tr></table></figure>

<p>表结构</p>
<p><img src="/posts/undefined/%E8%A1%A8%E7%BB%93%E6%9E%84.png" alt="表结构"></p>
<p>执行计划</p>
<p><img src="/posts/undefined/%E4%BC%98%E5%8C%96%E5%89%8D%E7%BB%9F%E8%AE%A1.png" alt="优化前统计"></p>
<p>由执行计划的key看到没有用到索引</p>
<p>解决办法：创建索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `white_user` <span class="keyword">add</span> `idx_user_id_status_level_type`(`user_id`,`status`,`level`,`type`);</span><br></pre></td></tr></table></figure>



<p>优化后统计：</p>
<p><img src="/posts/undefined/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BB%9F%E8%AE%A1.png" alt="优化后统计"></p>
<h2 id="场景2-慢SQL的原因是命中了，但是Using-filesort"><a href="#场景2-慢SQL的原因是命中了，但是Using-filesort" class="headerlink" title="场景2:慢SQL的原因是命中了，但是Using filesort"></a>场景2:慢SQL的原因是命中了，但是Using filesort</h2><p>查询商家的退款订单列表且按倒叙排序</p>
<p><img src="/posts/undefined/%E6%85%A2%E6%9F%A5%E8%AF%A2.png" alt="慢查询"></p>
<p>执行计划</p>
<p><img src="/posts/undefined/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%922.png" alt="执行计划2"></p>
<p>Using filesort 文件排序比较慢，一般在order by的时候出现</p>
<p>部分表结构</p>
<p><img src="/posts/undefined/%E8%A1%A8%E7%BB%93%E6%9E%842.png" alt="表结构2"></p>
<p>解决办法：用到索引的同时，也不要进行文件排序，而是进行create_time的排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> `refund_cuser` <span class="keyword">add</span> index `idx_buser_id_createtime`(`buser_id`,`create_time`);</span><br></pre></td></tr></table></figure>



<p>通过执行计划发现已经没有了using filesort</p>
<p><img src="/posts/undefined/%E4%BC%98%E5%8C%96%E5%90%8E%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png" alt="优化后执行计划"></p>
<p>优化后统计</p>
<p><img src="/posts/undefined/%E4%BC%98%E5%8C%96%E5%90%8E%E7%BB%9F%E8%AE%A12.png" alt="优化后统计2"></p>
<p>链接 <a href="http://ulemony.github.io/posts/undefined.html">http://ulemony.github.io/posts/undefined.html</a> </p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/posts/fe29e710.html</url>
    <content><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="Redis五大数据类型"><a href="#Redis五大数据类型" class="headerlink" title="Redis五大数据类型"></a>Redis五大数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>

<p>查询当前库所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<p>判断某个key是否存在，存在返回1，不存在返回0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure>

<p>对key的值追加拼接数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APPEND key value</span><br></pre></td></tr></table></figure>

<p>查看数据长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STRLEN key</span><br></pre></td></tr></table></figure>

<p>递增数值, 应用场景：网站访问次数，收藏数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INCR key</span><br><span class="line">INCRBY key num 指定数值递增</span><br></pre></td></tr></table></figure>

<p>递减数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECR key</span><br><span class="line">DECRBY key num 指定数值递减</span><br></pre></td></tr></table></figure>

<p>截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GETRANGE key 0 4  获取字符串下标从0开始，包含下标4</span><br></pre></td></tr></table></figure>

<p>替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SETRANGE key 5 88 把下标为5的元素替换为88</span><br></pre></td></tr></table></figure>

<p>同时设置&#x2F;获取多个键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSET key value [key value...] 设置</span><br><span class="line">MGET key [key...]  获取</span><br></pre></td></tr></table></figure>

<p>分布式锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SETNX key value  不存在才设置</span><br><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line"></span><br><span class="line">EX：key在多少秒之后过期</span><br><span class="line">PX：key在多少毫秒之后过期</span><br><span class="line">NX：当key不存在的时候，才创建key，效果等同于setnx</span><br><span class="line">XX：当key存在的时候，覆盖key</span><br></pre></td></tr></table></figure>

<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>左添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LPUSH key value[value...]</span><br></pre></td></tr></table></figure>

<p>右添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RPUSH key value[value...]</span><br></pre></td></tr></table></figure>

<p>查看列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure>

<p>获取列表元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LLEN key</span><br></pre></td></tr></table></figure>

<p>左移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></table></figure>

<p>右移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></table></figure>

<p>查询指定下标元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex key 1 查询下标为1的元素</span><br></pre></td></tr></table></figure>

<p>移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem key 3 v2  移除集合中元素“v2”的元素3个</span><br></pre></td></tr></table></figure>

<p>截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ltrim key start stop   只保留截取后的元素【start，stop】</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lset key index newValue 将下标为index的元素更新为新值</span><br></pre></td></tr></table></figure>

<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>相当于Java中Map&lt;String,Map&lt;object,object&gt;&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用场景：购物车</span><br><span class="line">新增商品 hset shopcar:uid1024 334488 1</span><br><span class="line">新增商品 hset shopcar:uid1024 334477 1</span><br><span class="line">增加商品数量 hincrby shopcar:uid1024 334477 1</span><br><span class="line">商品总数 hlen shopcar:uid1024</span><br><span class="line">全部选择 hgetall shopcar:uid1024</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset key field  添加一个</span><br><span class="line">hmset key field value[field value] 添加多个</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hmget key field[field]</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdel key field[field]</span><br></pre></td></tr></table></figure>

<p>获取长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure>

<p>判断是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure>

<p>获取指定hash中所有key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hkeys key  </span><br></pre></td></tr></table></figure>

<p>获取指定hash中所有value</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hvals key</span><br></pre></td></tr></table></figure>

<p>增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>无序；应用场景：抽奖、朋友圈点赞、社交关系、可能认识的人</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd key member [member]</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srem key member</span><br></pre></td></tr></table></figure>

<p>获取所有元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure>

<p>判断元素是否在集合中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure>

<p>获取元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure>

<p>随机弹出元素，但不删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<p>随机弹出元素并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<p>集合运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sinter key [key]  交集</span><br><span class="line">sdiff key [key]   差集</span><br><span class="line">sunion key [key]  并集</span><br></pre></td></tr></table></figure>

<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>有序；应用场景：热搜、商品排序</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd key score member [score member]</span><br></pre></td></tr></table></figure>

<p>排序小-大</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrange key start stop [withscores]</span><br></pre></td></tr></table></figure>

<p>获取指定分数范围元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [withscores] [limit offset count]</span><br><span class="line"></span><br><span class="line">min 和 max: 这两个参数用于指定分数范围的下限和上限，你可以使用 -inf 表示负无穷大，+inf 表示正无穷大。指定范围内的成员将会被检索。</span><br><span class="line">[withscores]: 这是一个可选参数，如果包含这个参数，那么返回的结果将包括成员的分数。如果不包含这个参数，只会返回成员的值。</span><br><span class="line">[limit offset count]: 这也是一个可选参数，用于限制返回的结果数量。offset 表示从匹配到的成员列表中的第几个成员开始返回结果，count 表示最多返回的成员数量。这个参数允许你进行分页查询，从匹配的成员中获取一部分。</span><br></pre></td></tr></table></figure>

<p>增加某个元素分数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>

<p>获取集合元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcard key</span><br></pre></td></tr></table></figure>

<p>获取指定范围元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrem key member [member]</span><br></pre></td></tr></table></figure>

<p>按照排名范围删除元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br></pre></td></tr></table></figure>

<p>获取元素排名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrank key member  小-大</span><br><span class="line">zrevrank key member 大-小</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/fe29e710.html">http://ulemony.github.io/posts/fe29e710.html</a> </p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置原理</title>
    <url>/posts/ec6e45b4.html</url>
    <content><![CDATA[<h2 id="Springboot自动配置原理"><a href="#Springboot自动配置原理" class="headerlink" title="Springboot自动配置原理"></a>Springboot自动配置原理</h2><ol>
<li>SpringBoot通过@EnableAutoConfiguration开启自动配置</li>
<li>利用@Import加载META-INF&#x2F;spring.factories配置文件中的所有自动配置类</li>
<li>这些配置类会根据@Conditionnal派生注解来生效</li>
<li>这些自动配置类会通过以Properties结尾命名的类获取全局配置文件中的属性</li>
<li>xxxProperties类通过@ConfigurationProperties注解和全局配置文件中的属性进行绑定</li>
</ol>
<h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="comment">//通过该注解开启自动配置</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">  </span><br><span class="line">	<span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">	String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">	Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="comment">//注入类</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">	 * applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">AutoConfigurationImportSelector.class</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">AutoConfigurationMetadata</span> <span class="variable">autoConfigurationMetadata</span> <span class="operator">=</span> AutoConfigurationMetadataLoader</span><br><span class="line">      <span class="comment">//加载自动配置类</span></span><br><span class="line">				.loadMetadata(<span class="built_in">this</span>.beanClassLoader);</span><br><span class="line">		<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">				annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	&#125;</span><br><span class="line">AutoConfigurationMetadataLoader.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> <span class="keyword">static</span> AutoConfigurationMetadata <span class="title function_">loadMetadata</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> loadMetadata(classLoader, PATH);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> AutoConfigurationMetadata <span class="title function_">loadMetadata</span><span class="params">(ClassLoader classLoader, String path)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//实际上从&quot;META-INF/&quot; + &quot;spring-autoconfigure-metadata.properties&quot;下加载自动配置类</span></span><br><span class="line">			Enumeration&lt;URL&gt; urls = (classLoader != <span class="literal">null</span>) ? classLoader.getResources(path)</span><br><span class="line">					: ClassLoader.getSystemResources(path);</span><br><span class="line">			<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">				properties.putAll(PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> <span class="title class_">UrlResource</span>(urls.nextElement())));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> loadMetadata(properties);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load @ConditionalOnClass location [&quot;</span> + path + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="comment">//从xxxProperties类中获取全局配置文件属性值</span></span><br><span class="line">	<span class="meta">@EnableConfigurationProperties(&#123; HttpProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletConfiguration</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//通过该注解和全局配置文件中的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpProperties</span>   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/ec6e45b4.html">http://ulemony.github.io/posts/ec6e45b4.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务</title>
    <url>/posts/65703737.html</url>
    <content><![CDATA[<h2 id="Spring事务是如何实现的"><a href="#Spring事务是如何实现的" class="headerlink" title="Spring事务是如何实现的"></a>Spring事务是如何实现的</h2><ol>
<li>Spring事务底层基于数据库事务和AOP机制</li>
<li>对使用了@Transactional注解的Bean，Spring会创建一个代理对象作为Bean</li>
<li>调用代理对象的方法时，会先判断该方法是否有@Transactional注解，如果加了会利用事务管理器创建一个数据库连接，并且将数据库连接的autocommit属性设置为false，禁止连接自动提交</li>
<li>执行当前方法，方法中会执行sql，方法执行完后如果没有异常就提交事务；如果出现了异常则回滚事务，至于哪些异常回滚事务，可以通过@Transactional注解的rollbackFor进行配置，默认会对RuntimeException和erroe进行回滚</li>
</ol>
<h2 id="Spring事务隔离级别"><a href="#Spring事务隔离级别" class="headerlink" title="Spring事务隔离级别"></a>Spring事务隔离级别</h2><p>spring事务隔离级别就是数据库的隔离级别，它是基于数据库连接来做的，一个事务对应一个数据库连接，如果传播机制要新开事务，实际上是新建一个数据库连接来执行sql</p>
<p>1.read uncommitted 未提交读</p>
<p>2.read committed 提交读、不可重复读</p>
<p>3.repeatable read 可重复读</p>
<p>4.serializable 可串行化</p>
<h2 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h2><ol>
<li>REQUIRED：如果当前没有事务则新建一个事务，如果有就加入该事务</li>
<li>SUPPORTS：当前存在事务则加入该事务，没有则以非事务方法执行</li>
<li>MANDATORY：当前存在事务则加入该事务，没有则抛出异常</li>
<li>REQUIRED_NEW：创建一个新事务，如果当前存在事务则将其挂起</li>
<li>NOT_SUPPORTED：以非事务方式执行，如果当前存在事务则将其挂起</li>
<li>NEVER：不使用事务，如果当前存在事务则抛出异常</li>
<li>NESTED：如果当前事务存在，则在嵌套事务中执行，如果不存在事务则新建一个事务</li>
</ol>
<h2 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h2><ol>
<li><p>方法内自调用：Spring事务是基于AOP的，只有使用代理对象调用某个方法时，事务才生效，如果一个方法中使用this.xxx（）调用方法时，this不是代理对象，导致事务失效</p>
<p>a. 解决办法1: 把调用方法拆分到另外一个bean</p>
<p>b. 解决办法2: 自己注入自己</p>
<p>c. 解决办法3: AopContext.currentProxy()+@EnableAspectJAutoProxy(exposeProxy&#x3D;true)</p>
</li>
<li><p>方法是private的：Spring事务基于CGLIB来进行AOP，而CGLIB基于父子类生效，子类是代理类，父类是被代理类，如果父类某个方法是private，子类没办法重写，也就不能增加spring事务的逻辑</p>
</li>
<li><p>方法是final的：原因同上</p>
</li>
<li><p>单独的线程：当Mybatis或JdbcTemplate执行sql时，会从ThreadLocal中获取数据库连接对象，如果开启事务的线程和执行sql的线程不是同一个线程，那么Mybatis或JdbcTemplate就会新建一个数据库连接来执行sql，此时autocommit为true，执行完sql便提交，后续即使抛出异常也不会进行回滚</p>
</li>
<li><p>spring事务没有捕捉到异常，从而不回滚</p>
</li>
<li><p>类没有被Spring管理</p>
</li>
<li><p>数据库不支持事务</p>
</li>
</ol>
<p>链接 <a href="http://ulemony.github.io/posts/65703737.html">http://ulemony.github.io/posts/65703737.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring循环依赖</title>
    <url>/posts/a5d86a59.html</url>
    <content><![CDATA[<h2 id="spring循环依赖"><a href="#spring循环依赖" class="headerlink" title="spring循环依赖"></a>spring循环依赖</h2><p>AService里面有BService属性，BService里面有AService属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.creatingSet(&#x27;AService&#x27;)</span><br><span class="line">1.new Aservice() ---&gt; Aservice普通对象 ---&gt; 三级缓存singletonFactories&lt;aService,lambda(beanName,Aservice)&gt;</span><br><span class="line">2.填充bService属性 ---&gt;单例池Map ---&gt;找不到</span><br><span class="line">		</span><br><span class="line">		创建BService</span><br><span class="line">		2.1 new BService() ---&gt; BService普通对象</span><br><span class="line">		2.2 添加aService属性 ---&gt; 单例池Map ---&gt;找不到 ---&gt; creatingSet ---&gt; AService循环依赖 ---&gt; 二级缓存---&gt; 三级缓存</span><br><span class="line">				---&gt; lambda---&gt; 判断要不要AOP？---&gt; 提前进行AOP ---&gt; AService代理对象 ---&gt; 放入二级缓存,并且移除三级缓存的对象(不再需要lambda表达式)</span><br><span class="line">										                 --------------&gt;AService普通对象 </span><br><span class="line">		2.3 添加其他属性</span><br><span class="line">		2.4 其他步骤</span><br><span class="line">		2.5 放入单例池Map&lt;beanName, AService Bean对象&gt;</span><br><span class="line">		</span><br><span class="line">3.填充cService属性</span><br><span class="line"></span><br><span class="line">	创建CService</span><br><span class="line">		3.1 new CService() ---&gt; BService普通对象</span><br><span class="line">		3.2 添加aService属性 ---&gt; 单例池Map ---&gt;找不到 ---&gt; creatingSet ---&gt; AService循环依赖 ---&gt;第二级</span><br><span class="line">		3.3 添加其他属性</span><br><span class="line">		3.4 其他步骤</span><br><span class="line">		3.5 放入单例池Map&lt;beanName, AService Bean对象&gt;</span><br><span class="line">		</span><br><span class="line">4.其他步骤(AOP) ---&gt;AService 代理对象(?) ---&gt;判断是否提前进行了AOP若是则返回普通对象，否则进行AOP返回代理对象</span><br><span class="line">5.把二级缓存对象放入一级缓存单例池Map&lt;beanName, AService Bean对象&gt;，并移除二级缓存对象</span><br><span class="line"></span><br><span class="line">注意：普通对象没有值是一个半成品；Bean对象有值，是一个完整体</span><br></pre></td></tr></table></figure>

<h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><p>第一级缓存：singletonObjects 单例池 保证bean对象的单例效果</p>
<p>第二级缓存：earlySingletonObjects 保证单例效果，但是此时的对象还不是完整体</p>
<p>第三级缓存：singletonFactories 打破循环</p>
<h2 id="哪些情况spring不能解决循环依赖"><a href="#哪些情况spring不能解决循环依赖" class="headerlink" title="哪些情况spring不能解决循环依赖"></a>哪些情况spring不能解决循环依赖</h2><p>构造注入,spring无法解决这样的循环依赖，无法产生基本的普通对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> BService bService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AService</span><span class="params">(BService bService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.bService=bService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> AService aService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BService</span><span class="params">(AService aService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.aService=aService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对上述情况需要用@Lazy注解来解决，会产生一个BService的代理对象,不会进入对BService属性赋值的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> BService bService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Lazy</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AService</span><span class="params">(BService bService)</span>&#123;  <span class="comment">//BService代理对象</span></span><br><span class="line">		<span class="built_in">this</span>.bService=bService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> AService aService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BService</span><span class="params">(AService aService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.aService=aService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = (BeanWrapper)<span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">            instanceWrapper = <span class="built_in">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">        Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">        <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">            mbd.resolvedTargetType = beanType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, var17);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">						<span class="comment">//如果支持循环依赖，则生成三级缓存，提前暴露bean</span></span><br><span class="line">            <span class="built_in">this</span>.addSingletonFactory(beanName, () -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//填充属性，循环依赖在这个阶段产生</span></span><br><span class="line">            <span class="built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">          <span class="comment">//执行初始化方法</span></span><br><span class="line">            exposedObject = <span class="built_in">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var18 <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException)var18;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> <span class="built_in">this</span>.getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                  <span class="comment">//把原始bean 置换为代理对象</span></span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; <span class="built_in">this</span>.hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = <span class="built_in">this</span>.getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(dependentBeans.length);</span><br><span class="line">                    String[] var12 = dependentBeans;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var13</span> <span class="operator">=</span> dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="number">0</span>; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">dependentBean</span> <span class="operator">=</span> var12[var14];</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">this</span>.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName, <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">            <span class="keyword">return</span> exposedObject;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, var16);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">DefaultSingletonBeanRegistry.class</span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, <span class="type">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class="line">       <span class="comment">//首先从一级缓存里面获取对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">  			<span class="comment">//一级缓存找不到而且对象正在创建中</span></span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">          <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">              <span class="comment">//从二级缓存找</span></span><br><span class="line">                singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">              <span class="comment">//二级缓存找不到，并且允许循环依赖</span></span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                  <span class="comment">//从三级缓存找到一个lambda表达式，实质是一个对象工厂</span></span><br><span class="line">                    ObjectFactory&lt;?&gt; singletonFactory = (ObjectFactory)<span class="built_in">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                      <span class="comment">//执行三级缓存里的lambda表达式，通过工厂方法来创建对象</span></span><br><span class="line">                        singletonObject = singletonFactory.getObject();</span><br><span class="line">                      <span class="comment">//把创建的对象放入二级缓存中</span></span><br><span class="line">                        <span class="built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                      <span class="comment">//并且移除三级缓存的普通对象</span></span><br><span class="line">                        <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">&quot;Bean name must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationNotAllowedException</span>(beanName, <span class="string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">								<span class="comment">// 标记bean创建中</span></span><br><span class="line">                <span class="built_in">this</span>.beforeSingletonCreation(beanName);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newSingleton</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">recordSuppressedExceptions</span> <span class="operator">=</span> <span class="built_in">this</span>.suppressedExceptions == <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.suppressedExceptions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    newSingleton = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalStateException var16) &#123;</span><br><span class="line">                    singletonObject = <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> var16;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BeanCreationException var17) &#123;</span><br><span class="line">                    <span class="type">BeanCreationException</span> <span class="variable">ex</span> <span class="operator">=</span> var17;</span><br><span class="line">                    <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                        <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="built_in">this</span>.suppressedExceptions.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            <span class="type">Exception</span> <span class="variable">suppressedException</span> <span class="operator">=</span> (Exception)var8.next();</span><br><span class="line">                            ex.addRelatedCause(suppressedException);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.suppressedExceptions = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.afterSingletonCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.addSingleton(beanName, singletonObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> singletonObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>三级缓存里lambda表达式的工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">getEarlyBeanReference</span><span class="params">(String beanName, RootBeanDefinition mbd, Object bean)</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">  		<span class="comment">//会判断是否需要提前AOP 如果是则返回代理对象，否则直接返回普通对象</span></span><br><span class="line">      <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">          <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">              <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var5.next();</span><br><span class="line">              <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> SmartInstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                  <span class="type">SmartInstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (SmartInstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                  exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> exposedObject;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/a5d86a59.html">http://ulemony.github.io/posts/a5d86a59.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+redis实现缓存</title>
    <url>/posts/af5af1e3.html</url>
    <content><![CDATA[<h2 id="Springbooot整合redis实现缓存"><a href="#Springbooot整合redis实现缓存" class="headerlink" title="Springbooot整合redis实现缓存"></a>Springbooot整合redis实现缓存</h2><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--spring boot 集成redis所需common-pool2--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-pool2 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-pool2.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    port: <span class="number">6379</span></span><br><span class="line">    host: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line"></span><br><span class="line">  cache:</span><br><span class="line">    type: redis</span><br></pre></td></tr></table></figure>

<h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *设置<span class="doctag">@Cacheable</span> 序列化方式以及缓过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheConfiguration <span class="title function_">redisCacheConfiguration</span><span class="params">()</span>&#123;</span><br><span class="line">        FastJsonRedisSerializer&lt;Object&gt; fastJsonRedisSerializer=<span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        RedisCacheConfiguration cacheConfiguration=RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line">        cacheConfiguration=cacheConfiguration.serializeValuesWith(RedisSerializationContext.</span><br><span class="line">                SerializationPair.fromSerializer(fastJsonRedisSerializer)).entryTtl(Duration.ofHours(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> cacheConfiguration;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object,Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object,Object&gt; template=<span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//序列化</span></span><br><span class="line">        FastJsonRedisSerializer&lt;Object&gt; fastJsonRedisSerializer= <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="comment">//value值采用fastJsonRedisSerializer</span></span><br><span class="line">        template.setValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(fastJsonRedisSerializer);</span><br><span class="line">        <span class="comment">//指定序列化白名单</span></span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;com.example.springbootdemo.pojo&quot;</span>);</span><br><span class="line">        <span class="comment">//key值采用StringSerializer</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *自定义缓存key生成策略</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;selfkeyGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator <span class="title function_">keyGenerator</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (target,method,params) -&gt; &#123;</span><br><span class="line">           StringBuilder builder=<span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">           builder.append(method.getName());</span><br><span class="line">           builder.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">           <span class="keyword">for</span>(Object obj: params)&#123;</span><br><span class="line">               builder.append(JSON.toJSONString(obj).hashCode());</span><br><span class="line">               builder.append(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           String string=builder.toString();</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 做SHA256 Hash计算，得到一个SHA256摘要作为Key</span></span><br><span class="line">           <span class="keyword">return</span> DigestUtils.sha256(string);</span><br><span class="line">       &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> CacheErrorHandler <span class="title function_">errorHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 异常处理，当Redis发生异常时，打印日志，但是程序正常走</span></span><br><span class="line">        log.info(<span class="string">&quot;初始化 -&gt; [&#123;&#125;]&quot;</span>, <span class="string">&quot;Redis CacheErrorHandler&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CacheErrorHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheGetError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Redis occur handleCacheGetError：key -&gt; [&#123;&#125;]&quot;</span>, key, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCachePutError</span><span class="params">(RuntimeException e, Cache cache, Object key, Object value)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Redis occur handleCachePutError：key -&gt; [&#123;&#125;]；value -&gt; [&#123;&#125;]&quot;</span>, key, value, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheEvictError</span><span class="params">(RuntimeException e, Cache cache, Object key)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Redis occur handleCacheEvictError：key -&gt; [&#123;&#125;]&quot;</span>, key, e);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleCacheClearError</span><span class="params">(RuntimeException e, Cache cache)</span> &#123;</span><br><span class="line">                log.error(<span class="string">&quot;Redis occur handleCacheClearError：&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FastJsonRedisSerializer</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Class&lt;T&gt; clazz;</span><br><span class="line">    FastJsonRedisSerializer(Class&lt;T&gt; clazz)&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.clazz=clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span>(t == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span>(bytes == <span class="literal">null</span> || bytes.length == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String str=<span class="keyword">new</span> <span class="title class_">String</span>(bytes,StandardCharsets.UTF_8);</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(str,clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StringRedisSerializer</span> <span class="keyword">implements</span> <span class="title class_">RedisSerializer</span>&lt;Object&gt;&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Charset charset;</span><br><span class="line">    StringRedisSerializer()&#123;</span><br><span class="line">        <span class="built_in">this</span>(StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">StringRedisSerializer</span><span class="params">(Charset charset)</span>&#123;</span><br><span class="line">        Assert.notNull(charset,<span class="string">&quot;Charset must not be null!&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.charset=charset;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">byte</span>[] serialize(Object o) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        String string=JSON.toJSONString(o);</span><br><span class="line">        <span class="keyword">if</span>(!StringUtils.hasLength(string))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉字符串中的双引号</span></span><br><span class="line">        string=string.replace(<span class="string">&quot;\&quot;&quot;</span>,<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> string.getBytes(charset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">return</span> (bytes == <span class="literal">null</span> ? <span class="literal">null</span> : <span class="keyword">new</span> <span class="title class_">String</span>(bytes,charset));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//    @Cacheable(value = &quot;user&quot;,key = &quot;&#x27;id:&#x27;+ #p0&quot;)</span></span><br><span class="line">    <span class="meta">@Cacheable(value = &quot;user&quot;,keyGenerator = &quot;selfkeyGenerator&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findUserById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        User user=userMapper.selectById(id);</span><br><span class="line">        <span class="keyword">if</span>(user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EntityNotFoundException</span>(User.class,<span class="string">&quot;id&quot;</span>,id.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/af5af1e3.html">http://ulemony.github.io/posts/af5af1e3.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>缓存</tag>
      </tags>
  </entry>
  <entry>
    <title>chatgpt聊天机器人部署</title>
    <url>/posts/9fa1f056.html</url>
    <content><![CDATA[<h1 id="window环境下的部署"><a href="#window环境下的部署" class="headerlink" title="window环境下的部署"></a>window环境下的部署</h1><h2 id="后端项目部署"><a href="#后端项目部署" class="headerlink" title="后端项目部署"></a>后端项目部署</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1-jdk1-8安装"><a href="#1-1-jdk1-8安装" class="headerlink" title="1.1 jdk1.8安装"></a>1.1 jdk1.8安装</h4><p>安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/m0_70098804/article/details/131062308?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169028921016800225560646%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=169028921016800225560646&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-131062308-null-null.142^v91^insertT0,239^v3^control&amp;utm_term=jdk1.8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.oracle.com/cn/java/technologies/downloads/#java8-windows</span><br></pre></td></tr></table></figure>

<h4 id="1-2-maven3-9-3安装"><a href="#1-2-maven3-9-3安装" class="headerlink" title="1.2 maven3.9.3安装"></a>1.2 maven3.9.3安装</h4><p>安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_44080187/article/details/122933194?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169029399616800226565364%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169029399616800226565364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-122933194-null-null.142^v91^insertT0,239^v3^control&amp;utm_term=window%E5%AE%89%E8%A3%85maven&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://maven.apache.org/download.cgi</span><br></pre></td></tr></table></figure>

<h4 id="1-3-微软语音服务获取"><a href="#1-3-微软语音服务获取" class="headerlink" title="1.3 微软语音服务获取"></a>1.3 微软语音服务获取</h4><p>a. Azure 订阅 - 免费创建订阅</p>
<p><img src="/posts/9fa1f056/%E5%BE%AE%E8%BD%AFAzure%E6%9C%8D%E5%8A%A1.png" alt="微软Azure服务"></p>
<p>b. 在 Azure 门户中创建语音资源</p>
<p><img src="/posts/9fa1f056/%E5%88%9B%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%B5%84%E6%BA%90.png" alt="创建语音资源"></p>
<p>c. 获取语音资源密钥和区域。 部署语音资源后，选择“转到资源”以查看和管理密钥。</p>
<p><img src="/posts/9fa1f056/%E8%8E%B7%E5%8F%96%E8%AF%AD%E9%9F%B3%E8%B5%84%E6%BA%90.png" alt="获取语音资源"></p>
<h3 id="2-后端项目启动"><a href="#2-后端项目启动" class="headerlink" title="2.后端项目启动"></a>2.后端项目启动</h3><h4 id="2-1-配置文件application-yaml修改"><a href="#2-1-配置文件application-yaml修改" class="headerlink" title="2.1 配置文件application.yaml修改"></a>2.1 配置文件application.yaml修改</h4><p>修改工具：软件idea或者HBuilderX</p>
<p>a.将openai的apiKey替换会你自己的apiKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">openai:</span><br><span class="line">  apiKey: xxxx</span><br></pre></td></tr></table></figure>

<p>b.将步骤1.3得到的语音密钥和区域设置成自己的密钥和区域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">azure:</span><br><span class="line">#语音服务密钥</span><br><span class="line">  SPEECH_KEY: xxxx</span><br><span class="line">#语音服务地区</span><br><span class="line">  SERVICE_REGION: eastus</span><br></pre></td></tr></table></figure>

<p>c.在配置文件application.yaml中替换代理端口和地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#代理地址和端口</span><br><span class="line">proxy:</span><br><span class="line">  host: localhost</span><br><span class="line">  port: <span class="number">7890</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改语音文件保存路径"><a href="#2-2-修改语音文件保存路径" class="headerlink" title="2.2 修改语音文件保存路径"></a>2.2 修改语音文件保存路径</h4><p>a. 修改AudioUtil.java 文件</p>
<p>在本地电脑自定义新建文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文件夹<span class="number">1</span></span><br><span class="line">C:\audio\input</span><br><span class="line">文件夹<span class="number">2</span></span><br><span class="line">C:\audio\output</span><br></pre></td></tr></table></figure>

<p>将下图的两个语音路径替换成上面自定义的路径，注意路径需使用符号&#x2F;</p>
<p>即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造原始音频文件保存目录 保存至电脑本地</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lee/Desktop/audio/input&quot;</span>;</span><br><span class="line"> 修改为</span><br><span class="line"> <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:/audio/input&quot;</span>;</span><br><span class="line"><span class="comment">//构建格式化后音频文件保存目录</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lee/Desktop/audio/output&quot;</span>;</span><br><span class="line"> 修改为</span><br><span class="line"> <span class="type">String</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:/audio/output&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9fa1f056/%E8%AF%AD%E9%9F%B3%E8%B7%AF%E5%BE%841.png" alt="语音路径1"></p>
<p>b.修改TextToSpeechImpl.java文件</p>
<p>将下图的路径替换成自定义路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//生成语音文件保存到本地</span><br><span class="line"> String outputFilePath=&quot;/Users/lee/Desktop/audio/output&quot;;</span><br><span class="line"> 修改为</span><br><span class="line"> String outputFilePath=&quot;C:/audio/output&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9fa1f056/%E8%AF%AD%E9%9F%B3%E8%B7%AF%E5%BE%842.png" alt="语音路径2"></p>
<h4 id="2-3启动后端项目"><a href="#2-3启动后端项目" class="headerlink" title="2.3启动后端项目"></a>2.3启动后端项目</h4><p>a.在命令窗口中cd进入项目根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt-master-master</span><br></pre></td></tr></table></figure>

<p>b. 输入命令打包项目,初次打包会耗时较长时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<p>c. 成功打包项目后会在项目中看到一个target目录，cd进入该目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt-master-master\target</span><br></pre></td></tr></table></figure>

<p>d. 运行项目</p>
<p>电脑需要开启全局代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xms64m -Xmx128m -jar miniLegionInit.jar </span><br></pre></td></tr></table></figure>

<h2 id="前端项目部署"><a href="#前端项目部署" class="headerlink" title="前端项目部署"></a>前端项目部署</h2><h3 id="1-环境准备-1"><a href="#1-环境准备-1" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1-node环境安装"><a href="#1-1-node环境安装" class="headerlink" title="1.1 node环境安装"></a>1.1 node环境安装</h4><p>具体安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/mengchuan6666/article/details/125893199?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=window%E5%AE%89%E8%A3%85vue4.5&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125893199.142^v91^insertT0,239^v3^control&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>node.js安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://nodejs.org/dist/v14.17.0/</span><br></pre></td></tr></table></figure>

<p>我安装的版本是 node-v14.17.0-x64.msi</p>
<p>安装成功后查看版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h4 id="1-2-NPM安装vue-js"><a href="#1-2-NPM安装vue-js" class="headerlink" title="1.2 NPM安装vue.js"></a>1.2 NPM安装vue.js</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue -g</span><br></pre></td></tr></table></figure>

<h4 id="1-3-全局安装vue-cli"><a href="#1-3-全局安装vue-cli" class="headerlink" title="1.3 全局安装vue-cli"></a>1.3 全局安装vue-cli</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli </span><br></pre></td></tr></table></figure>

<h3 id="2-前端项目启动"><a href="#2-前端项目启动" class="headerlink" title="2.前端项目启动"></a>2.前端项目启动</h3><h4 id="2-1-修改ChatBox-vue文件"><a href="#2-1-修改ChatBox-vue文件" class="headerlink" title="2.1 修改ChatBox.vue文件"></a>2.1 修改ChatBox.vue文件</h4><p>将ip地址192.168.100.204替换成自己电脑的ip地址</p>
<p><img src="/posts/9fa1f056/websocket%E5%9C%B0%E5%9D%80.png" alt="websocket地址"></p>
<h4 id="2-2-启动前端项目"><a href="#2-2-启动前端项目" class="headerlink" title="2.2 启动前端项目"></a>2.2 启动前端项目</h4><p>a. 以管理员身份运行命令窗口，cd进入项目根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt_vue-master</span><br></pre></td></tr></table></figure>

<p>b. 启动项目，注意先启动后端项目再启动前端项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>c. 启动成功后可以看到以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DONE  Compiled successfully in 15920ms                                                             上午8:54:02</span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8081/</span><br><span class="line"> - Network: http://192.168.8.209:8081/</span><br></pre></td></tr></table></figure>

<p>d.浏览器访问地址即可打开网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081/</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/9fa1f056.html">http://ulemony.github.io/posts/9fa1f056.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis plus分页</title>
    <url>/posts/4c979fe7.html</url>
    <content><![CDATA[<h2 id="springboot使用mybatis-plus分页"><a href="#springboot使用mybatis-plus分页" class="headerlink" title="springboot使用mybatis plus分页"></a>springboot使用mybatis plus分页</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.5</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span>&#123;</span><br><span class="line">        MybatisPlusInterceptor interceptor=<span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>());</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><p>参数current：当前页面；size：每页大小</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;PageUtils&lt;User&gt;&gt; <span class="title function_">queryUserByPage</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">int</span> current,<span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span>&#123;</span><br><span class="line">    IPage&lt;User&gt; page=userService.queryUserBypage(current,size);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;( <span class="keyword">new</span> <span class="title class_">PageUtils</span>&lt;&gt;(page), HttpStatus.OK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="service层实现"><a href="#service层实现" class="headerlink" title="service层实现"></a>service层实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper,User&gt;  <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">queryUserBypage</span><span class="params">(<span class="type">int</span> current, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        Page&lt;User&gt; page=<span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current,size);</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByPage(page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    IPage&lt;User&gt; <span class="title function_">queryUserByPage</span><span class="params">(Page&lt;User&gt; page)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="xml"><a href="#xml" class="headerlink" title="xml"></a>xml</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">        PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.springbootdemo.mapper.UserMapper&quot;</span>&gt;</span><br><span class="line">    &lt;!--    <span class="keyword">public</span> Account <span class="title function_">getAcct</span><span class="params">(Long id)</span>; --&gt;</span><br><span class="line">&lt;!--    通用查询--&gt;</span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;BaseResultMap&quot;</span> type=<span class="string">&quot;com.example.springbootdemo.pojo.User&quot;</span>&gt;</span><br><span class="line">        &lt;id column=<span class="string">&quot;user_id&quot;</span> property=<span class="string">&quot;id&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;username&quot;</span> property=<span class="string">&quot;username&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;gender&quot;</span> property=<span class="string">&quot;gender&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;phone&quot;</span> property=<span class="string">&quot;phone&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;email&quot;</span> property=<span class="string">&quot;email&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;password&quot;</span> property=<span class="string">&quot;password&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;avatar_name&quot;</span> property=<span class="string">&quot;avatarName&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;avatar_path&quot;</span> property=<span class="string">&quot;avatarPath&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;is_admin&quot;</span> property=<span class="string">&quot;isAdmin&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;enabled&quot;</span> property=<span class="string">&quot;enabled&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;create_time&quot;</span> property=<span class="string">&quot;createTime&quot;</span>/&gt;</span><br><span class="line">        &lt;result column=<span class="string">&quot;update_time&quot;</span> property=<span class="string">&quot;updateTime&quot;</span>/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;sql id=<span class="string">&quot;Base_Column_List&quot;</span>&gt;</span><br><span class="line">  u.username as username,u.password as password,</span><br><span class="line">           u.email as email, u.phone as phone,u.is_admin as is_admin,</span><br><span class="line">           u.gender as gender, u.avatar_name as avatar_name, u.avatar_path as avatar_path,</span><br><span class="line">           u.enabled as enabled,  u.create_time as create_time, u.update_time as update_time</span><br><span class="line">    &lt;/sql&gt;</span><br><span class="line">&lt;!--    分页查询--&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;queryUserByPage&quot;</span> resultMap=<span class="string">&quot;BaseResultMap&quot;</span>&gt;</span><br><span class="line">        select</span><br><span class="line">        u.user_id as user_id,</span><br><span class="line">        &lt;include refid=<span class="string">&quot;Base_Column_List&quot;</span>&gt;&lt;/include&gt;</span><br><span class="line">        from sys_user u</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h3 id="分页工具类"><a href="#分页工具类" class="headerlink" title="分页工具类"></a>分页工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageUtils</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">//上一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> prev;</span><br><span class="line">    <span class="comment">//下一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> next;</span><br><span class="line">    <span class="comment">//首页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">first</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> currentPage;</span><br><span class="line">    <span class="comment">//尾页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> last;</span><br><span class="line">    <span class="comment">//总页数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> totalPage;</span><br><span class="line">    <span class="comment">//每页大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line">    <span class="comment">//数据</span></span><br><span class="line">    List&lt;T&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//开始序列号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startNum;</span><br><span class="line">    <span class="comment">//总条数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> total;</span><br><span class="line">    <span class="comment">//显示总页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否为第一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isFirstPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 是否为最后一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">isLastPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 是否有前一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">hasPreviousPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 是否有下一页</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">hasNextPage</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 所有导航页号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] navigatePageNumbers;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(<span class="type">int</span> pageSize, <span class="type">int</span> currentPage, <span class="type">int</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">        <span class="built_in">this</span>.totalPage=<span class="built_in">this</span>.last= (<span class="type">int</span>) Math.ceil((<span class="type">double</span>) total/pageSize);</span><br><span class="line">        <span class="built_in">this</span>.prev=Math.max(<span class="built_in">this</span>.currentPage-<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.next=Math.min(<span class="built_in">this</span>.currentPage+<span class="number">1</span>,totalPage);</span><br><span class="line">        <span class="built_in">this</span>.startNum=(<span class="built_in">this</span>.currentPage-<span class="number">1</span>)*pageSize;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本参数设定之后进行导航页面的计算</span></span><br><span class="line">        calcNavigatePageNumbers();</span><br><span class="line">        <span class="comment">//以及页面边界的判定</span></span><br><span class="line">        judgePageBoudary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">calcNavigatePageNumbers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(totalPage&lt;=count)&#123;</span><br><span class="line">            navigatePageNumbers=<span class="keyword">new</span> <span class="title class_">int</span>[totalPage];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;totalPage;i++)&#123;</span><br><span class="line">                navigatePageNumbers[i]=i+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          navigatePageNumbers=<span class="keyword">new</span> <span class="title class_">int</span>[count];</span><br><span class="line">          <span class="type">int</span> start=currentPage-count/<span class="number">2</span>;</span><br><span class="line">          <span class="type">int</span> end=currentPage+count/<span class="number">2</span>;</span><br><span class="line">          <span class="keyword">if</span>(start&lt;<span class="number">1</span>)&#123;</span><br><span class="line">              start=<span class="number">1</span>;</span><br><span class="line">              <span class="comment">//最前count页</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">                  navigatePageNumbers[i]=start++;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span> <span class="keyword">if</span>(end&gt;totalPage)&#123;</span><br><span class="line">              <span class="comment">//最后count页</span></span><br><span class="line">              end=totalPage;</span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> i=count-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">                  navigatePageNumbers[i]=end--;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="comment">//中间页</span></span><br><span class="line">              <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">                  navigatePageNumbers[i]=start++;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageUtils</span><span class="params">(IPage&lt;T&gt; page)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = (<span class="type">int</span>) page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = (<span class="type">int</span>) page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.total = (<span class="type">int</span>) page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.totalPage=<span class="built_in">this</span>.last= (<span class="type">int</span>) page.getPages();</span><br><span class="line">        <span class="built_in">this</span>.prev=Math.max((<span class="type">int</span>) page.getCurrent()-<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">this</span>.next=Math.min((<span class="type">int</span>) page.getCurrent()+<span class="number">1</span>,(<span class="type">int</span>) page.getPages());</span><br><span class="line">        <span class="built_in">this</span>.startNum=((<span class="type">int</span>) page.getCurrent()-<span class="number">1</span>)*(<span class="type">int</span>) page.getSize();</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.list=page.getRecords();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//基本参数设定之后进行导航页面的计算</span></span><br><span class="line">        calcNavigatePageNumbers();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//以及页面边界的判定</span></span><br><span class="line">        judgePageBoudary();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">judgePageBoudary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isFirstPage= currentPage == <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.isLastPage= currentPage == totalPage &amp;&amp; currentPage != <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.hasPreviousPage= currentPage != <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">this</span>.hasNextPage= currentPage != totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPrev</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrev</span><span class="params">(<span class="type">int</span> prev)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNext</span><span class="params">(<span class="type">int</span> next)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(<span class="type">int</span> currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getLast</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLast</span><span class="params">(<span class="type">int</span> last)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.last = last;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotalPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalPage</span><span class="params">(<span class="type">int</span> totalPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalPage = totalPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setList</span><span class="params">(List&lt;T&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartNum</span><span class="params">(<span class="type">int</span> startNum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startNum = startNum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getTotal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotal</span><span class="params">(<span class="type">int</span> total)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.total = total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getFirst</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirst</span><span class="params">(<span class="type">int</span> first)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.first = first;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFirstPage</span><span class="params">(<span class="type">boolean</span> firstPage)</span> &#123;</span><br><span class="line">        isFirstPage = firstPage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFirstPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isFirstPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isLastPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isLastPage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLastPage</span><span class="params">(<span class="type">boolean</span> lastPage)</span> &#123;</span><br><span class="line">        isLastPage = lastPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasPreviousPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasPreviousPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasPreviousPage</span><span class="params">(<span class="type">boolean</span> hasPreviousPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasPreviousPage = hasPreviousPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isHasNextPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hasNextPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHasNextPage</span><span class="params">(<span class="type">boolean</span> hasNextPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hasNextPage = hasNextPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] getNavigatePageNumbers() &#123;</span><br><span class="line">        <span class="keyword">return</span> navigatePageNumbers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> JSONUtil.toJsonStr(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="前端html页面"><a href="#前端html页面" class="headerlink" title="前端html页面"></a>前端html页面</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 必须的 meta 标签 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/bootstrap.min.css&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>用户展示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&quot;table table-hover table-bordered table-striped text-center&quot;</span>  <span class="attr">style</span>=<span class="string">&quot;width: 70%;margin: auto;margin-top: 30px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>id<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span>手机<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span> <span class="attr">th:each</span>=<span class="string">&quot;user:$&#123;pageUtils.list&#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.id&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.email&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;user.phone&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--显示分页信息部分代码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn-group mr-2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination pull-right no-margin&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>  <span class="attr">class</span>=<span class="string">&quot; bg-light text-dark&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;pageUtils.hasPreviousPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;&#x27;/listUser?current=1&amp;size=&#x27;+$&#123;pageUtils.pageSize&#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;prev  bg-light text-dark&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;pageUtils.hasPreviousPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;&#x27;/listUser?current=&#x27;+$&#123;pageUtils.prev&#125;+&#x27;&amp;size=&#x27;+$&#123;pageUtils.pageSize&#125;&quot;</span>&gt;</span></span><br><span class="line">                    &lt;&lt; <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">th:each</span>=<span class="string">&quot;nav : $&#123;pageUtils.navigatePageNumbers&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot; bg-light text-dark&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;&#x27;/listUser?current=&#x27;+$&#123;nav&#125;+&#x27;&amp;size=&#x27;+$&#123;pageUtils.pageSize&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">th:if</span>=<span class="string">&quot;$&#123;nav != pageUtils.currentPage&#125;&quot;</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nav&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;font-weight: bold;&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;nav == pageUtils.currentPage&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">th:text</span>=<span class="string">&quot;$&#123;nav&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;next bg-light text-dark&quot;</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;pageUtils.hasNextPage&#125;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;&#x27;/listUser?current=&#x27;+$&#123;pageUtils.next&#125;+&#x27;&amp;size=&#x27;+$&#123;pageUtils.pageSize&#125;&quot;</span>&gt;</span></span><br><span class="line">                    &gt;&gt;</span><br><span class="line">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;bg-light text-dark&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;&#x27;/listUser?current=&#x27;+$&#123;pageUtils.last&#125;+&#x27;&amp;size=&#x27;+$&#123;pageUtils.pageSize&#125;&quot;</span>&gt;</span>尾页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>当前页数: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>[[$&#123;pageUtils.currentPage&#125;]]<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>  页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>总页数: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>[[$&#123;pageUtils.totalPage&#125;]]<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 页<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>总数据: <span class="tag">&lt;<span class="name">strong</span>&gt;</span>[[$&#123;pageUtils.total&#125;]]<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> 条<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 如果要使用Bootstrap的js插件 必须要先调入jQUery --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- bootstrap的js 插件 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/4c979fe7.html">http://ulemony.github.io/posts/4c979fe7.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>分页</tag>
      </tags>
  </entry>
  <entry>
    <title>springsecurity之@PreAuthorize讲解</title>
    <url>/posts/9d7a9baf.html</url>
    <content><![CDATA[<h2 id="PreAuthorize注解使用讲解"><a href="#PreAuthorize注解使用讲解" class="headerlink" title="@PreAuthorize注解使用讲解"></a>@PreAuthorize注解使用讲解</h2><p>@PreAuthorize 可以在方法前进行权限验证，如果没有对应权限则无法执行方法，下面是使用案例</p>
<h4 id="a-在对应方法使用-PreAuthorize注解，值为EL表达式"><a href="#a-在对应方法使用-PreAuthorize注解，值为EL表达式" class="headerlink" title="a.在对应方法使用@PreAuthorize注解，值为EL表达式"></a>a.在对应方法使用@PreAuthorize注解，值为EL表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;导出用户数据&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/download&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@el.check(&#x27;user:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportUser</span><span class="params">(HttpServletResponse response, UserQueryCriteria criteria)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    userService.download(userService.queryAll(criteria), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-在SpringSecurityConfig上使用注解-EnableGlobalMethodSecurity"><a href="#b-在SpringSecurityConfig上使用注解-EnableGlobalMethodSecurity" class="headerlink" title="b.在SpringSecurityConfig上使用注解@EnableGlobalMethodSecurity"></a>b.在SpringSecurityConfig上使用注解@EnableGlobalMethodSecurity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//开启prePostEnabled和securedEnabled</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br></pre></td></tr></table></figure>

<h4 id="c-对el表达式进行处理"><a href="#c-对el表达式进行处理" class="headerlink" title="c.对el表达式进行处理"></a>c.对el表达式进行处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;el&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">check</span><span class="params">(String ...permissions)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前用户的所有权限</span></span><br><span class="line">        List&lt;String&gt; elPermissions = SecurityUtils.getCurrentUser().getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 判断当前用户为admin或者含有对应权限则验证通过</span></span><br><span class="line">        <span class="keyword">return</span> elPermissions.contains(<span class="string">&quot;admin&quot;</span>) || Arrays.stream(permissions).anyMatch(elPermissions::contains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PreAuthorize源码讲解"><a href="#PreAuthorize源码讲解" class="headerlink" title="@PreAuthorize源码讲解"></a>@PreAuthorize源码讲解</h2><p>首先看该注解的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该注解并不能直接进行权限验证，那它是怎么生效的呢？主要靠注解@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true, securedEnabled &#x3D; true)，它通过Import导入了GlobalMethodSecuritySelector.class，而在这个类中注册了GlobalMethodSecurityConfiguration.class</p>
<h4 id="GlobalMethodSecuritySelector-class关键源码"><a href="#GlobalMethodSecuritySelector-class关键源码" class="headerlink" title="GlobalMethodSecuritySelector.class关键源码"></a>GlobalMethodSecuritySelector.class关键源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">GlobalMethodSecuritySelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    GlobalMethodSecuritySelector() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        Class&lt;EnableGlobalMethodSecurity&gt; annoType = EnableGlobalMethodSecurity.class;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(annoType.getName(), <span class="literal">false</span>);</span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(annotationAttributes);</span><br><span class="line">        Assert.notNull(attributes, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;@%s is not present on importing class &#x27;%s&#x27; as expected&quot;</span>, annoType.getSimpleName(), importingClassMetadata.getClassName());</span><br><span class="line">        &#125;);</span><br><span class="line">        Class&lt;?&gt; importingClass = ClassUtils.resolveClassName(importingClassMetadata.getClassName(), ClassUtils.getDefaultClassLoader());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">skipMethodSecurityConfiguration</span> <span class="operator">=</span> GlobalMethodSecurityConfiguration.class.isAssignableFrom(importingClass);</span><br><span class="line">        <span class="type">AdviceMode</span> <span class="variable">mode</span> <span class="operator">=</span> (AdviceMode)attributes.getEnum(<span class="string">&quot;mode&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isProxy</span> <span class="operator">=</span> AdviceMode.PROXY == mode;</span><br><span class="line">        <span class="type">String</span> <span class="variable">autoProxyClassName</span> <span class="operator">=</span> isProxy ? AutoProxyRegistrar.class.getName() : GlobalMethodSecurityAspectJAutoProxyRegistrar.class.getName();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">jsr250Enabled</span> <span class="operator">=</span> attributes.getBoolean(<span class="string">&quot;jsr250Enabled&quot;</span>);</span><br><span class="line">        List&lt;String&gt; classNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (isProxy) &#123;</span><br><span class="line">            classNames.add(MethodSecurityMetadataSourceAdvisorRegistrar.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        classNames.add(autoProxyClassName);</span><br><span class="line">        <span class="keyword">if</span> (!skipMethodSecurityConfiguration) &#123;</span><br><span class="line">          <span class="comment">//注册了GlobalMethodSecurityConfiguration.class</span></span><br><span class="line">            classNames.add(GlobalMethodSecurityConfiguration.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsr250Enabled) &#123;</span><br><span class="line">            classNames.add(Jsr250MetadataSourceConfiguration.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (String[])classNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GlobalMethodSecurityConfiguration-class关键源码"><a href="#GlobalMethodSecurityConfiguration-class关键源码" class="headerlink" title="GlobalMethodSecurityConfiguration.class关键源码"></a>GlobalMethodSecurityConfiguration.class关键源码</h4><p>这个类非常关键，负责生成权限验证所需要的拦截器、权限管理器、EL表达式处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GlobalMethodSecurityConfiguration.class</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MethodInterceptor <span class="title function_">methodSecurityInterceptor</span><span class="params">(MethodSecurityMetadataSource methodSecurityMetadataSource)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor = (MethodSecurityInterceptor)(<span class="built_in">this</span>.isAspectJ() ? <span class="keyword">new</span> <span class="title class_">AspectJMethodSecurityInterceptor</span>() : <span class="keyword">new</span> <span class="title class_">MethodSecurityInterceptor</span>());</span><br><span class="line">  <span class="comment">//设置访问决策管理器 </span></span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setAccessDecisionManager(<span class="built_in">this</span>.accessDecisionManager());</span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setAfterInvocationManager(<span class="built_in">this</span>.afterInvocationManager());</span><br><span class="line">  <span class="comment">//设置安全元数据源 用于获取方法级别的安全性配置信息</span></span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setSecurityMetadataSource(methodSecurityMetadataSource);</span><br><span class="line">    <span class="type">RunAsManager</span> <span class="variable">runAsManager</span> <span class="operator">=</span> <span class="built_in">this</span>.runAsManager();</span><br><span class="line">    <span class="keyword">if</span> (runAsManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodSecurityInterceptor.setRunAsManager(runAsManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.methodSecurityInterceptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这段代码的作用是根据配置创建一个 AccessDecisionManager 实例，并配置其中的访问决策投票者。这些投票者负责根据不同的投票逻辑，决定用户是否有权限执行某个方法</span></span><br><span class="line">   <span class="keyword">protected</span> AccessDecisionManager <span class="title function_">accessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//@EnableGlobalMethodSecurity注解需要开启prePostEnabled = true,如果启用了 Pre-Post 注解（@PreAuthorize 和 @PostAuthorize），则创建并添加一个基于表达式的 Pre-Invocation 投票者</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.prePostEnabled()) &#123;</span><br><span class="line">            <span class="type">ExpressionBasedPreInvocationAdvice</span> <span class="variable">expressionAdvice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionBasedPreInvocationAdvice</span>();</span><br><span class="line">          <span class="comment">//获取El表达式处理器</span></span><br><span class="line">            expressionAdvice.setExpressionHandler(<span class="built_in">this</span>.getExpressionHandler());</span><br><span class="line">            decisionVoters.add(<span class="keyword">new</span> <span class="title class_">PreInvocationAuthorizationAdviceVoter</span>(expressionAdvice));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.jsr250Enabled()) &#123;</span><br><span class="line">            decisionVoters.add(<span class="keyword">new</span> <span class="title class_">Jsr250Voter</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RoleVoter</span> <span class="variable">roleVoter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleVoter</span>();</span><br><span class="line">        <span class="type">GrantedAuthorityDefaults</span> <span class="variable">grantedAuthorityDefaults</span> <span class="operator">=</span> (GrantedAuthorityDefaults)<span class="built_in">this</span>.getSingleBeanOrNull(GrantedAuthorityDefaults.class);</span><br><span class="line">        <span class="keyword">if</span> (grantedAuthorityDefaults != <span class="literal">null</span>) &#123;</span><br><span class="line">            roleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        decisionVoters.add(roleVoter);</span><br><span class="line">        decisionVoters.add(<span class="keyword">new</span> <span class="title class_">AuthenticatedVoter</span>());</span><br><span class="line">     <span class="comment">//这些投票者被组合到 AffirmativeBased 决策管理器中。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AffirmativeBased</span>(decisionVoters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="权限生效源码分析"><a href="#权限生效源码分析" class="headerlink" title="权限生效源码分析"></a>权限生效源码分析</h2><p>上面介绍了和权限相关的核心类，下面分析权限验证是怎么生效的</p>
<h4 id="a-获取安全元数据信息"><a href="#a-获取安全元数据信息" class="headerlink" title="a. 获取安全元数据信息"></a>a. 获取安全元数据信息</h4><p>首先执行MethodSecurityInterceptor 父类AbstractSecurityInterceptor的beforeInvocation方法获取安全元数据信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractSecurityInterceptor.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Collection</span>&lt;ConfigAttribute&gt; attributes = <span class="built_in">this</span>.obtainSecurityMetadataSource().getAttributes(object);</span><br></pre></td></tr></table></figure>

<p>由PrePostAnnotationSecurityMetadataSource 类进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrePostAnnotationSecurityMetadataSource.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">PreFilter</span> <span class="variable">preFilter</span> <span class="operator">=</span> (PreFilter)<span class="built_in">this</span>.findAnnotation(method, targetClass, PreFilter.class);</span><br><span class="line">      <span class="comment">//处理注解@PreAuthorize</span></span><br><span class="line">        <span class="type">PreAuthorize</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> (PreAuthorize)<span class="built_in">this</span>.findAnnotation(method, targetClass, PreAuthorize.class);</span><br><span class="line">        <span class="type">PostFilter</span> <span class="variable">postFilter</span> <span class="operator">=</span> (PostFilter)<span class="built_in">this</span>.findAnnotation(method, targetClass, PostFilter.class);</span><br><span class="line">        <span class="type">PostAuthorize</span> <span class="variable">postAuthorize</span> <span class="operator">=</span> (PostAuthorize)<span class="built_in">this</span>.findAnnotation(method, targetClass, PostAuthorize.class);</span><br><span class="line">      <span class="comment">//.....省略代码</span></span><br><span class="line">      <span class="comment">//返回元数据 格式如下[authorize: &#x27;@el.check()&#x27;, filter: &#x27;null&#x27;, filterTarget: &#x27;null&#x27;]</span></span><br><span class="line">            <span class="keyword">return</span> attrs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-进行权限验证"><a href="#b-进行权限验证" class="headerlink" title="b.进行权限验证"></a>b.进行权限验证</h4><p>接着在beforeInvocation方法中调用attemptAuthorization方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractSecurityInterceptor.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">private</span> <span class="keyword">void</span> <span class="title function_">attemptAuthorization</span><span class="params">(Object object, Collection&lt;ConfigAttribute&gt; attributes, Authentication authenticated)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//利用AccessDecisionManager，也就是前面GlobalMethodSecurityConfiguration.class中配置的AffirmativeBased 决策管理器进行权限检验</span></span><br><span class="line">        <span class="built_in">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AccessDeniedException var5) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(LogMessage.format(<span class="string">&quot;Failed to authorize %s with attributes %s using %s&quot;</span>, object, attributes, <span class="built_in">this</span>.accessDecisionManager));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Failed to authorize %s with attributes %s&quot;</span>, object, attributes));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.publishEvent(<span class="keyword">new</span> <span class="title class_">AuthorizationFailureEvent</span>(object, attributes, authenticated, var5));</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="c-决策管理器验证"><a href="#c-决策管理器验证" class="headerlink" title="c.决策管理器验证"></a>c.决策管理器验证</h4><p>核心是voter执行vote方法进行投票</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AffirmativeBased</span> <span class="keyword">extends</span> <span class="title class_">AbstractAccessDecisionManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AffirmativeBased</span><span class="params">(List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(decisionVoters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getDecisionVoters().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">AccessDecisionVoter</span> <span class="variable">voter</span> <span class="operator">=</span> (AccessDecisionVoter)var5.next();</span><br><span class="line">          <span class="comment">//会利用PreInvocationAuthorizationAdviceVoter 进行投票</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> voter.vote(authentication, object, configAttributes);</span><br><span class="line">            <span class="keyword">switch</span>(result) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                ++deny;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractAccessDecisionManager.accessDenied&quot;</span>, <span class="string">&quot;Access is denied&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.checkAllowIfAllAbstainDecisions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="d-EL表达式处理"><a href="#d-EL表达式处理" class="headerlink" title="d.EL表达式处理"></a>d.EL表达式处理</h4><p>在PreInvocationAuthorizationAdviceVoter中执行vote方法，最终落实到自定义的el表达式处理逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreInvocationAuthorizationAdviceVoter.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> <span class="type">int</span> <span class="title function_">vote</span><span class="params">(Authentication authentication, MethodInvocation method, Collection&lt;ConfigAttribute&gt; attributes)</span> &#123;</span><br><span class="line">    <span class="type">PreInvocationAttribute</span> <span class="variable">preAttr</span> <span class="operator">=</span> <span class="built_in">this</span>.findPreInvocationAttribute(attributes);</span><br><span class="line">    <span class="keyword">if</span> (preAttr == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//调用before方法进入el表达式处理逻辑，如果返回true获得票数1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.preAdvice.before(authentication, method, preAttr) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionBasedPreInvocationAdvice.class</span><br><span class="line">  <span class="comment">//执行before方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Authentication authentication, MethodInvocation mi, PreInvocationAttribute attr)</span> &#123;</span><br><span class="line">    <span class="type">PreInvocationExpressionAttribute</span> <span class="variable">preAttr</span> <span class="operator">=</span> (PreInvocationExpressionAttribute)attr;</span><br><span class="line">    <span class="type">EvaluationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.expressionHandler.createEvaluationContext(authentication, mi);</span><br><span class="line">    <span class="type">Expression</span> <span class="variable">preFilter</span> <span class="operator">=</span> preAttr.getFilterExpression();</span><br><span class="line">    <span class="type">Expression</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> preAttr.getAuthorizeExpression();</span><br><span class="line">    <span class="keyword">if</span> (preFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">filterTarget</span> <span class="operator">=</span> <span class="built_in">this</span>.findFilterTarget(preAttr.getFilterTarget(), ctx, mi);</span><br><span class="line">        <span class="built_in">this</span>.expressionHandler.filter(filterTarget, preFilter, ctx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//进入自定义的el表达式处理逻辑，也就是上面AuthorityConfig 自定义的权限验证逻辑，如果有对应权限则返回true</span></span><br><span class="line">    <span class="keyword">return</span> preAuthorize != <span class="literal">null</span> ? ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx) : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="e-投票结果"><a href="#e-投票结果" class="headerlink" title="e.投票结果"></a>e.投票结果</h4><p>回到上面的决策管理器AffirmativeBased 当投票结果result&#x3D;1时 直接return表示权限验证通过，否则++deny表示权限验证不通过，抛出AccessDeniedException异常，至此完成权限验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AffirmativeBased.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"> <span class="title class_">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getDecisionVoters().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">AccessDecisionVoter</span> <span class="variable">voter</span> <span class="operator">=</span> (AccessDecisionVoter)var5.next();</span><br><span class="line">          <span class="comment">// 当el表达式返回true时获得票数1否则为-1</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> voter.vote(authentication, object, configAttributes);</span><br><span class="line">            <span class="keyword">switch</span>(result) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                ++deny;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//deny大于0 表示权限验证不通过，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractAccessDecisionManager.accessDenied&quot;</span>, <span class="string">&quot;Access is denied&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.checkAllowIfAllAbstainDecisions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/9d7a9baf.html">http://ulemony.github.io/posts/9d7a9baf.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理</title>
    <url>/posts/28877bf.html</url>
    <content><![CDATA[<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EntityExistedException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">EntityExistedException</span><span class="params">(Class clazz, String field, String val)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(EntityExistedException.generateMessage(clazz.getSimpleName(),field,val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">generateMessage</span><span class="params">(String entity, String field, String val)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> StringUtils.capitalize(entity)+<span class="string">&quot; with &quot;</span>+field+<span class="string">&quot; &quot;</span>+val+<span class="string">&quot; existed &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异常工具类"><a href="#异常工具类" class="headerlink" title="异常工具类"></a>异常工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThrowableUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getStacktrace</span><span class="params">(Throwable throwable)</span>&#123;</span><br><span class="line">        StringWriter sw=<span class="keyword">new</span> <span class="title class_">StringWriter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>(PrintWriter pw=<span class="keyword">new</span> <span class="title class_">PrintWriter</span>(sw))&#123;</span><br><span class="line">            throwable.printStackTrace(pw);</span><br><span class="line">            <span class="keyword">return</span> sw.toString();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="异常处理器"><a href="#异常处理器" class="headerlink" title="异常处理器"></a>异常处理器</h3><h4 id="ApiError"><a href="#ApiError" class="headerlink" title="ApiError"></a>ApiError</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiError</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer status=<span class="number">400</span>;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime time;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ApiError</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.time=LocalDateTime.now();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiError <span class="title function_">error</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        ApiError error=<span class="keyword">new</span> <span class="title class_">ApiError</span>();</span><br><span class="line">        error.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiError <span class="title function_">error</span><span class="params">(Integer status,String message)</span>&#123;</span><br><span class="line">        ApiError error=<span class="keyword">new</span> <span class="title class_">ApiError</span>();</span><br><span class="line">        error.setStatus(status);</span><br><span class="line">        error.setMessage(message);</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="handler"><a href="#handler" class="headerlink" title="handler"></a>handler</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = EntityNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiError&gt; <span class="title function_">entityNotFoundException</span><span class="params">(EntityNotFoundException e)</span>&#123;</span><br><span class="line">        log.error(ThrowableUtil.getStacktrace(e));</span><br><span class="line">        ApiError error=ApiError.error(NOT_FOUND.value(),e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> buildResponseEntity(error);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@ExceptionHandler(value = EntityExistedException.class)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;ApiError&gt; <span class="title function_">entityExistedException</span><span class="params">(EntityExistedException e)</span>&#123;</span><br><span class="line">        log.error(ThrowableUtil.getStacktrace(e));</span><br><span class="line">        ApiError error=ApiError.error(e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> buildResponseEntity(error);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ResponseEntity&lt;ApiError&gt; <span class="title function_">buildResponseEntity</span><span class="params">(ApiError error)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(error,HttpStatus.valueOf(error.getStatus()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">EntityExistedException</span>(User.class,<span class="string">&quot;username&quot;</span>,user.getUsername());</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/28877bf.html">http://ulemony.github.io/posts/28877bf.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库表设计</title>
    <url>/posts/da3ed1b.html</url>
    <content><![CDATA[<h1 id="如何根据需求设计数据库表"><a href="#如何根据需求设计数据库表" class="headerlink" title="如何根据需求设计数据库表"></a>如何根据需求设计数据库表</h1><h2 id="1-流程"><a href="#1-流程" class="headerlink" title="1.流程"></a>1.流程</h2><p>理解清楚需求 –&gt; 根据需求分析需要几张表 –&gt;分析每张表需要哪些字段 –&gt; 每个表之间的关系，需要怎么关联</p>
<p>–&gt; 建表</p>
<p>对象和对象之间的关系是什么，如果是一对多，需要两张表；多对多，需要三张表，其中一个关系表维护这两个对象之间的关系</p>
<h2 id="2-表设计注意事项"><a href="#2-表设计注意事项" class="headerlink" title="2.表设计注意事项"></a>2.表设计注意事项</h2><ol>
<li><p>按照表规范命名，建表的时候必须有七个字段：cr_time、cr_id、up_time、up_id、rm_time、rm_id、removed</p>
</li>
<li><p>一张表的字段不要太多，如果太多考虑分成两个表</p>
</li>
<li><p>选择合适的字段类型、字段大小，能用整型的话不用字符型，如果数据量不大，该字段存储的数据类型不确定，可以使用字符类型，使得对存储内容兼容性更好</p>
</li>
<li><p>建表的时候最好加上字段注释和表注释</p>
</li>
</ol>
<h2 id="3-一些经验"><a href="#3-一些经验" class="headerlink" title="3.一些经验"></a>3.一些经验</h2><h3 id="3-1-分库"><a href="#3-1-分库" class="headerlink" title="3.1 分库"></a>3.1 分库</h3><p>分库原则：每个子系统对应一个数据库</p>
<p><img src="/posts/undefined/%E5%88%86%E5%BA%93%E5%8E%9F%E5%88%99.png" alt="分库原则"></p>
<p>注意：在数据强一致的场景则涉及到数据库分布式事务</p>
<h3 id="3-2分表"><a href="#3-2分表" class="headerlink" title="3.2分表"></a>3.2分表</h3><ol>
<li><p>从主功能逻辑抽离主要几张表</p>
<p><img src="/posts/undefined/%E5%88%86%E8%A1%A81.png" alt="分表1"></p>
</li>
<li><p>根据功能补充表</p>
<p><img src="/posts/undefined/%E5%88%86%E8%A1%A82.png" alt="分表2"></p>
</li>
<li><p>检查多对多关系</p>
<p><img src="/posts/undefined/%E5%88%86%E8%A1%A83.png" alt="分表3"></p>
</li>
</ol>
<h3 id="3-3-冗余字段"><a href="#3-3-冗余字段" class="headerlink" title="3.3 冗余字段"></a>3.3 冗余字段</h3><p><img src="/posts/undefined/%E5%86%97%E4%BD%99%E5%AD%97%E6%AE%B5.png" alt="冗余字段"></p>
<h3 id="3-4-视图"><a href="#3-4-视图" class="headerlink" title="3.4 视图"></a>3.4 视图</h3><p>视图能简化后端程序的SQL语句，如用户前台、管理员后台都需要显示热门博客，如果使用视图，就无需在多个接口维护多个复杂的SQL语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--根据简单SQL查询热门博客列表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> v_hot</span><br></pre></td></tr></table></figure>



<h3 id="3-5-命名规范"><a href="#3-5-命名规范" class="headerlink" title="3.5 命名规范"></a>3.5 命名规范</h3><ol>
<li>数据库名：与系统名相同，如user、shop</li>
<li>表名：t_开头，如  t_blog、t_label, 如果是中间表，则结合两个表名  t_bloglabel</li>
<li>视图名： v_ 开头，如 v_hot, v_rank</li>
<li>字段名： 表名开头，如blog_id、label_id</li>
<li>外键：与原来名字相同，如所有的博客id都为blog_id，如果引用多个相同外键，则用$标记 如resource_id$1、resource_id$2</li>
</ol>
<p>链接 <a href="http://ulemony.github.io/posts/undefined.html">http://ulemony.github.io/posts/undefined.html</a> </p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>databas design</tag>
      </tags>
  </entry>
  <entry>
    <title>锁和事务</title>
    <url>/posts/be3c61be.html</url>
    <content><![CDATA[<h3 id="InnoDB-存储引擎的锁的算法"><a href="#InnoDB-存储引擎的锁的算法" class="headerlink" title="InnoDB 存储引擎的锁的算法"></a>InnoDB 存储引擎的锁的算法</h3><h4 id="Record-lock"><a href="#Record-lock" class="headerlink" title="Record lock"></a>Record lock</h4><p>单个行记录的锁，直接锁定某行记录的索引记录，通常用于唯一索引或主键索引上，当使用精确的查询条件例如id&#x3D;1时会使用记录锁</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">5</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>锁住主键为5的行</p>
<h4 id="Gap-lock"><a href="#Gap-lock" class="headerlink" title="Gap lock"></a>Gap lock</h4><p>间隙锁，锁定一个范围，不包括记录本身</p>
<p>形式是左开右开（left_record,right_record），在RR级别  为了解决幻读问题</p>
<p>例子：表中有age索引记录24, 26, 30, 34</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">27</span> <span class="keyword">AND</span> <span class="number">29</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>这时查询<strong>没有命中任何记录</strong>（因为 27~29 不存在）。</p>
<blockquote>
<p>所以 InnoDB 会加一个 <strong>Gap Lock</strong> 锁住 <code>26 和 30 之间的间隙</code>。</p>
<p>(26, 30) ← 这就是 Gap Lock</p>
</blockquote>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">25</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>加锁（24，+∞）</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span><span class="number">28</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>因为28不存在，为了防止后续幻读，在就近区间加锁（26，30）</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span><span class="number">26</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>只会锁住age&#x3D;26这一行数据</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">26</span> <span class="keyword">and</span> age <span class="operator">&lt;</span> <span class="number">32</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>命中的记录age&#x3D;30 锁住的区间（26，30]、（30，34]</p>
<p>间隙锁和临键锁在一起</p>
<h4 id="Next-key-lock"><a href="#Next-key-lock" class="headerlink" title="Next-key lock"></a>Next-key lock</h4><p>也叫临键锁，record+gap 锁定一个范围，包含记录本身</p>
<p>形式是左开右闭区间(prev_key, current_key],MYSQL默认级别是RR、默认上临键锁</p>
<p>例子：表中有age索引记录24, 26, 30, 34</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>加锁的实际范围 (26, 30]</p>
<p>修改age&#x3D;26不受影响，因为没有加record lock</p>
<p>插入新的age&#x3D;26会被阻塞，因为gap被锁</p>
<p>在B+树中… 24 → 26 → 30 …  这意味着新记录age&#x3D;26要插在「现有的 age &#x3D; 26」记录 <strong>的前或后</strong>（根据主键二级排序）<br> ⚠️ 也就是：<strong>插入点落在 (26, 30)</strong> 的 gap 中 —— 而不是你以为的 26 本身！而（24，26）这个区间已经上了gap lock导致无法插入</p>
<p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="keyword">BETWEEN</span> <span class="number">26</span> <span class="keyword">AND</span> <span class="number">29</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>命中记录age&#x3D;26 加锁情况如下</p>
<table>
<thead>
<tr>
<th>区间</th>
<th>为什么被锁</th>
</tr>
</thead>
<tbody><tr>
<td><code>(24, 26)</code></td>
<td>是 <code>26</code> 这个 Next-Key 的左间隙</td>
</tr>
<tr>
<td><code>26</code></td>
<td>是命中记录，必须加 Record Lock</td>
</tr>
<tr>
<td><code>(26, 30)</code></td>
<td>是“命中范围内但没有记录”的间隙锁</td>
</tr>
</tbody></table>
<h4 id="Intention-Locks"><a href="#Intention-Locks" class="headerlink" title="Intention  Locks"></a>Intention  Locks</h4><p>意向锁本质是一种表级锁，但不是真正锁住数据的锁，而是表示“对某些行加锁”的意图</p>
<p>类型：意向共享锁IS、意向排他锁IX</p>
<p>会话a</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>对id&#x3D;1 的行加了排他锁X，MYSQL会在该表上加一个意向排他锁IX</p>
<p>会话b</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> employees READ;</span><br></pre></td></tr></table></figure>

<p>会尝试对整个表加一个共享锁S</p>
<p>这与会话a的IX冲突导致会话b阻塞</p>
<p>意向锁是自动加的</p>
<table>
<thead>
<tr>
<th>行级锁操作</th>
<th>表级意向锁类型</th>
</tr>
</thead>
<tbody><tr>
<td><code>SELECT ... LOCK IN SHARE MODE</code></td>
<td>意向共享锁（IS）</td>
</tr>
<tr>
<td><code>SELECT ... FOR UPDATE</code></td>
<td>意向排他锁（IX）</td>
</tr>
<tr>
<td><code>INSERT</code> &#x2F; <code>UPDATE</code> &#x2F; <code>DELETE</code></td>
<td>意向排他锁（IX）</td>
</tr>
</tbody></table>
<p>意向锁和真正的锁区别</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>作用范围</th>
<th>是否锁具体数据</th>
<th>加锁目标</th>
</tr>
</thead>
<tbody><tr>
<td>行锁（S&#x2F;X）</td>
<td>行级别</td>
<td>是</td>
<td>具体某一行记录</td>
</tr>
<tr>
<td>表锁（S&#x2F;X）</td>
<td>表级别</td>
<td>是</td>
<td>整张表</td>
</tr>
<tr>
<td>意向锁</td>
<td>表级别</td>
<td>否</td>
<td>表结构上的“意图”</td>
</tr>
</tbody></table>
<p>查看锁 使用mysql8版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> performance_schema.data_locks;</span><br></pre></td></tr></table></figure>

<h3 id="事务的基本特性和隔离级别"><a href="#事务的基本特性和隔离级别" class="headerlink" title="事务的基本特性和隔离级别"></a>事务的基本特性和隔离级别</h3><h4 id="事务的四大特性ACID"><a href="#事务的四大特性ACID" class="headerlink" title="事务的四大特性ACID"></a>事务的四大特性ACID</h4><p>事务是一组要么全部成功，要么全部失败的数据库操作，具备以下特性</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><strong>A - 原子性 (Atomicity)</strong></td>
<td>事务是最小执行单位，操作要么都成功，要么都失败，不可能只执行一部分。 用于保证事务不可分割。</td>
</tr>
<tr>
<td><strong>C - 一致性 (Consistency)</strong></td>
<td>事务执行前后，数据处于一致状态（满足所有业务&#x2F;约束条件）。 例如扣款和加款必须一致。</td>
</tr>
<tr>
<td><strong>I - 隔离性 (Isolation)</strong></td>
<td>多个事务并发执行时，相互之间不能互相干扰，<strong>中间状态不可见</strong>。</td>
</tr>
<tr>
<td><strong>D - 持久性 (Durability)</strong></td>
<td>一旦事务提交，结果永久保存，即使系统崩溃也不会丢失。 通常靠日志机制（如 redo log）实现。</td>
</tr>
</tbody></table>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><table>
<thead>
<tr>
<th>隔离级别</th>
<th>能否读到未提交数据？</th>
<th>会有不可重复读？</th>
<th>会有幻读？</th>
</tr>
</thead>
<tbody><tr>
<td><strong>1. Read Uncommitted（读未提交）</strong></td>
<td>✅是</td>
<td>✅是</td>
<td>✅是</td>
</tr>
<tr>
<td><strong>2. Read Committed（读已提交）</strong></td>
<td>❌否</td>
<td>✅是</td>
<td>✅是</td>
</tr>
<tr>
<td><strong>3. Repeatable Read（可重复读）</strong>（MySQL默认）</td>
<td>❌否</td>
<td>❌否</td>
<td>✅是（但MySQL通过间隙锁防止幻读）</td>
</tr>
<tr>
<td><strong>4. Serializable（可串行化）</strong></td>
<td>❌否</td>
<td>❌否</td>
<td>❌否（加表锁，性能最低）</td>
</tr>
</tbody></table>
<p>脏读： 一个事务读取了另外一个事务尚未提交的数据。例如事务a读取账户余额，此时事务b修改账户余额但还未有提交，后面因某些原因rollback了操作，那么事务a读取到的数据是不准确的</p>
<p>不可重复读： 一个事务两次查询到的数据不一致，可能是其他事务更新了该数据</p>
<p>幻读：在一个事务中，两次查询符合条件的记录数不一致，可能是因为在两次查询的过程中，其他事务插入了新的几行数据</p>
<h4 id="ACID靠什么保证"><a href="#ACID靠什么保证" class="headerlink" title="ACID靠什么保证"></a>ACID靠什么保证</h4><p>A原子性靠Undo Log保证，当执行事务时，InnoDB会记录Undo Log，用于出错时回滚之前的修改，事务实行失败或者ROLLBACK，就根据Undo Log来撤销对数据页的修改</p>
<p>C一致性靠其他三大特性进行保证，同时数据库层面的约束例如主键、唯一索引、外键也助于保证一致性</p>
<p>I隔离性 由多版本并发控制MVCC和锁机制保证</p>
<p>D持久性由Redo Log和磁盘刷写策略保证，mysql修改数据同时会把修改写入到Redo Log并刷盘，如果系统崩溃，MYSQL重启时根据Redo Log恢复数据</p>
<h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>在每一行数据都会有两个隐藏字段trx_id和roll_pointer，trx_id是当前事务有写操作才申请的自增id</p>
<p>roll_pointer：每次对记录修改的时候，都会把老版本写入到Undo Log中，roll_pointer指向了上一个版本的位置</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>trx_id</code></td>
<td>最后一次修改该行的事务 ID</td>
</tr>
<tr>
<td><code>roll_pointer</code></td>
<td>指向 Undo Log（撤销日志）的指针，保存旧版本数据</td>
</tr>
</tbody></table>
<h4 id="Readview"><a href="#Readview" class="headerlink" title="Readview"></a>Readview</h4><p>它是MVCC的核心组件之一，是快照读的“时间快照”，可以用来判断一个trx_id是已经提交还是正在运行的。包含了以下四个字段</p>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td><code>m_ids</code></td>
<td>当前系统中<strong>活跃事务的 ID 列表</strong>（未提交）</td>
</tr>
<tr>
<td><code>min_trx_id</code></td>
<td>m_ids 中最小事务 ID</td>
</tr>
<tr>
<td><code>max_trx_id</code></td>
<td>当前系统中尚未分配的下一个事务 ID</td>
</tr>
<tr>
<td><code>creator_trx_id</code></td>
<td>创建当前 Read View 的事务 ID</td>
</tr>
</tbody></table>
<p>判断过程：</p>
<p>访问数据，获取数据中的事务id</p>
<p>1.如果trx_id &lt; min_trx_id，说明是已经提交的事务，数据可以访问</p>
<p>2.如果trx_id ≥ max_trx_id ，说明是未来提交的事务，数据不可以访问</p>
<p>3.如果min_trx_id ≤ trx_id &lt; max_trx_id，先判断是否&#x3D;<code>creator_trx_id</code>如果是，说明是自己改的，可以访问，</p>
<p>否则再判断是不是处于<code>m_ids</code>，如果是说明事务未提交，数据不可访问，否则就是已经提交的事务，数据可以访问</p>
<p>如果某个版本的数据对当前事务不可见的话，那就顺着版本链找到下一个版本的数据，继续按照上边的步骤判断 可见性，依此类推，直到版本链中的最后一个版本。如果最后一个版本也不可见的话，那么就意味着该条记录对 该事务完全不可见，查询结果就不包含该记录。</p>
<p>例如有一条数据 <code>age = 30</code>，它被多次修改，形成了一个<strong>版本链</strong>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">记录最新版本：</span><br><span class="line"><span class="selector-attr">[age=34, trx_id=104]</span>  ---&gt;  <span class="selector-attr">[age=32, trx_id=102]</span>  ---&gt;  <span class="selector-attr">[age=30, trx_id=100]</span></span><br><span class="line">                         ↑                 ↑</span><br><span class="line">                       Undo2            Undo1</span><br></pre></td></tr></table></figure>

<p>假如当前在事务id&#x3D;105中执行快照读，ReadView如下</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">m_ids = [104]</span><br><span class="line">min_trx_id = 104</span><br><span class="line">max_trx_id = 106</span><br><span class="line">creator_trx_id = 105</span><br></pre></td></tr></table></figure>

<p>现在要读取这条记录，那么从版本链的开头进行判断</p>
<table>
<thead>
<tr>
<th>版本</th>
<th>trx_id</th>
<th>判断</th>
<th>是否可见</th>
</tr>
</thead>
<tbody><tr>
<td>age&#x3D;34</td>
<td>104</td>
<td>trx_id ∈ m_ids ⇒ 活跃事务未提交</td>
<td>❌ 不可见</td>
</tr>
<tr>
<td>age&#x3D;32</td>
<td>102</td>
<td>trx_id &lt; min_trx_id，且不在 m_ids</td>
<td>✅ 可见</td>
</tr>
<tr>
<td>✅ 所以读取 age &#x3D; 32</td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>已提交读的隔离级别下，每一次查询的时候都会生成一个独立的Readview而可重复读，则在第一次读的时候生成Readview，之后都是复用之前的Readview</p>
<h4 id="当前读和快照读"><a href="#当前读和快照读" class="headerlink" title="当前读和快照读"></a>当前读和快照读</h4><p>依赖Readview的读取又叫做快照读，特点：</p>
<p>非锁定读取不加锁； 读的是事务开始时的数据快照 ；使用MVCC 依赖Undo Log和ReadView ；默认在可重复读或读已提交隔离级别下启用</p>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 在一个事务中</span></span><br><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>如果此时有其他事务修改了 <code>age = 30</code> 的行，该 SELECT 仍然读到的是<strong>当前事务开始时</strong>那一刻的版本。</p>
<p>典型语句：</p>
<p><code>SELECT</code>（无 <code>FOR UPDATE</code> 或 <code>LOCK IN SHARE MODE</code>）</p>
<p><code>SELECT</code> 语句默认就是快照读</p>
<p>当前读，特点：</p>
<p>读取的是行的<strong>最新版本</strong>（真实数据）。</p>
<p>会对读取的行<strong>加锁</strong>（共享锁或排他锁）。</p>
<p>能看到其他事务提交后的最新数据。</p>
<p>如果遇到未提交的数据，可能会<strong>阻塞</strong>，直到数据可用。</p>
<p>例如</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br></pre></td></tr></table></figure>

<p>会加上排他锁，阻塞其他修改该行的事务。读取的是最新数据，确保数据不会被其他人修改。</p>
<p>典型语句：</p>
<p>SELECT … FOR UPDATE<br>SELECT … LOCK IN SHARE MODE</p>
<p><code>UPDATE</code>、<code>INSERT</code>、<code>DELETE</code> 都属于当前读</p>
<p>链接 <a href="http://ulemony.github.io/posts/be3c61be.html">http://ulemony.github.io/posts/be3c61be.html</a> </p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>索引</title>
    <url>/posts/df9a61f7.html</url>
    <content><![CDATA[<h3 id="索引基础"><a href="#索引基础" class="headerlink" title="索引基础"></a>索引基础</h3><h4 id="索引的基本原理"><a href="#索引的基本原理" class="headerlink" title="索引的基本原理"></a>索引的基本原理</h4><p>索引的核心思想是通过为表中的列创建额外的数据结构，来加速查询过程</p>
<h4 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h4><p>常见的索引类型：主键索引、唯一索引、普通索引、全文索引、组合索引</p>
<h5 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h5><p>把某个列设置为主键的时候，该列就是主键索引，每个表只能有一个主键索引，主键列的值是唯一的，不能为NULL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> users (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,  <span class="comment">-- 主键索引</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果创建表时没有主键索引，可以在创建之后添加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name <span class="keyword">add</span> <span class="keyword">primary</span> key (column_name)</span><br></pre></td></tr></table></figure>



<h5 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h5><p>唯一索引和主键索引类似，保证索引列中的每个值是唯一的。但唯一索引允许存在 <code>NULL</code> 值，而且每个表可以有多个唯一索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY auto_increment,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">UNIQUE</span>,  <span class="comment">-- 唯一索引</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果创建表时没有唯一索引，可以创建后追加</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> constraint_name <span class="keyword">UNIQUE</span> (column_name);</span><br><span class="line"><span class="comment">--constraint_name 指约束名，可以自定义</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> users</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> (email);</span><br></pre></td></tr></table></figure>



<h5 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h5><p>不要求列中的值唯一，表中可以有多个普通索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    INDEX idx_price(price)  <span class="comment">-- 普通索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>



<h5 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h5><p>通常用于对长文本字段进行复杂的搜索，例如查询特定的单词; 在MYSQL5.6之前只有MyISAM存储引擎支持全文索引，MYSQL5.6之后InnoDB存储引擎也支持全文索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> articles (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    title <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    content TEXT,</span><br><span class="line">    FULLTEXT INDEX idx_fulltext(content)  <span class="comment">-- 全文索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>也可以在创建表后追加全文索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> FULLTEXT INDEX index_name (column_name);</span><br></pre></td></tr></table></figure>

<p>可以利用MATCH和AGAINST来进行高效的全文搜索</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> articles <span class="keyword">WHERE</span> <span class="keyword">MATCH</span>(content) AGAINST(<span class="string">&#x27;database&#x27;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="组合索引"><a href="#组合索引" class="headerlink" title="组合索引"></a>组合索引</h5><p>由多个列组成的索引；遵循“最左前缀”原则</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    customer_id <span class="type">INT</span>,</span><br><span class="line">    order_date <span class="type">DATE</span>,</span><br><span class="line">    amount <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    INDEX idx_customer_order(customer_id, order_date)  <span class="comment">-- 组合索引</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>也可以在创建表后追加组合索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name</span><br><span class="line"><span class="keyword">ADD</span> INDEX index_name (column1, column2, ...);</span><br></pre></td></tr></table></figure>

<p>查询时可以利用这两个列来查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders <span class="keyword">WHERE</span> customer_id <span class="operator">=</span> <span class="number">101</span> <span class="keyword">AND</span> order_date <span class="keyword">BETWEEN</span> <span class="string">&#x27;2023-01-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2023-12-31&#x27;</span>;</span><br></pre></td></tr></table></figure>



<p>查看表的索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="索引机制"><a href="#索引机制" class="headerlink" title="索引机制"></a>索引机制</h4><p>添加完索引后，MySQL一般通过BTREE算法生成一个索引文件，在查询数据库时，找到索引文件进行遍历，找到相应的键从而获取数据</p>
<p>创建索引产生的索引文件会占用磁盘空间，在增删改查时会对索引文件进行修改，性能会有所下降</p>
<h4 id="索引存储数据结构"><a href="#索引存储数据结构" class="headerlink" title="索引存储数据结构"></a>索引存储数据结构</h4><h5 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h5><p>以键值对存储的数据结构，只要输入key就可以找到对应的value，等值查询高效，但不支持范围查询。在MySQL中，Memory存储引擎的默认索引类型就是哈希索引</p>
<h5 id="二叉查找树"><a href="#二叉查找树" class="headerlink" title="二叉查找树"></a>二叉查找树</h5><p>当数据量大时，二叉树的树高会比较大，需要多次读取磁盘耗费时间</p>
<p><img src="/posts/df9a61f7/%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="二叉树"></p>
<p><img src="/posts/df9a61f7/%E4%BA%8C%E5%8F%89%E6%A0%912.png" alt="二叉树2"></p>
<h5 id="B树（Balance-Tree）"><a href="#B树（Balance-Tree）" class="headerlink" title="B树（Balance Tree）"></a>B树（Balance Tree）</h5><p>图中的p节点为指向子节点的指针，每个节点称为页，页就是磁盘快，mysql中数据读取的基本单位是页</p>
<p>B树和二叉树相比，每个节点存储量更多的键值和数据，而且拥有更多的子节点，高度很低，B树查找读取磁盘的次数很少，提高了查找效率</p>
<p><img src="/posts/df9a61f7/B%E6%A0%91.png" alt="B树"></p>
<p>假如要查找id&#x3D;29的用户，查找流程如下：</p>
<p>1.找到根节点也就是页1，判断29在17和35之间，选取指针p2找到页3</p>
<p>2.把29和页3中的键值比较，29在26和30之间，选取指针p2找到页8</p>
<p>3.将29和页8的键值比较，有匹配的的键值29，完成查找</p>
<h5 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h5><ol>
<li><p>B+树的非叶节点不存储数据，仅存储键值，所有数据存储在叶子节点，而且数据是按照顺序排列的，这使得B+树范围查找、排序查找、分组查找以及去重查找变得很简单。</p>
</li>
<li><p>如果B+树一个节点可以存储1000个键值，那么3层B+树可以存储1000x1000x1000&#x3D;10亿个数据。一般根节点常驻内存，查找10个数据只需要2次磁盘IO</p>
</li>
<li><p>B+树页之间通过双向链表连接，叶子节点中的数据通过单向链表连接</p>
</li>
<li><p>在Innodb存储引擎中，B+树索引是 聚簇索引，在MYISAM中，B+树索引的叶子节点不存储数据，而是数据的地址，属于非聚簇索引</p>
</li>
</ol>
<p><img src="/posts/df9a61f7/B+%E6%A0%91.png" alt="B+树"></p>
<h4 id="聚簇索引和非聚簇索引"><a href="#聚簇索引和非聚簇索引" class="headerlink" title="聚簇索引和非聚簇索引"></a>聚簇索引和非聚簇索引</h4><p>在MySQL中，B+树按存储方式可分为聚簇索引和非聚簇索引</p>
<h5 id="聚簇索引"><a href="#聚簇索引" class="headerlink" title="聚簇索引"></a>聚簇索引</h5><p>在InnoDB中，主键索引就是聚簇索引，即使不创建主键，系统也会主动创建隐式主键，以主键作为B+树索引的键值而构建的B+树索引为聚簇索引，叶子节点存储了行数据</p>
<p>当执行sql语句：select * from user where id&gt;&#x3D;18 and id &lt;40，对应的数据查找过程（以上图为例）</p>
<ol>
<li>不需要从磁盘读取数据，直接从内存中读取根节点也就是页1，在页1中找到键值18，从而根据指针p2定位到页3</li>
<li>从磁盘中读取页3并放入内存中，在页3中找到键值18，根据指针p1定位到页8</li>
<li>从磁盘中读取页8并放入内存中，页中的数据是通过单向链表进行连接，且键值按照顺序存放，可以根据二分查找法定位到键值18</li>
<li>因为是范围查找而去所有数据存放于叶子节点，且有序排列，可以对页8的键值遍历查询，可以一直找到键值为22的数据，此时页8的数据被全部遍历，由于页之间通过双向链表连接，可通过页8的指针定位到页9进行数据查询，一直到页12，发现41大于40不满足条件，查找终止</li>
</ol>
<h5 id="非聚簇索引"><a href="#非聚簇索引" class="headerlink" title="非聚簇索引"></a>非聚簇索引</h5><p>以主键之外的列值作为键值构建的B+树索引称之为非聚簇索引，也叫辅助索引（二级索引）</p>
<p>和聚簇索引的区别在于非聚簇索引的叶子节点不存储表中的数据，而是该列对应的主键，数据表和索引表是分开存储的。查询时先找到主键，再用主键到聚簇索引中进行查找数据，这个过程称为 <strong>回表</strong>。</p>
<p>当执行sql语句执行 select * from user where name &#x3D; ‘jim’，查找流程如下</p>
<ol>
<li><p>从内存读取根节点页1，根据指针p1定位到页2</p>
</li>
<li><p>根据页2中的指针p2定位到页6</p>
</li>
<li><p>找到索引对应的值jim，获取主键20</p>
</li>
<li><p>到主键索引中根据主键20 获取对应的数据</p>
</li>
</ol>
<p><img src="/posts/df9a61f7/%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95.png" alt="非聚集索引"></p>
<p>如果使用了覆盖索引，则不需要回表，直接通过辅助索引就可以查到需要的数据，覆盖索引的前提是查询列要被所建的索引覆盖</p>
<p>例如对于数据表 <code>employees</code>，包含 <code>id</code>、<code>name</code> 和 <code>age</code> 三列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>可以为name 和age 创建一个复合索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> employees (name, age);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>当执行查询  SELECT name, age FROM employees WHERE name &#x3D; ‘Alice’;</p>
<p><code>idx_name_age</code> 索引中已经包含了 <code>name</code> 和 <code>age</code> 两个列，因此这个查询可以完全通过索引来获取结果，不需要访问实际的数据库</p>
<h4 id="相关名词"><a href="#相关名词" class="headerlink" title="相关名词"></a>相关名词</h4><h5 id="最左匹配原则"><a href="#最左匹配原则" class="headerlink" title="最左匹配原则"></a>最左匹配原则</h5><p>在创建一个复合索引时，查询条件必须从复合索引的最左列开始，且不能跳过中间的任何列，才能有效使用索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> INDEX idx_name_age <span class="keyword">ON</span> employees (name, age);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>索引 <code>idx_name_age</code> 是由 <code>name</code> 列和 <code>age</code> 列构成的复合索引，索引顺序是 **<code>name</code> -&gt; <code>age</code>**。</p>
<ol>
<li>完全匹配索引顺序</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">30</span>;</span><br></pre></td></tr></table></figure>

<p>查询首先按索引中的最左边的列 <code>name</code> 进行匹配，接着按 <code>age</code> 列进行匹配，符合复合索引的列顺序。</p>
<ol start="2">
<li><p>部分匹配索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>跳过中间列的查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">30</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;Alice&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>不符合最左匹配索引原则：在复合索引idx_name_age中，name列排在age列前面，查询条件没有从最左的列name开始匹配，而是从age开始</p>
</li>
</ol>
<h5 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h5><p>过滤条件直接在索引层面进行应用，只有符合条件的数据会被返回，减少了不必要的回表操作</p>
<p>假设employess表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employees (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    age <span class="type">INT</span>,</span><br><span class="line">    salary <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>),</span><br><span class="line">    hire_date <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>为age和salary创建了复合索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> INDEX idx_age_salary <span class="keyword">ON</span> employees(age, salary);</span><br></pre></td></tr></table></figure>

<p>当执行查询 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> employees <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">30</span> <span class="keyword">AND</span> salary <span class="operator">&gt;</span> <span class="number">5000</span>;</span><br></pre></td></tr></table></figure>

<p>如果没有索引下推，mysql会扫描索引idx_age_salary 找到所有符合age&gt;30的记录，然后回表到employees表中查找salary&gt;5000的记录</p>
<p>最终返回符合age&gt;30 和salary&gt;5000的记录</p>
<p>当有索引下推，在扫描索引时不仅刷选age&gt;30的记录，还会同时应用salary&gt;5000的条件，这样只有同时符合这两个条件的数据才会被返回</p>
<h4 id="索引的使用原则"><a href="#索引的使用原则" class="headerlink" title="索引的使用原则"></a>索引的使用原则</h4><h5 id="不适合建索引的情况"><a href="#不适合建索引的情况" class="headerlink" title="不适合建索引的情况"></a>不适合建索引的情况</h5><ol>
<li>表记录太少</li>
<li>区分度不高的字段例如性别不适合建索引</li>
<li>where条件中用不到的字段不适合建立索引</li>
<li>经常插入、删除、修改的表要减少索引</li>
<li>text、image等类型不适合建立索引</li>
<li>mysql能估计出全表扫描比使用索引更快的时候，不使用索引</li>
<li>参与计算的列不适合建立索引</li>
</ol>
<h5 id="索引失效场景"><a href="#索引失效场景" class="headerlink" title="索引失效场景"></a>索引失效场景</h5><ol>
<li><p>使用LIKE模糊匹配 左边有通配符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;%abc&#x27;</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p>%在前，MYSQL无法通过索引定位前缀，只能全表扫描</p>
<p>优化：改成右匹配</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">&#x27;abc%&#x27;</span>; <span class="comment">-- 可使用索引</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>在索引列上使用函数或表达式</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> <span class="keyword">YEAR</span>(birthdate) <span class="operator">=</span> <span class="number">1990</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p>对索引列使用了函数 <code>YEAR()</code>，使得不能使用索引。</p>
<p>优化：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> birthdate <span class="operator">&gt;=</span> <span class="string">&#x27;1990-01-01&#x27;</span> <span class="keyword">AND</span> birthdate <span class="operator">&lt;</span> <span class="string">&#x27;1991-01-01&#x27;</span>;</span><br></pre></td></tr></table></figure>


</li>
<li><p>隐式类型转换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> phone <span class="operator">=</span> <span class="number">1234567890</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p><code>phone</code> 是字符串类型，但用数字进行比较，发生隐式类型转换。</p>
<p>优化：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> phone <span class="operator">=</span> <span class="string">&#x27;1234567890&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>​	</p>
<ol start="4">
<li><p>OR查询没有全部字段都使用索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">OR</span> age <span class="operator">=</span> <span class="number">18</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p><code>username</code> 有索引，但 <code>age</code> 没有，MySQL 无法对整体使用索引。</p>
<p>优化：确保所有OR条件字段都有索引，或者用UNION 拆开</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>组合索引不满足最左匹配原则</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 组合索引：(username, age)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">=</span> <span class="number">18</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p>没有从最左列username开始匹配</p>
<p>优化：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">18</span>; <span class="comment">-- 使用索引</span></span><br></pre></td></tr></table></figure>


</li>
<li><p>使用 <code>!=</code>、<code>&lt;&gt;</code>、<code>NOT IN</code>、<code>NOT LIKE</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">!=</span> <span class="number">18</span>; <span class="comment">-- 索引失效</span></span><br></pre></td></tr></table></figure>

<p>这些操作无法快速过滤，只能回表或全表扫描</p>
<p>优化：可以考虑业务侧改写逻辑</p>
</li>
<li><p>使用 <code>IS NULL</code> 和 <code>IS NOT NULL</code>（部分情况）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> deleted_at <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>; <span class="comment">-- 可能失效</span></span><br></pre></td></tr></table></figure>

<p><code>IS NOT NULL</code> 一般不能使用索引，<code>IS NULL</code> 可部分使用索引。</p>
<p>优化：尽量避免此类查询影响性能</p>
</li>
<li><p>使用范围查询后再使用排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> age <span class="operator">&gt;</span> <span class="number">18</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> username; <span class="comment">-- 可能失效</span></span><br></pre></td></tr></table></figure>

<p>范围条件 <code>age &gt; 18</code> 会让后面的索引 <code>username</code> 排序失效。</p>
<p>优化：排序字段应在范围字段之前，或使用覆盖索引等方式优化。</p>
</li>
<li><p>索引重复率太高</p>
<p>即使有索引，如果字段的<strong>区分度低</strong>（如性别字段只有 “男&#x2F;女”），优化器可能认为全表扫描更快。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> gender <span class="operator">=</span> <span class="string">&#x27;男&#x27;</span>; <span class="comment">-- 索引可能不被使用</span></span><br></pre></td></tr></table></figure>

<p>优化：如果表大并且经常查这个字段，可考虑使用 <strong>联合索引</strong> 或 <strong>添加统计列优化逻辑</strong>。</p>
</li>
<li><p>覆盖索引被打破</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果索引是 (username, age)，但查询了其他字段</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">18</span>; <span class="comment">-- 不能使用覆盖索引</span></span><br></pre></td></tr></table></figure>

<p>使用精确字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> username, age <span class="keyword">FROM</span> users <span class="keyword">WHERE</span> username <span class="operator">=</span> <span class="string">&#x27;tom&#x27;</span> <span class="keyword">AND</span> age <span class="operator">=</span> <span class="number">18</span>;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>链接 <a href="http://ulemony.github.io/posts/df9a61f7.html">http://ulemony.github.io/posts/df9a61f7.html</a> </p>
]]></content>
      <categories>
        <category>Database</category>
      </categories>
      <tags>
        <tag>索引</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM垃圾回收 GC</title>
    <url>/posts/935a6b06.html</url>
    <content><![CDATA[<h4 id="GC-如何判断对象可回收"><a href="#GC-如何判断对象可回收" class="headerlink" title="GC 如何判断对象可回收"></a>GC 如何判断对象可回收</h4><h5 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h5><p>每个对象有一个引用计数器，每当有一个引用指向它，计数器 +1；引用断开时，计数器 -1；</p>
<p>当计数器为 0 时，表示对象不再被引用，可以被回收。</p>
<p><strong>缺点</strong>：无法处理循环引用的问题。例如，两个对象相互引用，但不再被外部引用，这种情况下计数器不会为 0。</p>
<h5 id="可达性分析法"><a href="#可达性分析法" class="headerlink" title="可达性分析法"></a>可达性分析法</h5><p>GC Roots作为对象起始点，向下搜索，如果一个对象到GC Roots没有引用链则对象不可用，可以被回收</p>
<p>常见的GC Roots：</p>
<ul>
<li><p>虚拟机栈中引用的对象，例如局部变量、临时变量</p>
</li>
<li><p>方法区中类静态属性引用的对象</p>
</li>
<li><p>方法区中常量引用的对象</p>
</li>
<li><p>本地方法栈中JNI引用的对象</p>
</li>
</ul>
<p><strong>示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GCRootsDemo</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> GCRootsDemo staticField;      <span class="comment">// 静态成员变量 (GC Roots)</span></span><br><span class="line">    <span class="keyword">private</span> GCRootsDemo instanceField;           <span class="comment">// 实例成员变量 (非GC Roots)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">ARRAY_SIZE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建本地变量（GC Roots）</span></span><br><span class="line">        <span class="type">GCRootsDemo</span> <span class="variable">localVar</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GCRootsDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 静态成员变量引用（GC Roots）</span></span><br><span class="line">        staticField = <span class="keyword">new</span> <span class="title class_">GCRootsDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. localVar 的实例成员变量引用（非GC Roots）</span></span><br><span class="line">        localVar.instanceField = <span class="keyword">new</span> <span class="title class_">GCRootsDemo</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 数组对象的引用（数组本身是GC Roots）</span></span><br><span class="line">        GCRootsDemo[] array = <span class="keyword">new</span> <span class="title class_">GCRootsDemo</span>[ARRAY_SIZE];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ARRAY_SIZE; i++) &#123;</span><br><span class="line">            array[i] = <span class="keyword">new</span> <span class="title class_">GCRootsDemo</span>(); <span class="comment">// 每个元素指向一个新对象</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打破某些引用链</span></span><br><span class="line">        array[<span class="number">1</span>] = <span class="literal">null</span>;       <span class="comment">// 元素1指向的对象可以回收</span></span><br><span class="line">        localVar = <span class="literal">null</span>;       <span class="comment">// localVar不再指向对象</span></span><br><span class="line">        staticField = <span class="literal">null</span>;    <span class="comment">// staticField不再指向对象</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动触发GC</span></span><br><span class="line">        System.gc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>引用关系图</strong></p>
<p><em>初始状态</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GC Roots:                  非GC Roots引用:</span><br><span class="line"> ┌──────────────┐          ┌───────────────┐</span><br><span class="line"> │ localVar     │ ───────► │ GCRootsDemo   │</span><br><span class="line"> │ staticField  │ ───────► │ GCRootsDemo   │</span><br><span class="line"> │ array        │ ───────► │ GCRootsDemo[] │</span><br><span class="line"> └──────────────┘          └───────────────┘</span><br><span class="line">                              │     │     │</span><br><span class="line">                              ▼     ▼     ▼</span><br><span class="line">                          Object  Object  Object</span><br><span class="line">                                (array[1] 被置 null后断开)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>断开引用后</em></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GC Roots:                  非GC Roots引用:</span><br><span class="line"> ┌──────────────┐          ┌───────────────┐</span><br><span class="line"> │ localVar (X) │          │ GCRootsDemo   │</span><br><span class="line"> │ staticField(X│          │               │</span><br><span class="line"> │ array        │ ───────► │ GCRootsDemo[] │</span><br><span class="line"> └──────────────┘          └───────────────┘</span><br><span class="line">                                     │     │</span><br><span class="line">                                     ▼     ▼</span><br><span class="line">                                 Object  Object</span><br><span class="line">                            (array[1] 不可达)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>GC<strong>回收分析</strong></p>
<p><strong>存活的对象：</strong></p>
<ul>
<li><code>array</code> 本身及其 <code>array[0]</code> 和 <code>array[2]</code> 指向的对象。</li>
<li><code>array[1]</code> 被置为 <code>null</code>，对应的对象会被GC。</li>
</ul>
<p><strong>可回收对象：</strong></p>
<ul>
<li><code>localVar</code> 和 <code>staticField</code> 被置为 <code>null</code>，它们之前引用的对象变得不可达，成为垃圾。</li>
<li><code>array[1]</code> 的对象由于被置为 <code>null</code>，没有其他路径可达，也会被回收。</li>
</ul>
<h5 id="四种引用"><a href="#四种引用" class="headerlink" title="四种引用"></a>四种引用</h5><h6 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a><em>强引用</em></h6><p>最常见的引用类型，在引用期间不会被垃圾回收器回收，例如Object obj&#x3D;new Object();</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrongReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>(); <span class="comment">// 强引用</span></span><br><span class="line">        <span class="comment">// obj对象会一直存在，直到 obj 变量超出作用域或被显式置为 null</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h6 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a><em>软引用</em></h6><p>在系统内存充足的情况下，软引用对象不会被回收；但在系统内存不足时，垃圾回收器会尽量回收软引用指向的对象</p>
<p>需要用SoftReference类来实现</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.SoftReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoftReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        SoftReference&lt;MyObject&gt; softRef = <span class="keyword">new</span> <span class="title class_">SoftReference</span>&lt;&gt;(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// obj 不再是强引用了</span></span><br><span class="line">        obj = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 在内存充足的情况下，softRef.get()可以返回对象</span></span><br><span class="line">        System.out.println(softRef.get()); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>适用场景：</p>
<p><strong>缓存：</strong> 例如，图片缓存、数据库查询结果缓存等。软引用能够使缓存对象在内存不足时被自动回收，避免了缓存导致的内存泄漏。</p>
<p><strong>临时数据：</strong> 对一些临时对象使用软引用，当内存不够时允许对象被回收。</p>
<h6 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a><em>弱引用</em></h6><p>弱引用指向的对象在垃圾回收时会被回收，不管系统内存是否充足。即当一个对象只有弱引用时，它会在下一次垃圾回收时被回收。</p>
<p>需要WeakReference类来实现</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.WeakReference;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeakReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        WeakReference&lt;MyObject&gt; weakRef = <span class="keyword">new</span> <span class="title class_">WeakReference</span>&lt;&gt;(obj);</span><br><span class="line"></span><br><span class="line">        obj = <span class="literal">null</span>; <span class="comment">// 删除强引用</span></span><br><span class="line">        System.gc(); <span class="comment">// 显式调用垃圾回收器</span></span><br><span class="line">        <span class="comment">// 因为没有强引用，weakRef.get() 返回 null</span></span><br><span class="line">        System.out.println(weakRef.get());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>适用场景：</p>
<p><strong>事件监听：</strong> 当监听器对象使用弱引用时，监听器可以在没有强引用时被GC回收，而不影响事件的正常传递。</p>
<p><strong>不可恢复的临时对象：</strong> 用弱引用来表示可以被回收的缓存对象。例如：图像、临时数据等，系统内存不足时会被回收。</p>
<h6 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><em>虚引用</em></h6><p>虚引用是最弱的引用类型，几乎不影响垃圾回收器的回收行为。虚引用主要用于在对象被垃圾回收器回收后进行一些清理操作。虚引用不能通过 <code>get()</code> 方法获取对象，它的作用是跟踪对象的回收过程。需要PhantomReference来实现</p>
<p>不能通过它直接访问对象，常与 ReferenceQueue 配合使用。</p>
<p>示例代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.ref.PhantomReference;</span><br><span class="line"><span class="keyword">import</span> java.lang.ref.ReferenceQueue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PhantomReferenceDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">MyObject</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyObject</span>();</span><br><span class="line">        ReferenceQueue&lt;MyObject&gt; queue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">        PhantomReference&lt;MyObject&gt; phantomRef = <span class="keyword">new</span> <span class="title class_">PhantomReference</span>&lt;&gt;(obj, queue);</span><br><span class="line"></span><br><span class="line">        obj = <span class="literal">null</span>; <span class="comment">// 删除强引用</span></span><br><span class="line">        System.gc(); <span class="comment">// 显式调用垃圾回收器</span></span><br><span class="line">        <span class="comment">// 此时对象已经被GC回收，但虚引用仍然存在</span></span><br><span class="line">        System.out.println(queue.remove()); <span class="comment">// 在GC后，会将虚引用加入到ReferenceQueue</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>适用场景：</p>
<p><strong>资源清理</strong>：例如，在Java中引用了本地（native）资源（如文件句柄、数据库连接、socket连接等），虚引用可以帮助在对象回收时执行清理工作。</p>
<p><strong>底层资源管理</strong>：如关闭操作系统的文件句柄、数据库连接等，在对象即将被回收时，可以通过虚引用确保相关资源被释放。</p>
<h4 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h4><h5 id="标记-清除-Mark-Sweep"><a href="#标记-清除-Mark-Sweep" class="headerlink" title="标记-清除 Mark-Sweep"></a>标记-清除 Mark-Sweep</h5><p>首先标记出所有需要回 收的对象，在标记完成后，统一回收掉所有被标记的对象</p>
<p>缺点：执行效率不稳定；产生大量的内存碎片</p>
<p><img src="/posts/935a6b06/%E6%A0%87%E8%AE%B0%E6%B8%85%E9%99%A4.png" alt="标记清除"></p>
<h5 id="标记-复制-Copying"><a href="#标记-复制-Copying" class="headerlink" title="标记-复制 Copying"></a>标记-复制 Copying</h5><p>将可用 内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着 的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉</p>
<p>优点：避免了内存碎片</p>
<p>缺点：可用内存是原来的一半，浪费空间</p>
<p><img src="/posts/935a6b06/%E6%A0%87%E8%AE%B0%E5%A4%8D%E5%88%B6.png" alt="标记复制"></p>
<p>在Young GC时采用标记复制算法</p>
<p>![Young GC](Young GC.png)</p>
<p>如此反复交换，当年龄达到16时，仍然存活的对象移至老年区</p>
<h5 id="标记-整理-Mark-Compact"><a href="#标记-整理-Mark-Compact" class="headerlink" title="标记-整理 Mark-Compact"></a>标记-整理 Mark-Compact</h5><p>标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可 回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存</p>
<p>缺点：如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用 程序才能进行，也就是STW （Stop The World）</p>
<p><img src="/posts/935a6b06/%E6%A0%87%E8%AE%B0%E6%95%B4%E7%90%86.png" alt="标记整理"></p>
<table>
<thead>
<tr>
<th>算法</th>
<th>内存碎片化</th>
<th>性能</th>
<th>空间利用率</th>
<th align="left">适用场景</th>
</tr>
</thead>
<tbody><tr>
<td>标记-清除</td>
<td>存在碎片</td>
<td>一般</td>
<td>高</td>
<td align="left">对空间要求较高的场景</td>
</tr>
<tr>
<td>标记-复制</td>
<td>无碎片</td>
<td>快</td>
<td>低</td>
<td align="left">新生代，短生命周期对象较多</td>
</tr>
<tr>
<td>标记-整理</td>
<td>无碎片</td>
<td>较慢</td>
<td>高</td>
<td align="left">老年代，长生命周期对象较多</td>
</tr>
</tbody></table>
<h4 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h4><table>
<thead>
<tr>
<th>收集器</th>
<th>类型</th>
<th>新生代&#x2F;老年代</th>
<th>算法</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody><tr>
<td>Serial</td>
<td>单线程</td>
<td>新生代</td>
<td>标记-复制</td>
<td>简单高效，适合单核环境</td>
<td>暂停时间长</td>
</tr>
<tr>
<td>ParNew</td>
<td>多线程</td>
<td>新生代</td>
<td>标记-复制</td>
<td>支持多核环境，与 CMS 兼容</td>
<td>暂停时间依然较长</td>
</tr>
<tr>
<td>Parallel Scavenge</td>
<td>多线程</td>
<td>新生代</td>
<td>标记-复制</td>
<td>吞吐量优先，自动调优</td>
<td>暂停时间较长</td>
</tr>
<tr>
<td>Serial Old</td>
<td>单线程</td>
<td>老年代</td>
<td>标记-整理</td>
<td>简单高效，与 Parallel Scavenge 兼容</td>
<td>暂停时间长</td>
</tr>
<tr>
<td>Parallel Old</td>
<td>多线程</td>
<td>老年代</td>
<td>标记-整理</td>
<td>高吞吐量，与 Parallel Scavenge 搭配</td>
<td>暂停时间长</td>
</tr>
<tr>
<td>CMS</td>
<td>多线程</td>
<td>老年代</td>
<td>标记-清除</td>
<td>低停顿，适合低延迟应用</td>
<td>内存碎片化，GC 开销高</td>
</tr>
<tr>
<td>G1</td>
<td>多线程</td>
<td>新生代+老年代</td>
<td>标记-整理</td>
<td>分区回收，低停顿，内存整理</td>
<td>实现复杂，调优较难</td>
</tr>
</tbody></table>
<h5 id="Serial收集器"><a href="#Serial收集器" class="headerlink" title="Serial收集器"></a>Serial收集器</h5><p>垃圾回收时，只有一个线程工作，所有其他线程暂停（”Stop The World”）。</p>
<p><img src="/posts/935a6b06/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="Serial收集器"></p>
<h5 id="ParNew收集器"><a href="#ParNew收集器" class="headerlink" title="ParNew收集器"></a>ParNew收集器</h5><p>实质上是Serial收集器的多线程并行版本</p>
<p><img src="/posts/935a6b06/ParNew%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="ParNew收集器"></p>
<h5 id="Parallel-Scavenge收集器"><a href="#Parallel-Scavenge收集器" class="headerlink" title="Parallel Scavenge收集器"></a>Parallel Scavenge收集器</h5><p>目标则是达到一个可控制的吞吐量(Throughput)</p>
<p>![Parallel Old收集器](Parallel Old收集器.png)</p>
<h5 id="Serial-Old收集器"><a href="#Serial-Old收集器" class="headerlink" title="Serial Old收集器"></a>Serial Old收集器</h5><p>Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器</p>
<p><img src="/posts/935a6b06/Serial%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="Serial收集器"></p>
<h5 id="Parallel-Old收集器"><a href="#Parallel-Old收集器" class="headerlink" title="Parallel Old收集器"></a>Parallel Old收集器</h5><p>Parallel Old是Parallel Scavenge收集器的老年代版本，与 Parallel Scavenge 收集器配合，适用于高吞吐量场景。</p>
<p>![Parallel Old收集器](Parallel Old收集器.png)</p>
<h5 id="CMS收集器"><a href="#CMS收集器" class="headerlink" title="CMS收集器"></a>CMS收集器</h5><p>是一种以获取最短回收停顿时间为目标的收集器</p>
<p>4步过程：</p>
<p>初始标记（CMS initial mark） - 只是标记一下GC Roots能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。</p>
<p>并发标记（CMS concurrent mark）-和用户线程一起工作，不需要暂停工作线程。标记全部可达对象。</p>
<p>重新标记（CMS remark）- 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。由于并发标记时，用户线程依然运行，因此在正式清理前，再做修正。</p>
<p>并发清除（CMS concurrent sweep） - 清除GCRoots不可达对象，和用户线程一起工作，不需要暂停工作线程。基于标记结果，直接清理对象</p>
<p><img src="/posts/935a6b06/CMS%E6%94%B6%E9%9B%86%E5%99%A8.png" alt="CMS收集器"></p>
<p><img src="/posts/935a6b06/%E8%80%81%E5%B9%B4%E5%8C%BA%E5%B9%B6%E5%8F%91%E6%B8%85%E7%90%86%E5%89%8D.png" alt="老年区并发清理前"></p>
<p><img src="/posts/935a6b06/%E8%80%81%E5%B9%B4%E5%8C%BA%E5%B9%B6%E5%8F%91%E6%B8%85%E7%90%86%E5%89%8D.png" alt="老年区并发清理后"></p>
<p><em>并发清理后大量内存被释放，但并没有被压缩</em></p>
<h5 id="G1收集器"><a href="#G1收集器" class="headerlink" title="G1收集器"></a>G1收集器</h5><h6 id="堆划分"><a href="#堆划分" class="headerlink" title="堆划分"></a>堆划分</h6><p>将整个内存堆区域分成大小相同的子区域Region，默认2048个分区；每个分区按需在年轻代和老年代之间切换</p>
<p>每 个Region的 大 小 可 以 通 过 参 数 -XX: G1HeapRegionSize 设 定，取值范围为1MB~32MB，且应为2的N次幂。而对于那些超过了整个Region容量的超级大对象， 将会被存放在N个连续的Humongous Region之中</p>
<p>![G1 堆划分](G1 堆划分-7623678.png)</p>
<p><strong>RSet（Remembered Set）</strong></p>
<p>记录了其它 Region 对当前 Region 的引用情况，这样回收某个Region时，不需要执行全堆扫描，只需扫描它的 RSet 就可以找到外部引用，来确定引用本分区内的对象是否存活，进而确定本分区内的对象存活情况</p>
<p><strong>Card Table</strong></p>
<p>它将每个 Region 进一步划分为更小的固定大小单位（通常 512 字节），称之为Card。Card的作用是标记某个内存区域中的对象是否有跨Region的引用。</p>
<p>CardTable是一个数据结构，通常是一个数组，其中的每个元素对应一个Card。每个Card用于跟踪其代表的内存块中的引用对象是否跨越了不同的Region。在垃圾回收时CardTable用于快速查询某个内存区域内的对象是否还有跨Region的引用。如果某个区域的对象引用了其他区域的对象，相关的Card就会标记为“脏”（Dirty），即该Card区域有跨Region的引用。CardTable保存了这些脏标记，垃圾回收时G1会根据CardTable中脏标记的Card来检查哪些Region中的对象可能会被其他Region引用，从而避免扫描整个堆</p>
<p><img src="/posts/935a6b06/Card.png" alt="Card"></p>
<p>在回收时，Card Table 帮助 Rset 确定哪些区域可能存在引用，从而减少扫描工作。</p>
<p><img src="/posts/935a6b06/%E8%84%8F%E5%8D%A1.png" alt="脏卡"></p>
<p><strong>写屏障</strong></p>
<p>更新Card状态使用了写屏障技术，当写屏障捕获到跨对象的引用时，会将涉及的Card标记为脏，同时将他们放入到一个脏队列中，JVM会通过单独的线程，定期读取脏队列中的数据，更新记忆集。</p>
<p><img src="/posts/935a6b06/%E5%86%99%E5%B1%8F%E9%9A%9C.png" alt="写屏障"></p>
<p><strong>HashTable</strong></p>
<p><strong>RSet（Remembered Set）</strong> 的底层实现中采用了 <strong>HashTable</strong>（或者类似的哈希结构）来组织和存储数据。</p>
<p>一个Region可能有多个线程在并发修改，因此也可能会并发修改 RSet。为避免冲突，G1垃圾回收器进一步把 RSet 划分成了多个 HashTable，每个线程都在各自的 HashTable 里修改。最终，从逻辑上来说，RSet 就是这些 HashTable 的集合。哈希表是实现 RSet 的一种常见方式</p>
<p>HashTable 的 Key 是别的 Region 的起始地址，Value是一个集合，里面的元素是Card Table的Index。它记录哪些其他 Region 对当前 Region 中的对象有引用</p>
<p>假设有三个 Region：<strong>Region A</strong>、<strong>Region B</strong> 和 <strong>Region C</strong>，它们的引用关系如下：</p>
<ul>
<li>Region A 的对象 <code>a1</code> 引用了 Region B 的对象 <code>b1</code>，a1位于卡片Card X。</li>
<li>Region A 的对象 <code>a2</code> 引用了 Region C 的对象 <code>c1</code>，a2位于卡片Card Z。</li>
</ul>
<p><strong>Region B 的 RSet</strong>：</p>
<ul>
<li>记录 Region A 对它的引用。</li>
<li>HashTable 中可能的键值对结构</li>
</ul>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Key</span><span class="operator">:</span> <span class="built_in">Region</span> <span class="variable">A</span></span><br><span class="line"><span class="built_in">Value</span><span class="operator">:</span> <span class="punctuation">[</span><span class="variable">Card</span> <span class="variable">X</span><span class="operator">,</span> <span class="variable">Card</span> <span class="variable">Y</span><span class="punctuation">]</span> （标记 <span class="built_in">Region</span> <span class="variable">A</span> 中的哪些卡片对 <span class="built_in">Region</span> <span class="variable">B</span> 有引用）</span><br></pre></td></tr></table></figure>

<p><strong>Region C 的 RSet</strong>：</p>
<ul>
<li>记录 Region A 对它的引用。</li>
<li>HashTable 中可能的键值对结构</li>
</ul>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Key</span><span class="operator">:</span> <span class="built_in">Region</span> <span class="variable">A</span></span><br><span class="line"><span class="built_in">Value</span><span class="operator">:</span> <span class="punctuation">[</span><span class="variable">Card</span> <span class="variable">Z</span><span class="punctuation">]</span> （标记 <span class="built_in">Region</span> <span class="variable">A</span> 中的某个卡片对 <span class="built_in">Region</span> <span class="built_in">C</span> 有引用）</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h6 id="Young-GC"><a href="#Young-GC" class="headerlink" title="Young GC"></a>Young GC</h6><p>采用了三种关键技术：RSet、CardTable、写屏障</p>
<p>当G1触发Yong GC时，只会扫描年轻代区域的对象，从GC Root根对象出发，很容易扫描出年轻代的对象及引用的其他年轻代的对象。</p>
<p>如果年轻代的对象被老年代对象引用了，通过RememberSet来解决，回收器会将RSet中的对象也加入到GC Root中，有效避免年轻代的对象被错误回收</p>
<p>![Young GC in G1](Young GC in G1.png)</p>
<p>![End of Young GC with G1](End of Young GC with G1.png)</p>
<ul>
<li><p>Young Generation内存空间由不连续的区域组成，使得在需要时可以轻松调整大小</p>
</li>
<li><p>在Young GC时会STW，应用线程会停止</p>
</li>
<li><p>Young GC使用多个线程并行完成</p>
</li>
<li><p>存活对象会被复制到另外的survivor regions或old generation regions</p>
</li>
</ul>
<h6 id="Mixed-GC"><a href="#Mixed-GC" class="headerlink" title="Mixed GC"></a>Mixed GC</h6><p><strong>初始标记</strong></p>
<p><img src="/posts/935a6b06/%E5%88%9D%E5%A7%8B%E6%A0%87%E8%AE%B0.png" alt="初始标记"></p>
<p>标记出所有 GC Roots 节点以及直接可达的对象，此阶段会STW，但耗时很短</p>
<p><strong>并发标记</strong></p>
<p><img src="/posts/935a6b06/%E5%B9%B6%E5%8F%91%E6%A0%87%E8%AE%B0.png" alt="并发标记"></p>
<p>空区域被标记为X  将会在重新标记阶段被删除</p>
<p>并发阶段采用三色标记法</p>
<p><em>三色标记法</em></p>
<p>白色：表示该对象还没被访问过,可能是垃圾，尚未标记为存活；初始时，所有对象默认为白色</p>
<p>灰色：表示对象已经被访问过，但它引用对象还未被访问，该对象是存活的，需要进一步扫描其引用的对象，是一个过渡颜色，最终都会被标记为黑色</p>
<p>黑色：该对象和其引用的对象都被扫描过，且这些对象都标记为存活，不再需要进一步扫描</p>
<p><img src="/posts/935a6b06/%E4%B8%89%E8%89%B2%E6%A0%87%E8%AE%B0.png" alt="三色标记"></p>
<p>三色标记法缺点：漏标</p>
<p>在remark过程中，黑色指向了白色，如果不对黑色重新扫描，则会漏标，导致白色D对象被当作没有新引用指向从而回收掉</p>
<p><img src="/posts/935a6b06/%E6%BC%8F%E6%A0%87.png" alt="漏标"></p>
<p>产生漏标问题的两个条件：</p>
<p>1.黑色对象指向了白色对象</p>
<p>2.灰色对象指向白色对象的引用消失</p>
<p>解决漏标问题，打破连个条件之一即可</p>
<ol>
<li><p>跟踪黑指向白的增加</p>
<p>incremental update；增量更新，关注引用的增加，把黑色重新标记为灰色，下次重新扫描属性。CMS采用该方法</p>
</li>
<li><p>记录灰指向白的消失</p>
<p>SATB snapshot at the beginning： 关注引用的删除，当灰指向白消失时，要把这个引用推到GC的堆栈，保证白还能被扫描到。G1采用该方法，是因为SATB可以和RSet相配合，RSet记录了其他对象指向自己的引用，当灰色指向白色消失时，引用会push到堆盏，由于RSet存在，不需要扫描整个堆去查找指向白色的引用，效率比较高</p>
</li>
</ol>
<p><strong>SATB</strong></p>
<p>意为“开始时快照”，核心思想是在并发标记的过程中创建堆内存的快照，确保即使应用线程修改了引用关系，回收器也能正确标记对象</p>
<p>SATB的主要步骤：</p>
<p>1.初始快照的创建</p>
<p>​	在并发标记的开始阶段，会记录标记时刻的快照，也就是GC Roots的对象快照图</p>
<p>2.并发标记过程</p>
<p>​	遍历快照中的对象，灰色对象会递归扫描它们引用的对象，直到所有存活对象都变成黑色</p>
<p>3.对象引用变更处理</p>
<p>​	在并发标记阶段，对象的引用可能会被修改。G1使用写屏障来捕捉引用的变化，将引用的对象放入一个待处理的SATB队列，该队列是	每个线程独有的，最终会汇总到全局的SATB队列</p>
<p>4.重新标记和处理跨代引用</p>
<p>​	处理并发标记的引用变化，扫描跨代引用，确保所有存活对象被标记</p>
<p><img src="/posts/935a6b06/SATB.png" alt="SATB"></p>
<p>5.标记完成与垃圾回收</p>
<p><strong>重新标记</strong></p>
<p><img src="/posts/935a6b06/%E9%87%8D%E6%96%B0%E6%A0%87%E8%AE%B0.png" alt="重新标记"></p>
<p>重新标记阶段是为了修正在并发标记期间，因应用程序继续运作而导致标记产生变动的那一部分标记记录，空区域被删除和回收，计算所有区域的区域活跃度</p>
<p><strong>清理</strong></p>
<p><img src="/posts/935a6b06/%E6%B8%85%E9%99%A4%E9%98%B6%E6%AE%B5.png" alt="清除阶段"></p>
<p>选择活跃度最低的区域，这些区域可以最快被收集，且同时和年轻代一起收集</p>
<p><strong>清除后</strong></p>
<p><img src="/posts/935a6b06/%E6%B8%85%E9%99%A4%E5%90%8E.png" alt="清除后"></p>
<p>清理阶段也会暂停用户线程，在最终标记阶段完成之后，G1垃圾回收器会整理<code>Region</code>区域，调整对应的记忆集，若识别到某个<code>Region</code>不存在任何存活对象时，会直接清理掉该<code>Region</code>，释放内存</p>
<p>链接 <a href="http://ulemony.github.io/posts/935a6b06.html">http://ulemony.github.io/posts/935a6b06.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/posts/4ebad2d4.html</url>
    <content><![CDATA[<h1 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h1><h2 id="Pom依赖"><a href="#Pom依赖" class="headerlink" title="Pom依赖"></a>Pom依赖</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;!--集成redis--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">2.1</span><span class="number">.7</span>.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--序列化--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.2</span><span class="number">.54</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--lombok,自动生成set、get等方法--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.18</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义封装RedisTemplate"><a href="#自定义封装RedisTemplate" class="headerlink" title="自定义封装RedisTemplate"></a>自定义封装RedisTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RedisUtils类"><a href="#RedisUtils类" class="headerlink" title="RedisUtils类"></a>RedisUtils类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String keys)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.keys(keys);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入, 不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().setIfAbsent(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间,不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/4ebad2d4.html">http://ulemony.github.io/posts/4ebad2d4.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring之Bean的生命周期</title>
    <url>/posts/c7e03167.html</url>
    <content><![CDATA[<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><h3 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1.实例化"></a>1.实例化</h3><h4 id="实例化前"><a href="#实例化前" class="headerlink" title="实例化前"></a>实例化前</h4><p>实例化前,会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessBeforeInstantiation方法，可以用于动态地创建或替换 bean 实例，从而实现更高级的定制和控制。</p>
<h4 id="实例化前的部分源码"><a href="#实例化前的部分源码" class="headerlink" title="实例化前的部分源码"></a>实例化前的部分源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">mbdToUse</span> <span class="operator">=</span> mbd;</span><br><span class="line">        Class&lt;?&gt; resolvedClass = <span class="built_in">this</span>.resolveBeanClass(mbd, beanName, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (resolvedClass != <span class="literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            mbdToUse = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(mbd);</span><br><span class="line">            mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mbdToUse.prepareMethodOverrides();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object beanInstance;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//实例化前</span></span><br><span class="line">            beanInstance = <span class="built_in">this</span>.resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">            <span class="keyword">if</span> (beanInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> beanInstance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//创建对象</span></span><br><span class="line">            beanInstance = <span class="built_in">this</span>.doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ImplicitlyAppearedSingletonException | BeanCreationException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var7;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Class&lt;?&gt; targetType = <span class="built_in">this</span>.determineTargetType(beanName, mbd);</span><br><span class="line">                <span class="keyword">if</span> (targetType != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bean = <span class="built_in">this</span>.applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                    <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">                        bean = <span class="built_in">this</span>.applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mbd.beforeInstantiationResolved = bean != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var3.next();</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">              <span class="comment">//会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessBeforeInstantiation方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例化时的部分源码"><a href="#实例化时的部分源码" class="headerlink" title="实例化时的部分源码"></a>实例化时的部分源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = (BeanWrapper)<span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//创建bean实例，推断构造方法</span></span><br><span class="line">            instanceWrapper = <span class="built_in">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//创建bean</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">        Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">        <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">            mbd.resolvedTargetType = beanType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, var17);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.addSingletonFactory(beanName, () -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//属性填充</span></span><br><span class="line">            <span class="built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">          <span class="comment">//初始化bean</span></span><br><span class="line">            exposedObject = <span class="built_in">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var18 <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException)var18;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> <span class="built_in">this</span>.getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; <span class="built_in">this</span>.hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = <span class="built_in">this</span>.getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(dependentBeans.length);</span><br><span class="line">                    String[] var12 = dependentBeans;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var13</span> <span class="operator">=</span> dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="number">0</span>; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">dependentBean</span> <span class="operator">=</span> var12[var14];</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">this</span>.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName, <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">            <span class="keyword">return</span> exposedObject;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, var16);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-属性赋值"><a href="#2-属性赋值" class="headerlink" title="2.属性赋值"></a>2.属性赋值</h3><p>在赋值的过程中会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessAfterInstantiation方法，进行一些额外的控制或自定义操作。如果返回 <code>false</code>，则表示中断属性注入过程。</p>
<p>实现InstantiationAwareBeanPostProcessor接口重写postProcessProperties方法，在bean实例化后，属性注入前，可以根据属性描述，动态的新增，删除，修改一些属性。</p>
<p>属性填充源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bw == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">                    <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var5.next();</span><br><span class="line">                    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                        <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                 <span class="comment">//如果后置处理器存在且其中任何一个的 postProcessAfterInstantiation 方法返回 false，则中断属性注入过程。    </span></span><br><span class="line">                        <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                            continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (continueWithPropertyPopulation) &#123;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span> || mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="type">MutablePropertyValues</span> <span class="variable">newPvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>((PropertyValues)pvs);</span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    pvs = newPvs;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">hasInstAwareBpps</span> <span class="operator">=</span> <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">needsDepCheck</span> <span class="operator">=</span> mbd.getDependencyCheck() != <span class="number">0</span>;</span><br><span class="line">                PropertyDescriptor[] filteredPds = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line">                        pvs = mbd.getPropertyValues();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Iterator</span> <span class="variable">var9</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">                        <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var9.next();</span><br><span class="line">                        <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                            <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                            <span class="type">PropertyValues</span> <span class="variable">pvsToUse</span> <span class="operator">=</span> ibp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                            <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    filteredPds = <span class="built_in">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                                &#125;</span><br><span class="line">                              <span class="comment">//执行postProcessProperties方法</span></span><br><span class="line"></span><br><span class="line">                                pvsToUse = ibp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                                <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            pvs = pvsToUse;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">                        filteredPds = <span class="built_in">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.checkDependencies(beanName, mbd, filteredPds, (PropertyValues)pvs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pvs != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="comment">//属性最终填充</span></span><br><span class="line">                    <span class="built_in">this</span>.applyPropertyValues(beanName, mbd, bw, (PropertyValues)pvs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><h4 id="初始化前"><a href="#初始化前" class="headerlink" title="初始化前"></a>初始化前</h4><p>初始化前会处理Aware回调，执行invokeAwareMethods(beanName, bean)方法，使用 <code>Aware</code> 回调接口获取容器的名称、类加载器和工厂信息，以便在 bean 内部执行定制的逻辑。</p>
<p>然后执行BeanPostProcessor的postProcessBeforeInitialization方法，这允许开发人员在 bean 初始化前介入 bean 的创建过程，执行一些自定义逻辑，例如初始化前的数据校验。这是 Spring 容器提供的一个非常有用的扩展点，用于实现各种定制和增强功能。</p>
<h4 id="初始化时"><a href="#初始化时" class="headerlink" title="初始化时"></a>初始化时</h4><p>实现InitializingBean的afterPropertiesSet()方法</p>
<p>执行自定义的初始化方法</p>
<h4 id="初始化后"><a href="#初始化后" class="headerlink" title="初始化后"></a>初始化后</h4><p>执行BeanPostProcessor的postProcessAfterInitialization方法，可以进行AOP等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">           AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">               <span class="built_in">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;, <span class="built_in">this</span>.getAccessControlContext());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">       <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">         <span class="comment">//执行BeanPostProcessor的postProcessBeforeInitialization方法</span></span><br><span class="line">           wrappedBean = <span class="built_in">this</span>.applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>, beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, var6);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">           wrappedBean = <span class="built_in">this</span>.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> wrappedBean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeAwareMethods</span><span class="params">(String beanName, Object bean)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">               ((BeanNameAware)bean).setBeanName(beanName);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">               <span class="type">ClassLoader</span> <span class="variable">bcl</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanClassLoader();</span><br><span class="line">               <span class="keyword">if</span> (bcl != <span class="literal">null</span>) &#123;</span><br><span class="line">                   ((BeanClassLoaderAware)bean).setBeanClassLoader(bcl);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">               ((BeanFactoryAware)bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">isInitializingBean</span> <span class="operator">=</span> bean <span class="keyword">instanceof</span> InitializingBean;</span><br><span class="line">       <span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="literal">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">&quot;afterPropertiesSet&quot;</span>))) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">               <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Invoking afterPropertiesSet() on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                       ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;, <span class="built_in">this</span>.getAccessControlContext());</span><br><span class="line">               &#125; <span class="keyword">catch</span> (PrivilegedActionException var6) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> var6.getException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//执行InitializingBean的afterPropertiesSet()方法</span></span><br><span class="line">               ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mbd != <span class="literal">null</span> &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> mbd.getInitMethodName();</span><br><span class="line">           <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp; (!isInitializingBean || !<span class="string">&quot;afterPropertiesSet&quot;</span>.equals(initMethodName)) &amp;&amp; !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">             <span class="comment">//执行自定义的方法</span></span><br><span class="line">               <span class="built_in">this</span>.invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"></span><br><span class="line">        Object current;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator(); var4.hasNext(); result = current) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (BeanPostProcessor)var4.next();</span><br><span class="line">            current = processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"></span><br><span class="line">        Object current;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator(); var4.hasNext(); result = current) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (BeanPostProcessor)var4.next();</span><br><span class="line">            current = processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-销毁"><a href="#4-销毁" class="headerlink" title="4.销毁"></a>4.销毁</h3><p>将所有容器中的单例bean相关信息移除，回调所有相关的后置处理器和bean的销毁方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">           <span class="type">Iterator</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.beanPostProcessors.iterator();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">               <span class="type">DestructionAwareBeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (DestructionAwareBeanPostProcessor)var1.next();</span><br><span class="line">               processor.postProcessBeforeDestruction(<span class="built_in">this</span>.bean, <span class="built_in">this</span>.beanName);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.invokeDisposableBean) &#123;</span><br><span class="line">           <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">               logger.trace(<span class="string">&quot;Invoking destroy() on bean with name &#x27;&quot;</span> + <span class="built_in">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">                   AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                       ((DisposableBean)<span class="built_in">this</span>.bean).destroy();</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;, <span class="built_in">this</span>.acc);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//实现DisposableBean接口的destoy()方法</span></span><br><span class="line">                   ((DisposableBean)<span class="built_in">this</span>.bean).destroy();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Invocation of destroy method failed on bean with name &#x27;&quot;</span> + <span class="built_in">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">               <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                   logger.info(msg, var3);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   logger.info(msg + <span class="string">&quot;: &quot;</span> + var3);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.destroyMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeCustomDestroyMethod(<span class="built_in">this</span>.destroyMethod);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.destroyMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">Method</span> <span class="variable">methodToCall</span> <span class="operator">=</span> <span class="built_in">this</span>.determineDestroyMethod(<span class="built_in">this</span>.destroyMethodName);</span><br><span class="line">           <span class="keyword">if</span> (methodToCall != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">//自定义的销毁方法</span></span><br><span class="line">               <span class="built_in">this</span>.invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/c7e03167.html">http://ulemony.github.io/posts/c7e03167.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
