<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dockerfile用法</title>
    <url>/posts/387270af.html</url>
    <content><![CDATA[<h2 id="Dockerfile用法"><a href="#Dockerfile用法" class="headerlink" title="Dockerfile用法"></a>Dockerfile用法</h2><h3 id="常见配置"><a href="#常见配置" class="headerlink" title="常见配置"></a>常见配置</h3><p>From XXX（基于什么镜像）<br>WORKDIR（指定shell语句运行在那个路径下）<br>COPY（将宿主机的文件拷贝到某路径下）<br>RUN（运行shell语句，只要构建就会运行，如echo 321 &gt;&gt; 1.txt）<br>CMD （指定镜像启动运行的脚本，只有容器真正运行的时候才会运行的脚本，执行后容器的生命周期即结束，且一般为阻塞式语句，如tail语句）</p>
<p>一般语句为：<br>FROM WORKDIR COPY-ADD RUN CMD-ENTRYPOINT<br>ENTRYPOINT非json则以ENTRYPOT为准，如果ENTRYPOINT和CMD都是JSON则ENTRYPOINT+CMD拼接成shell</p>
<p>EXPOSE—暴露镜像的指定端口<br>VOLUME—指定映射文件<br>ENV—指定doker的环境变量，运行时一直生效<br>ARG—构建参数，运行时无效，可以构建时候临时修改变量<br>LABEL—指定元数据，便于找到docker<br>ONBUILD—当前镜像构建的时候不会执行，基于当前镜像的镜像去构建的时候才会执行<br>STOPSIGNAL—指定容器使用什么信号，一般指定信号名<br>HEALTHCHECK—检查容易的健康状态<br>SHELL—指定linux为&#x2F;bin&#x2F;sh，windows为cmd</p>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line">LABEl k=&quot;v&quot; k1=&quot;v1&quot;</span><br><span class="line">WORKDIR /app</span><br><span class="line">COPY src/ /app</span><br><span class="line">RUN echo helloword &gt;&gt; 1.txt</span><br><span class="line">ARG B=11</span><br><span class="line">ONBUILD ENV C=100</span><br><span class="line">CMD echo $C</span><br></pre></td></tr></table></figure>

<h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>使用Dockerfile构建镜像：docker build -t &lt;存放Dockerfile的文件夹&gt;</p>
<p>例如：在当前文件夹构建名为test的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t test .</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/387270af.html">http://ulemony.github.io/posts/387270af.html</a> </p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker常见命令</title>
    <url>/posts/a70288e8.html</url>
    <content><![CDATA[<h2 id="Docker常见命令"><a href="#Docker常见命令" class="headerlink" title="Docker常见命令"></a>Docker常见命令</h2><p>添加阿里云镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>安装命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure>

<p>添加当前用户到docker用户组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $USER （需注销）</span><br><span class="line"></span><br><span class="line">newgrp docker （立即生效）</span><br></pre></td></tr></table></figure>

<p>pull nginx 镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull nginx（等效于nginx:latest）</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -【d】（后台运行不阻塞shell） 【-p 80:80】（指定容器端口映射，内部：外部） nginx</span><br></pre></td></tr></table></figure>

<p>查看正在运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<p>查看本地容器ID</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a </span><br></pre></td></tr></table></figure>

<p>删除容器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rm -f &lt;container id(不用打全，前缀区分)&gt;</span><br></pre></td></tr></table></figure>

<p>进入bash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker exec -it &lt;container id(不用打全，前缀区分)&gt; bash</span><br></pre></td></tr></table></figure>

<p>commit镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit &lt;container id(不用打全，前缀区分)&gt; &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>查看镜像列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker images （刚才commit的镜像）</span><br></pre></td></tr></table></figure>

<p>使用运行刚才commit的镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -d &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>使用Dockerfile构建镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;name&gt; &lt;存放Dockerfile的文件夹&gt;</span><br></pre></td></tr></table></figure>

<p>删除镜像</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;name&gt;</span><br></pre></td></tr></table></figure>

<p>保存为tar</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker save &lt;name&gt; &gt; &lt;tar name&gt;</span><br></pre></td></tr></table></figure>

<p>从tar加载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker load &lt; &lt;tar name&gt;</span><br></pre></td></tr></table></figure>

<p>一些启动参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">后台运行容器：-d</span><br><span class="line"></span><br><span class="line">容器内外端口映射：-p 内部端口号:外部端口号</span><br><span class="line"></span><br><span class="line">目录映射：-v &#x27;dir name&#x27; : &lt;dir&gt;</span><br><span class="line"></span><br><span class="line">指定映像版本：&lt;name&gt;:&lt;ver&gt;</span><br></pre></td></tr></table></figure>

<p>Docker容器中的文件拷贝至本地</p>
<p>#格式 docker cp CONTAINER ID:容器目录 本地目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo docker cp 52ea915e6527:/aha /home/aha2</span><br></pre></td></tr></table></figure>

<p>本地文件拷贝至容器</p>
<p>#格式 docker cp 本地路径 CONTAINER ID:容器目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker cp license.dat 52ea915e6527:/home</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/a70288e8.html">http://ulemony.github.io/posts/a70288e8.html</a> </p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Jvm指令和工具</title>
    <url>/posts/817f8310.html</url>
    <content><![CDATA[<h2 id="Jvm指令和工具"><a href="#Jvm指令和工具" class="headerlink" title="Jvm指令和工具"></a>Jvm指令和工具</h2><h3 id="jps"><a href="#jps" class="headerlink" title="jps"></a>jps</h3><p> 查看java进程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lee<span class="meta">@lee</span>-mac ~ % jps</span><br><span class="line"><span class="number">63266</span> miniLegionInit.jar</span><br><span class="line"><span class="number">63964</span> Jps</span><br></pre></td></tr></table></figure>

<h2 id="jconsole"><a href="#jconsole" class="headerlink" title="jconsole"></a>jconsole</h2><p>Java监视和管理平台</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jconsole</span><br></pre></td></tr></table></figure>

<p><img src="/posts/817f8310/%E5%88%9D%E5%A7%8B%E5%8C%96%E7%95%8C%E9%9D%A2.png" alt="初始化界面"></p>
<p><img src="/posts/817f8310/%E8%BF%90%E8%A1%8C%E7%95%8C%E9%9D%A2.png" alt="运行界面"></p>
<h2 id="jstat"><a href="#jstat" class="headerlink" title="jstat"></a>jstat</h2><p>查看内存</p>
<h3 id="常用命令1"><a href="#常用命令1" class="headerlink" title="常用命令1"></a>常用命令1</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcutil pid interval</span><br><span class="line">pid:进程</span><br><span class="line">interval: 间隔时间</span><br><span class="line">lee@lee-mac ~ % jstat -gcutil 63266 1000 </span><br><span class="line">  S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br><span class="line">  0.00   0.00  88.29  14.70  95.12  93.41     10    0.079     2    0.202    0.281</span><br></pre></td></tr></table></figure>

<h3 id="常用命令2"><a href="#常用命令2" class="headerlink" title="常用命令2"></a>常用命令2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gc pid</span><br><span class="line">lee@lee-mac ~ % jstat -gc 63266 </span><br><span class="line"> S0C    S1C    S0U    S1U      EC       EU        OC         OU       MC     MU    CCSC   CCSU   YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">6656.0 7680.0  0.0    0.0   71680.0  63287.4   90624.0    13323.2   35496.0 33765.1 4608.0 4304.3     10    0.079   2      0.202    0.281</span><br></pre></td></tr></table></figure>

<h3 id="常用命令3"><a href="#常用命令3" class="headerlink" title="常用命令3"></a>常用命令3</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcnew pid</span><br><span class="line">lee@lee-mac ~ % jstat -gcnew 63266 </span><br><span class="line"> S0C    S1C    S0U    S1U   TT MTT  DSS      EC       EU     YGC     YGCT  </span><br><span class="line">6656.0 7680.0    0.0    0.0  1  15 7680.0  71680.0  63287.4     10    0.079</span><br></pre></td></tr></table></figure>

<h3 id="常用命令4"><a href="#常用命令4" class="headerlink" title="常用命令4"></a>常用命令4</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstat -gcold pid</span><br><span class="line">lee@lee-mac ~ % jstat -gcold 63266 </span><br><span class="line">   MC       MU      CCSC     CCSU       OC          OU       YGC    FGC    FGCT     GCT   </span><br><span class="line"> 35496.0  33765.1   4608.0   4304.3     90624.0     13323.2     10     2    0.202    0.281</span><br></pre></td></tr></table></figure>

<h2 id="jstack"><a href="#jstack" class="headerlink" title="jstack"></a>jstack</h2><p>分析线程运行状况</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jstack pid</span><br></pre></td></tr></table></figure>

<p>但是jconsole已经集成jstack和jstat的功能</p>
<h2 id="jmap"><a href="#jmap" class="headerlink" title="jmap"></a>jmap</h2><p>可以把堆情况dump下来 然后用软件查看文件信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmap -dump:file=a pid</span><br><span class="line">例如</span><br><span class="line">jmap -dump:file=a 63266</span><br></pre></td></tr></table></figure>

<p>打印当前进程堆内存信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmap -heap pid</span><br></pre></td></tr></table></figure>

<h2 id="VisualVM"><a href="#VisualVM" class="headerlink" title="VisualVM"></a>VisualVM</h2><p>java虚拟机监控工具</p>
<h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>1.进入jdk安装目录的bin目录，双击打开jvisualvm</p>
<p>2.终端模式下输入命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jvisualvm</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/817f8310.html">http://ulemony.github.io/posts/817f8310.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>GPT-4体验</title>
    <url>/posts/e0a37648.html</url>
    <content><![CDATA[<h1 id="GPT-4"><a href="#GPT-4" class="headerlink" title="GPT-4"></a>GPT-4</h1><p>今天openai发布了目前为止AI领域最先进的人工智能系统——GPT-4</p>
<p><img src="/posts/e0a37648/GPT-4.jpg" alt="head"></p>
<p>于是申请注册体验，由于人太多，估计要等几个工作日，期待能通过申请</p>
<h2 id="GPT-4可以做什么"><a href="#GPT-4可以做什么" class="headerlink" title="GPT-4可以做什么"></a>GPT-4可以做什么</h2><h3 id="1-Creativity-创造力"><a href="#1-Creativity-创造力" class="headerlink" title="1.Creativity 创造力"></a>1.Creativity 创造力</h3><p>它可以生成、编辑和迭代用户进行创意和技术写作任务，例如创作歌曲、编写剧本或学习用户的写作风格。</p>
<p>例如我们输入要求让它解释灰姑娘的故事情节，它会根据要求生成相应的结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">Explain the plot of Cinderella in a sentence where each word has to begin with the next letter in the alphabet from A to Z, without repeating any letters.</span><br><span class="line">用一个句子解释灰姑娘的情节，其中每个单词必须以字母表中从 A 到 Z 的下一个字母开头，不要重复任何字母</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line"></span><br><span class="line">A beautiful Cinderella, dwelling eagerly, finally gains happiness; inspiring jealous kin, love magically nurtures opulent prince; quietly rescues, slipper triumphs, uniting very wondrously, xenial youth zealously.</span><br><span class="line">美丽的灰姑娘，急切地栖息着，终于获得了幸福;激发嫉妒的亲人，爱情神奇地培育出华丽的王子;悄悄地营救，拖鞋胜利，团结得非常奇妙，青春热心。</span><br></pre></td></tr></table></figure>

<p>这个功能对于写作辅助可谓一大利器，对于写论文、高考作文训练真是大大滴好呀！</p>
<h3 id="2-Visual-input-图像输入"><a href="#2-Visual-input-图像输入" class="headerlink" title="2.Visual input  图像输入"></a>2.Visual input  图像输入</h3><p>GPT-4 根据输入的图像并生成标题、分类和分析，例如我们输入一张图片，询问它可以利用图片中的原材料做成什么食物</p>
<p>它会识别图片内容并给出建议：煎饼或华夫饼&#x2F;薄饼&#x2F;法式吐司&#x2F;煎蛋或煎蛋饼    （没有广东肠粉差评～-～）</p>
<p>如果你对有选择困难症，可以拍下自家的冰箱，让chatgt告诉你今天吃什么</p>
<p>PS：很好奇发一张九转大肠的图片给chatgt，它给的食谱会不会保留大肠原来的味道～-～</p>
<p><img src="/posts/e0a37648/food.jpg" alt="food"></p>
<h3 id="3-Longer-context-更长的文字处理"><a href="#3-Longer-context-更长的文字处理" class="headerlink" title="3.Longer context 更长的文字处理"></a>3.Longer context 更长的文字处理</h3><p>GPT-4 能够处理超过 25，000 字的文本，允许使用长篇内容创建、扩展对话以及文档搜索和分析等用例。</p>
<p>打个比方，附上蕾哈娜的维基百科信息网址，让它分析蕾哈娜在超级碗中的表现以及过人之处：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line">[Text from: https://en.wikipedia.org/wiki/Rihanna]</span><br><span class="line"></span><br><span class="line">Describe her Super Bowl performance and what made it special.</span><br></pre></td></tr></table></figure>

<p>GPT-4会从长达几万字的维基百科介绍中提炼出如下结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line">Rihanna&#x27;s Super Bowl LVII halftime show performance was special for a number of reasons. For one, it marked her first live performance in over five years, and it was her first time headlining the Super Bowl halftime show. Additionally, she made history by becoming the first person to perform at the Super Bowl while pregnant. The show itself was critically acclaimed, with many praising her high-energy performance and impressive vocals. It also garnered a massive viewership, becoming the second most-watched halftime show in history.</span><br><span class="line">蕾哈娜的超级碗LVII中场秀表演很特别，原因有很多。首先，这是她五年多来的第一次现场表演，这是她第一次在超级碗中场秀中担任头条新闻。此外，她创造了历史，成为第一个在怀孕期间在超级碗上表演的人。该节目本身广受好评，许多人称赞她的高能量表演和令人印象深刻的人声。它还获得了大量的收视率，成为历史上收视率第二高的中场秀。</span><br></pre></td></tr></table></figure>



<h2 id="GPT-4的亮点"><a href="#GPT-4的亮点" class="headerlink" title="GPT-4的亮点"></a>GPT-4的亮点</h2><p>GPT-4在其先进的推理能力方面超过了上一个版本ChatGPT。</p>
<p>例如同一个问题，GPT-4比ChatGPT给出了更加精准的答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Input</span><br><span class="line"></span><br><span class="line">Andrew is free from 11 am to 3 pm, Joanne is free from noon to 2 pm and then 3:30 pm to 5 pm. Hannah is available at noon for half an hour, and then 4 pm to 6 pm. What are some options for start times for a 30 minute meeting for Andrew, Hannah, and Joanne?安德鲁从上午 11 点到下午 3 点有空，乔安妮从中午到下午 2 点，然后下午 3：30 到下午 5 点自由。汉娜在中午半小时可用，然后下午4点到6点。对于安德鲁、汉娜和乔安妮来说，30 分钟会议的开始时间有哪些选择？</span><br></pre></td></tr></table></figure>



<p>ChatGPT给出的答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Output</span><br><span class="line">Here is a list of their availability:</span><br><span class="line">- Andrew: 11 am to 3 pm</span><br><span class="line">- Joanne: noon to 2 pm, and 3:30 pm to 5 pm</span><br><span class="line">- Hannah: noon to 12:30 pm, and 4 pm to 6 pm</span><br><span class="line"></span><br><span class="line">Based on their availability, there is a 30-minute window where all three of them are available, which is from 4 pm to 4:30 pm. So, the meeting can be scheduled at 4 pm.</span><br><span class="line">以下是它们的可用性列表：</span><br><span class="line">- 安德鲁：上午 11 点至下午 3 点</span><br><span class="line">- 乔安妮：中午至下午 2 点，下午 3：30 至下午 5 点</span><br><span class="line">- 汉娜：中午至下午 12：30，下午 4 点至下午 6 点</span><br><span class="line"></span><br><span class="line">根据他们的可用性，有一个 30 分钟的窗口，所有三个都可用，即下午 4 点到 4：30。因此，会议可以安排在下午 4 点。</span><br></pre></td></tr></table></figure>



<p>GPT-4给出的答案</p>
<p>Andrew: 11 am - 3 pm Joanne: 12 pm - 2 pm, 3:30 pm - 5 pm Hannah: 12 pm - 12:30 pm, 4 pm - 6 pm Common availability for a 30-minute meeting: 12 pm - 12:30 pm<br>安德鲁：上午 11 点至下午 3 点<br>乔安妮：中午 12 点至下午 2 点，下午 3：30 至下午 5 点<br>汉娜：中午12时至下午12时30分，下午4时至下午6时</p>
<p>30 分钟会议的通用可用性：中午 12 点至下午 12：30</p>
<h2 id="人类未来的诗歌"><a href="#人类未来的诗歌" class="headerlink" title="人类未来的诗歌"></a>人类未来的诗歌</h2><p>最后附上一首CHATGPT写的诗歌，人工智能在将会彻底颠覆人类社会的各个方面，希望这是写给人类的颂歌</p>
<p><img src="/posts/e0a37648/poem.jpg" alt="poem"></p>
<p>链接 <a href="http://ulemony.github.io/posts/e0a37648.html">http://ulemony.github.io/posts/e0a37648.html</a> </p>
]]></content>
      <categories>
        <category>AI</category>
      </categories>
      <tags>
        <tag>ChatGPT</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka常用命令</title>
    <url>/posts/d25e2bb0.html</url>
    <content><![CDATA[<p>进入容器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker exec -it 容器id bash</span><br></pre></td></tr></table></figure>

<p>进入到kafka的安装目录，查看到kafka相关的命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cd /opt/kafka/bin/</span><br></pre></td></tr></table></figure>

<h2 id="topic操作"><a href="#topic操作" class="headerlink" title="topic操作"></a>topic操作</h2><h3 id="创建一个topic"><a href="#创建一个topic" class="headerlink" title="创建一个topic"></a>创建一个topic</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#添加名为test的topic 一个分区，3个副本,其中xxxx:2181为zookeeper的端口</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --create --topic test --replication-factor 1 --partitions 3</span><br></pre></td></tr></table></figure>

<p>执行后效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Created topic test.</span><br></pre></td></tr></table></figure>

<h3 id="查询topic列表"><a href="#查询topic列表" class="headerlink" title="查询topic列表"></a>查询topic列表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#其中xxxx:2181为zookeeper的端口</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --list</span><br></pre></td></tr></table></figure>

<p> 执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">test</span><br></pre></td></tr></table></figure>

<h3 id="查询topic详情"><a href="#查询topic详情" class="headerlink" title="查询topic详情"></a>查询topic详情</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询名为test2的topic详情</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --describe --topic test2</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Topic: test2	TopicId: uly4F1d3SEyregeocjltZA	PartitionCount: 3	ReplicationFactor: 1	Configs: </span><br><span class="line">	Topic: test2	Partition: 0	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: test2	Partition: 1	Leader: 0	Replicas: 0	Isr: 0</span><br><span class="line">	Topic: test2	Partition: 2	Leader: 0	Replicas: 0	Isr: 0</span><br></pre></td></tr></table></figure>

<h3 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除名为test2的topic</span><br><span class="line">kafka-topics.sh --zookeeper xxxx:2181  --delete --topic test2</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Topic test2 is marked for deletion.</span><br><span class="line">Note: This will have no impact if delete.topic.enable is not set to true.</span><br></pre></td></tr></table></figure>

<h2 id="发送消费消息"><a href="#发送消费消息" class="headerlink" title="发送消费消息"></a>发送消费消息</h2><h3 id="生产者发送消息"><a href="#生产者发送消息" class="headerlink" title="生产者发送消息"></a>生产者发送消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-producer.sh --broker-list localhost:9092 --topic example</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;^Croot@f48c27085ce3:/opt/kafka/bin# kafka-console-producer.sh --broker-list  localhost:9092 --topic example</span><br><span class="line">&gt;hello world！</span><br></pre></td></tr></table></figure>

<h3 id="消费者消费消息"><a href="#消费者消费消息" class="headerlink" title="消费者消费消息"></a>消费者消费消息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic example --from-beginning</span><br></pre></td></tr></table></figure>

<p>执行后效果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hello world！</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/d25e2bb0.html">http://ulemony.github.io/posts/d25e2bb0.html</a> </p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>kafka&#39;</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令</title>
    <url>/posts/d0edc1ed.html</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><p>使用scp将一个Linux系统中的文件或文件夹复制到另一台Linux服务器上</p>
<h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><p>1.将本地文件拷贝到远程主机</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp 文件名 用户名@计算机IP或者计算机名称:远程路径</span></span><br><span class="line"><span class="comment">//192.168.1.12为远程服务器</span></span><br><span class="line">scp /root/install.* root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>:/usr/local/src</span><br></pre></td></tr></table></figure>

<p>2.从远程将文件拷回本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp 用户名@计算机IP或者计算机名称:文件名 本地路径</span></span><br><span class="line"><span class="comment">//本地192.168.1.8客户端取远程服务器12、11上的文件</span></span><br><span class="line">scp root@<span class="number">192.168</span><span class="number">.1</span><span class="number">.12</span>:/usr/local/src<span class="comment">/*.log /root/</span></span><br></pre></td></tr></table></figure>

<h3 id="复制目录"><a href="#复制目录" class="headerlink" title="复制目录"></a>复制目录</h3><p>1.将本地文件夹拷贝到远程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp -r 目录名 用户名@计算机IP或者计算机名称:远程路径</span></span><br><span class="line"><span class="comment">//test1为源目录，test2为目标目录，zhidao@192.168.0.1为远程服务器的用户名和ip地址。</span></span><br><span class="line">scp -r /home/test1 zhidao@<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:/home/test2 </span><br></pre></td></tr></table></figure>

<p>2.从远程拷贝目录回本地</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//scp -r 用户名@计算机IP或者计算机名称:目录名 本地路径</span></span><br><span class="line"><span class="comment">//zhidao@192.168.0.1为远程服务器的用户名和ip地址，test1为源目录，test2为目标目录</span></span><br><span class="line">scp  -r zhidao@<span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span>:/home/test2 /home/test1</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/d0edc1ed.html">http://ulemony.github.io/posts/d0edc1ed.html</a> </p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>文件操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/posts/fe29e710.html</url>
    <content><![CDATA[<h1 id="Redis基础"><a href="#Redis基础" class="headerlink" title="Redis基础"></a>Redis基础</h1><h2 id="Redis五大数据类型"><a href="#Redis五大数据类型" class="headerlink" title="Redis五大数据类型"></a>Redis五大数据类型</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set key value</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get key</span><br></pre></td></tr></table></figure>

<p>查询当前库所有数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keys *</span><br></pre></td></tr></table></figure>

<p>判断某个key是否存在，存在返回1，不存在返回0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">EXISTS key</span><br></pre></td></tr></table></figure>

<p>对key的值追加拼接数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">APPEND key value</span><br></pre></td></tr></table></figure>

<p>查看数据长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STRLEN key</span><br></pre></td></tr></table></figure>

<p>递增数值, 应用场景：网站访问次数，收藏数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">INCR key</span><br><span class="line">INCRBY key num 指定数值递增</span><br></pre></td></tr></table></figure>

<p>递减数值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DECR key</span><br><span class="line">DECRBY key num 指定数值递减</span><br></pre></td></tr></table></figure>

<p>截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GETRANGE key 0 4  获取字符串下标从0开始，包含下标4</span><br></pre></td></tr></table></figure>

<p>替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SETRANGE key 5 88 把下标为5的元素替换为88</span><br></pre></td></tr></table></figure>

<p>同时设置&#x2F;获取多个键值对</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MSET key value [key value...] 设置</span><br><span class="line">MGET key [key...]  获取</span><br></pre></td></tr></table></figure>

<p>分布式锁</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SETNX key value  不存在才设置</span><br><span class="line">SET key value [EX seconds] [PX milliseconds] [NX|XX]</span><br><span class="line"></span><br><span class="line">EX：key在多少秒之后过期</span><br><span class="line">PX：key在多少毫秒之后过期</span><br><span class="line">NX：当key不存在的时候，才创建key，效果等同于setnx</span><br><span class="line">XX：当key存在的时候，覆盖key</span><br></pre></td></tr></table></figure>

<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>左添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LPUSH key value[value...]</span><br></pre></td></tr></table></figure>

<p>右添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RPUSH key value[value...]</span><br></pre></td></tr></table></figure>

<p>查看列表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LRANGE key start stop</span><br></pre></td></tr></table></figure>

<p>获取列表元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LLEN key</span><br></pre></td></tr></table></figure>

<p>左移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lpop key</span><br></pre></td></tr></table></figure>

<p>右移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpop key</span><br></pre></td></tr></table></figure>

<p>查询指定下标元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lindex key 1 查询下标为1的元素</span><br></pre></td></tr></table></figure>

<p>移除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lrem key 3 v2  移除集合中元素“v2”的元素3个</span><br></pre></td></tr></table></figure>

<p>截取</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ltrim key start stop   只保留截取后的元素【start，stop】</span><br></pre></td></tr></table></figure>

<p>更新</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lset key index newValue 将下标为index的元素更新为新值</span><br></pre></td></tr></table></figure>

<h3 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h3><p>相当于Java中Map&lt;String,Map&lt;object,object&gt;&gt;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">应用场景：购物车</span><br><span class="line">新增商品 hset shopcar:uid1024 334488 1</span><br><span class="line">新增商品 hset shopcar:uid1024 334477 1</span><br><span class="line">增加商品数量 hincrby shopcar:uid1024 334477 1</span><br><span class="line">商品总数 hlen shopcar:uid1024</span><br><span class="line">全部选择 hgetall shopcar:uid1024</span><br></pre></td></tr></table></figure>

<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hset key field  添加一个</span><br><span class="line">hmset key field value[field value] 添加多个</span><br></pre></td></tr></table></figure>

<p>查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hget key field</span><br><span class="line">hmget key field[field]</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hdel key field[field]</span><br></pre></td></tr></table></figure>

<p>获取长度</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure>

<p>判断是否存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure>

<p>获取指定hash中所有key</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hkeys key  </span><br></pre></td></tr></table></figure>

<p>获取指定hash中所有value</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hvals key</span><br></pre></td></tr></table></figure>

<p>增加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure>

<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>无序；应用场景：抽奖、朋友圈点赞、社交关系、可能认识的人</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sadd key member [member]</span><br></pre></td></tr></table></figure>

<p>删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srem key member</span><br></pre></td></tr></table></figure>

<p>获取所有元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure>

<p>判断元素是否在集合中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure>

<p>获取元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure>

<p>随机弹出元素，但不删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure>

<p>随机弹出元素并删除</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure>

<p>集合运算</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sinter key [key]  交集</span><br><span class="line">sdiff key [key]   差集</span><br><span class="line">sunion key [key]  并集</span><br></pre></td></tr></table></figure>

<h3 id="zset"><a href="#zset" class="headerlink" title="zset"></a>zset</h3><p>有序；应用场景：热搜、商品排序</p>
<p>添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zadd key score member [score member]</span><br></pre></td></tr></table></figure>

<p>排序小-大</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrange key start stop [withscores]</span><br></pre></td></tr></table></figure>

<p>获取指定分数范围元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [withscores] [limit offset count]</span><br><span class="line"></span><br><span class="line">min 和 max: 这两个参数用于指定分数范围的下限和上限，你可以使用 -inf 表示负无穷大，+inf 表示正无穷大。指定范围内的成员将会被检索。</span><br><span class="line">[withscores]: 这是一个可选参数，如果包含这个参数，那么返回的结果将包括成员的分数。如果不包含这个参数，只会返回成员的值。</span><br><span class="line">[limit offset count]: 这也是一个可选参数，用于限制返回的结果数量。offset 表示从匹配到的成员列表中的第几个成员开始返回结果，count 表示最多返回的成员数量。这个参数允许你进行分页查询，从匹配的成员中获取一部分。</span><br></pre></td></tr></table></figure>

<p>增加某个元素分数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>

<p>获取集合元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcard key</span><br></pre></td></tr></table></figure>

<p>获取指定范围元素个数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>

<p>删除元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrem key member [member]</span><br></pre></td></tr></table></figure>

<p>按照排名范围删除元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br></pre></td></tr></table></figure>

<p>获取元素排名</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zrank key member  小-大</span><br><span class="line">zrevrank key member 大-小</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/fe29e710.html">http://ulemony.github.io/posts/fe29e710.html</a> </p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot自动配置原理</title>
    <url>/posts/ec6e45b4.html</url>
    <content><![CDATA[<h2 id="Springboot自动配置原理"><a href="#Springboot自动配置原理" class="headerlink" title="Springboot自动配置原理"></a>Springboot自动配置原理</h2><ol>
<li>SpringBoot通过@EnableAutoConfiguration开启自动配置</li>
<li>利用@Import加载META-INF&#x2F;spring.factories配置文件中的所有自动配置类</li>
<li>这些配置类会根据@Conditionnal派生注解来生效</li>
<li>这些自动配置类会通过以Properties结尾命名的类获取全局配置文件中的属性</li>
<li>xxxProperties类通过@ConfigurationProperties注解和全局配置文件中的属性进行绑定</li>
</ol>
<h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="comment">//通过该注解开启自动配置</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = &#123; @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">		@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication &#123;</span><br><span class="line">  </span><br><span class="line">	<span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = EnableAutoConfiguration.class)</span></span><br><span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackages&quot;)</span></span><br><span class="line">	String[] scanBasePackages() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@AliasFor(annotation = ComponentScan.class, attribute = &quot;basePackageClasses&quot;)</span></span><br><span class="line">	Class&lt;?&gt;[] scanBasePackageClasses() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@AutoConfigurationPackage</span></span><br><span class="line"><span class="comment">//注入类</span></span><br><span class="line"><span class="meta">@Import(AutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration &#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">String</span> <span class="variable">ENABLED_OVERRIDE_PROPERTY</span> <span class="operator">=</span> <span class="string">&quot;spring.boot.enableautoconfiguration&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration classes such that they will never be applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the classes to exclude</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	Class&lt;?&gt;[] exclude() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Exclude specific auto-configuration class names such that they will never be</span></span><br><span class="line"><span class="comment">	 * applied.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@return</span> the class names to exclude</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@since</span> 1.3.0</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	String[] excludeName() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">AutoConfigurationImportSelector.class</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">public</span> String[] selectImports(AnnotationMetadata annotationMetadata) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!isEnabled(annotationMetadata)) &#123;</span><br><span class="line">			<span class="keyword">return</span> NO_IMPORTS;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">AutoConfigurationMetadata</span> <span class="variable">autoConfigurationMetadata</span> <span class="operator">=</span> AutoConfigurationMetadataLoader</span><br><span class="line">      <span class="comment">//加载自动配置类</span></span><br><span class="line">				.loadMetadata(<span class="built_in">this</span>.beanClassLoader);</span><br><span class="line">		<span class="type">AutoConfigurationEntry</span> <span class="variable">autoConfigurationEntry</span> <span class="operator">=</span> getAutoConfigurationEntry(autoConfigurationMetadata,</span><br><span class="line">				annotationMetadata);</span><br><span class="line">		<span class="keyword">return</span> StringUtils.toStringArray(autoConfigurationEntry.getConfigurations());</span><br><span class="line">	&#125;</span><br><span class="line">AutoConfigurationMetadataLoader.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> <span class="keyword">static</span> AutoConfigurationMetadata <span class="title function_">loadMetadata</span><span class="params">(ClassLoader classLoader)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> loadMetadata(classLoader, PATH);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">static</span> AutoConfigurationMetadata <span class="title function_">loadMetadata</span><span class="params">(ClassLoader classLoader, String path)</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//实际上从&quot;META-INF/&quot; + &quot;spring-autoconfigure-metadata.properties&quot;下加载自动配置类</span></span><br><span class="line">			Enumeration&lt;URL&gt; urls = (classLoader != <span class="literal">null</span>) ? classLoader.getResources(path)</span><br><span class="line">					: ClassLoader.getSystemResources(path);</span><br><span class="line">			<span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">			<span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">				properties.putAll(PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> <span class="title class_">UrlResource</span>(urls.nextElement())));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">return</span> loadMetadata(properties);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">catch</span> (IOException ex) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Unable to load @ConditionalOnClass location [&quot;</span> + path + <span class="string">&quot;]&quot;</span>, ex);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line">	<span class="meta">@Conditional(DefaultDispatcherServletCondition.class)</span></span><br><span class="line">	<span class="meta">@ConditionalOnClass(ServletRegistration.class)</span></span><br><span class="line"><span class="comment">//从xxxProperties类中获取全局配置文件属性值</span></span><br><span class="line">	<span class="meta">@EnableConfigurationProperties(&#123; HttpProperties.class, WebMvcProperties.class &#125;)</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DispatcherServletConfiguration</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">//通过该注解和全局配置文件中的属性进行绑定</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.http&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpProperties</span>   </span><br><span class="line">   </span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/ec6e45b4.html">http://ulemony.github.io/posts/ec6e45b4.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring事务</title>
    <url>/posts/65703737.html</url>
    <content><![CDATA[<h2 id="Spring事务是如何实现的"><a href="#Spring事务是如何实现的" class="headerlink" title="Spring事务是如何实现的"></a>Spring事务是如何实现的</h2><ol>
<li>Spring事务底层基于数据库事务和AOP机制</li>
<li>对使用了@Transactional注解的Bean，Spring会创建一个代理对象作为Bean</li>
<li>调用代理对象的方法时，会先判断该方法是否有@Transactional注解，如果加了会利用事务管理器创建一个数据库连接，并且将数据库连接的autocommit属性设置为false，禁止连接自动提交</li>
<li>执行当前方法，方法中会执行sql，方法执行完后如果没有异常就提交事务；如果出现了异常则回滚事务，至于哪些异常回滚事务，可以通过@Transactional注解的rollbackFor进行配置，默认会对RuntimeException和erroe进行回滚</li>
</ol>
<h2 id="Spring事务隔离级别"><a href="#Spring事务隔离级别" class="headerlink" title="Spring事务隔离级别"></a>Spring事务隔离级别</h2><p>spring事务隔离级别就是数据库的隔离级别，它是基于数据库连接来做的，一个事务对应一个数据库连接，如果传播机制要新开事务，实际上是新建一个数据库连接来执行sql</p>
<p>1.read uncommitted 未提交读</p>
<p>2.read committed 提交读、不可重复读</p>
<p>3.repeatable read 可重复读</p>
<p>4.serializable 可串行化</p>
<h2 id="Spring事务传播机制"><a href="#Spring事务传播机制" class="headerlink" title="Spring事务传播机制"></a>Spring事务传播机制</h2><ol>
<li>REQUIRED：如果当前没有事务则新建一个事务，如果有就加入该事务</li>
<li>SUPPORTS：当前存在事务则加入该事务，没有则以非事务方法执行</li>
<li>MANDATORY：当前存在事务则加入该事务，没有则抛出异常</li>
<li>REQUIRED_NEW：创建一个新事务，如果当前存在事务则将其挂起</li>
<li>NOT_SUPPORTED：以非事务方式执行，如果当前存在事务则将其挂起</li>
<li>NEVER：不使用事务，如果当前存在事务则抛出异常</li>
<li>NESTED：如果当前事务存在，则在嵌套事务中执行，如果不存在事务则新建一个事务</li>
</ol>
<h2 id="事务失效"><a href="#事务失效" class="headerlink" title="事务失效"></a>事务失效</h2><ol>
<li><p>方法内自调用：Spring事务是基于AOP的，只有使用代理对象调用某个方法时，事务才生效，如果一个方法中使用this.xxx（）调用方法时，this不是代理对象，导致事务失效</p>
<p>a. 解决办法1: 把调用方法拆分到另外一个bean</p>
<p>b. 解决办法2: 自己注入自己</p>
<p>c. 解决办法3: AopContext.currentProxy()+@EnableAspectJAutoProxy(exposeProxy&#x3D;true)</p>
</li>
<li><p>方法是private的：Spring事务基于CGLIB来进行AOP，而CGLIB基于父子类生效，子类是代理类，父类是被代理类，如果父类某个方法是private，子类没办法重写，也就不能增加spring事务的逻辑</p>
</li>
<li><p>方法是final的：原因同上</p>
</li>
<li><p>单独的线程：当Mybatis或JdbcTemplate执行sql时，会从ThreadLocal中获取数据库连接对象，如果开启事务的线程和执行sql的线程不是同一个线程，那么Mybatis或JdbcTemplate就会新建一个数据库连接来执行sql，此时autocommit为true，执行完sql便提交，后续即使抛出异常也不会进行回滚</p>
</li>
<li><p>spring事务没有捕捉到异常，从而不回滚</p>
</li>
<li><p>类没有被Spring管理</p>
</li>
<li><p>数据库不支持事务</p>
</li>
</ol>
<p>链接 <a href="http://ulemony.github.io/posts/65703737.html">http://ulemony.github.io/posts/65703737.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring循环依赖</title>
    <url>/posts/a5d86a59.html</url>
    <content><![CDATA[<h2 id="spring循环依赖"><a href="#spring循环依赖" class="headerlink" title="spring循环依赖"></a>spring循环依赖</h2><p>AService里面有BService属性，BService里面有AService属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.creatingSet(&#x27;AService&#x27;)</span><br><span class="line">1.new Aservice() ---&gt; Aservice普通对象 ---&gt; 三级缓存singletonFactories&lt;aService,lambda(beanName,Aservice)&gt;</span><br><span class="line">2.填充bService属性 ---&gt;单例池Map ---&gt;找不到</span><br><span class="line">		</span><br><span class="line">		创建BService</span><br><span class="line">		2.1 new BService() ---&gt; BService普通对象</span><br><span class="line">		2.2 添加aService属性 ---&gt; 单例池Map ---&gt;找不到 ---&gt; creatingSet ---&gt; AService循环依赖 ---&gt; 二级缓存---&gt; 三级缓存</span><br><span class="line">				---&gt; lambda---&gt; 判断要不要AOP？---&gt; 提前进行AOP ---&gt; AService代理对象 ---&gt; 放入二级缓存,并且移除三级缓存的对象(不再需要lambda表达式)</span><br><span class="line">										                 --------------&gt;AService普通对象 </span><br><span class="line">		2.3 添加其他属性</span><br><span class="line">		2.4 其他步骤</span><br><span class="line">		2.5 放入单例池Map&lt;beanName, AService Bean对象&gt;</span><br><span class="line">		</span><br><span class="line">3.填充cService属性</span><br><span class="line"></span><br><span class="line">	创建CService</span><br><span class="line">		3.1 new CService() ---&gt; BService普通对象</span><br><span class="line">		3.2 添加aService属性 ---&gt; 单例池Map ---&gt;找不到 ---&gt; creatingSet ---&gt; AService循环依赖 ---&gt;第二级</span><br><span class="line">		3.3 添加其他属性</span><br><span class="line">		3.4 其他步骤</span><br><span class="line">		3.5 放入单例池Map&lt;beanName, AService Bean对象&gt;</span><br><span class="line">		</span><br><span class="line">4.其他步骤(AOP) ---&gt;AService 代理对象(?) ---&gt;判断是否提前进行了AOP若是则返回普通对象，否则进行AOP返回代理对象</span><br><span class="line">5.把二级缓存对象放入一级缓存单例池Map&lt;beanName, AService Bean对象&gt;，并移除二级缓存对象</span><br><span class="line"></span><br><span class="line">注意：普通对象没有值是一个半成品；Bean对象有值，是一个完整体</span><br></pre></td></tr></table></figure>

<h2 id="三级缓存"><a href="#三级缓存" class="headerlink" title="三级缓存"></a>三级缓存</h2><p>第一级缓存：singletonObjects 单例池 保证bean对象的单例效果</p>
<p>第二级缓存：earlySingletonObjects 保证单例效果，但是此时的对象还不是完整体</p>
<p>第三级缓存：singletonFactories 打破循环</p>
<h2 id="哪些情况spring不能解决循环依赖"><a href="#哪些情况spring不能解决循环依赖" class="headerlink" title="哪些情况spring不能解决循环依赖"></a>哪些情况spring不能解决循环依赖</h2><p>构造注入,spring无法解决这样的循环依赖，无法产生基本的普通对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> BService bService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AService</span><span class="params">(BService bService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.bService=bService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> AService aService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BService</span><span class="params">(AService aService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.aService=aService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对上述情况需要用@Lazy注解来解决，会产生一个BService的代理对象,不会进入对BService属性赋值的逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> BService bService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="meta">@Lazy</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">AService</span><span class="params">(BService bService)</span>&#123;  <span class="comment">//BService代理对象</span></span><br><span class="line">		<span class="built_in">this</span>.bService=bService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BService</span>()&#123;</span><br><span class="line">	<span class="keyword">public</span> AService aService;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">	<span class="keyword">public</span> <span class="title function_">BService</span><span class="params">(AService aService)</span>&#123;</span><br><span class="line">		<span class="built_in">this</span>.aService=aService;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="源码部分"><a href="#源码部分" class="headerlink" title="源码部分"></a>源码部分</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line">  <span class="title class_">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = (BeanWrapper)<span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">            instanceWrapper = <span class="built_in">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">        Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">        <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">            mbd.resolvedTargetType = beanType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, var17);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">						<span class="comment">//如果支持循环依赖，则生成三级缓存，提前暴露bean</span></span><br><span class="line">            <span class="built_in">this</span>.addSingletonFactory(beanName, () -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//填充属性，循环依赖在这个阶段产生</span></span><br><span class="line">            <span class="built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">          <span class="comment">//执行初始化方法</span></span><br><span class="line">            exposedObject = <span class="built_in">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var18 <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException)var18;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> <span class="built_in">this</span>.getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                  <span class="comment">//把原始bean 置换为代理对象</span></span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; <span class="built_in">this</span>.hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = <span class="built_in">this</span>.getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(dependentBeans.length);</span><br><span class="line">                    String[] var12 = dependentBeans;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var13</span> <span class="operator">=</span> dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="number">0</span>; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">dependentBean</span> <span class="operator">=</span> var12[var14];</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">this</span>.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName, <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">            <span class="keyword">return</span> exposedObject;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, var16);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">DefaultSingletonBeanRegistry.class</span><br><span class="line">   <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, <span class="type">boolean</span> allowEarlyReference)</span> &#123;</span><br><span class="line">       <span class="comment">//首先从一级缓存里面获取对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">  			<span class="comment">//一级缓存找不到而且对象正在创建中</span></span><br><span class="line">        <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">          <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">              <span class="comment">//从二级缓存找</span></span><br><span class="line">                singletonObject = <span class="built_in">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">              <span class="comment">//二级缓存找不到，并且允许循环依赖</span></span><br><span class="line">                <span class="keyword">if</span> (singletonObject == <span class="literal">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                  <span class="comment">//从三级缓存找到一个lambda表达式，实质是一个对象工厂</span></span><br><span class="line">                    ObjectFactory&lt;?&gt; singletonFactory = (ObjectFactory)<span class="built_in">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonFactory != <span class="literal">null</span>) &#123;</span><br><span class="line">                      <span class="comment">//执行三级缓存里的lambda表达式，通过工厂方法来创建对象</span></span><br><span class="line">                        singletonObject = singletonFactory.getObject();</span><br><span class="line">                      <span class="comment">//把创建的对象放入二级缓存中</span></span><br><span class="line">                        <span class="built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                      <span class="comment">//并且移除三级缓存的普通对象</span></span><br><span class="line">                        <span class="built_in">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> singletonObject;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">&quot;Bean name must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span>(<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">        </span><br><span class="line">            <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.singletonsCurrentlyInDestruction) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationNotAllowedException</span>(beanName, <span class="string">&quot;Singleton bean creation not allowed while singletons of this factory are in destruction (Do not request a bean from a BeanFactory in a destroy method implementation!)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.logger.debug(<span class="string">&quot;Creating shared instance of singleton bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">								<span class="comment">// 标记bean创建中</span></span><br><span class="line">                <span class="built_in">this</span>.beforeSingletonCreation(beanName);</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">newSingleton</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">recordSuppressedExceptions</span> <span class="operator">=</span> <span class="built_in">this</span>.suppressedExceptions == <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.suppressedExceptions = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    newSingleton = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalStateException var16) &#123;</span><br><span class="line">                    singletonObject = <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">                    <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> var16;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BeanCreationException var17) &#123;</span><br><span class="line">                    <span class="type">BeanCreationException</span> <span class="variable">ex</span> <span class="operator">=</span> var17;</span><br><span class="line">                    <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                        <span class="type">Iterator</span> <span class="variable">var8</span> <span class="operator">=</span> <span class="built_in">this</span>.suppressedExceptions.iterator();</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">while</span>(var8.hasNext()) &#123;</span><br><span class="line">                            <span class="type">Exception</span> <span class="variable">suppressedException</span> <span class="operator">=</span> (Exception)var8.next();</span><br><span class="line">                            ex.addRelatedCause(suppressedException);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">throw</span> ex;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (recordSuppressedExceptions) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.suppressedExceptions = <span class="literal">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.afterSingletonCreation(beanName);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (newSingleton) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.addSingleton(beanName, singletonObject);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> singletonObject;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>三级缓存里lambda表达式的工厂方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">getEarlyBeanReference</span><span class="params">(String beanName, RootBeanDefinition mbd, Object bean)</span> &#123;</span><br><span class="line">      <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line">  		<span class="comment">//会判断是否需要提前AOP 如果是则返回代理对象，否则直接返回普通对象</span></span><br><span class="line">      <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">          <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">              <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var5.next();</span><br><span class="line">              <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> SmartInstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                  <span class="type">SmartInstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (SmartInstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                  exposedObject = ibp.getEarlyBeanReference(exposedObject, beanName);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> exposedObject;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/a5d86a59.html">http://ulemony.github.io/posts/a5d86a59.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>chatgpt聊天机器人部署</title>
    <url>/posts/9fa1f056.html</url>
    <content><![CDATA[<h1 id="window环境下的部署"><a href="#window环境下的部署" class="headerlink" title="window环境下的部署"></a>window环境下的部署</h1><h2 id="后端项目部署"><a href="#后端项目部署" class="headerlink" title="后端项目部署"></a>后端项目部署</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1-jdk1-8安装"><a href="#1-1-jdk1-8安装" class="headerlink" title="1.1 jdk1.8安装"></a>1.1 jdk1.8安装</h4><p>安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/m0_70098804/article/details/131062308?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169028921016800225560646%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=169028921016800225560646&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~times_rank-1-131062308-null-null.142^v91^insertT0,239^v3^control&amp;utm_term=jdk1.8%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.oracle.com/cn/java/technologies/downloads/#java8-windows</span><br></pre></td></tr></table></figure>

<h4 id="1-2-maven3-9-3安装"><a href="#1-2-maven3-9-3安装" class="headerlink" title="1.2 maven3.9.3安装"></a>1.2 maven3.9.3安装</h4><p>安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/weixin_44080187/article/details/122933194?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522169029399616800226565364%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=169029399616800226565364&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-5-122933194-null-null.142^v91^insertT0,239^v3^control&amp;utm_term=window%E5%AE%89%E8%A3%85maven&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://maven.apache.org/download.cgi</span><br></pre></td></tr></table></figure>

<h4 id="1-3-微软语音服务获取"><a href="#1-3-微软语音服务获取" class="headerlink" title="1.3 微软语音服务获取"></a>1.3 微软语音服务获取</h4><p>a. Azure 订阅 - 免费创建订阅</p>
<p><img src="/posts/9fa1f056/%E5%BE%AE%E8%BD%AFAzure%E6%9C%8D%E5%8A%A1.png" alt="微软Azure服务"></p>
<p>b. 在 Azure 门户中创建语音资源</p>
<p><img src="/posts/9fa1f056/%E5%88%9B%E5%BB%BA%E8%AF%AD%E9%9F%B3%E8%B5%84%E6%BA%90.png" alt="创建语音资源"></p>
<p>c. 获取语音资源密钥和区域。 部署语音资源后，选择“转到资源”以查看和管理密钥。</p>
<p><img src="/posts/9fa1f056/%E8%8E%B7%E5%8F%96%E8%AF%AD%E9%9F%B3%E8%B5%84%E6%BA%90.png" alt="获取语音资源"></p>
<h3 id="2-后端项目启动"><a href="#2-后端项目启动" class="headerlink" title="2.后端项目启动"></a>2.后端项目启动</h3><h4 id="2-1-配置文件application-yaml修改"><a href="#2-1-配置文件application-yaml修改" class="headerlink" title="2.1 配置文件application.yaml修改"></a>2.1 配置文件application.yaml修改</h4><p>修改工具：软件idea或者HBuilderX</p>
<p>a.将openai的apiKey替换会你自己的apiKey</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">openai:</span><br><span class="line">  apiKey: xxxx</span><br></pre></td></tr></table></figure>

<p>b.将步骤1.3得到的语音密钥和区域设置成自己的密钥和区域</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">azure:</span><br><span class="line">#语音服务密钥</span><br><span class="line">  SPEECH_KEY: xxxx</span><br><span class="line">#语音服务地区</span><br><span class="line">  SERVICE_REGION: eastus</span><br></pre></td></tr></table></figure>

<p>c.在配置文件application.yaml中替换代理端口和地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#代理地址和端口</span><br><span class="line">proxy:</span><br><span class="line">  host: localhost</span><br><span class="line">  port: <span class="number">7890</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-修改语音文件保存路径"><a href="#2-2-修改语音文件保存路径" class="headerlink" title="2.2 修改语音文件保存路径"></a>2.2 修改语音文件保存路径</h4><p>a. 修改AudioUtil.java 文件</p>
<p>在本地电脑自定义新建文件夹</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">文件夹<span class="number">1</span></span><br><span class="line">C:\audio\input</span><br><span class="line">文件夹<span class="number">2</span></span><br><span class="line">C:\audio\output</span><br></pre></td></tr></table></figure>

<p>将下图的两个语音路径替换成上面自定义的路径，注意路径需使用符号&#x2F;</p>
<p>即：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造原始音频文件保存目录 保存至电脑本地</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lee/Desktop/audio/input&quot;</span>;</span><br><span class="line"> 修改为</span><br><span class="line"> <span class="type">String</span> <span class="variable">inputFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:/audio/input&quot;</span>;</span><br><span class="line"><span class="comment">//构建格式化后音频文件保存目录</span></span><br><span class="line"> <span class="type">String</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> <span class="string">&quot;/Users/lee/Desktop/audio/output&quot;</span>;</span><br><span class="line"> 修改为</span><br><span class="line"> <span class="type">String</span> <span class="variable">outputFilePath</span> <span class="operator">=</span> <span class="string">&quot;C:/audio/output&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9fa1f056/%E8%AF%AD%E9%9F%B3%E8%B7%AF%E5%BE%841.png" alt="语音路径1"></p>
<p>b.修改TextToSpeechImpl.java文件</p>
<p>将下图的路径替换成自定义路径</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//生成语音文件保存到本地</span><br><span class="line"> String outputFilePath=&quot;/Users/lee/Desktop/audio/output&quot;;</span><br><span class="line"> 修改为</span><br><span class="line"> String outputFilePath=&quot;C:/audio/output&quot;;</span><br></pre></td></tr></table></figure>

<p><img src="/posts/9fa1f056/%E8%AF%AD%E9%9F%B3%E8%B7%AF%E5%BE%842.png" alt="语音路径2"></p>
<h4 id="2-3启动后端项目"><a href="#2-3启动后端项目" class="headerlink" title="2.3启动后端项目"></a>2.3启动后端项目</h4><p>a.在命令窗口中cd进入项目根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt-master-master</span><br></pre></td></tr></table></figure>

<p>b. 输入命令打包项目,初次打包会耗时较长时间</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>

<p>c. 成功打包项目后会在项目中看到一个target目录，cd进入该目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt-master-master\target</span><br></pre></td></tr></table></figure>

<p>d. 运行项目</p>
<p>电脑需要开启全局代理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xms64m -Xmx128m -jar miniLegionInit.jar </span><br></pre></td></tr></table></figure>

<h2 id="前端项目部署"><a href="#前端项目部署" class="headerlink" title="前端项目部署"></a>前端项目部署</h2><h3 id="1-环境准备-1"><a href="#1-环境准备-1" class="headerlink" title="1.环境准备"></a>1.环境准备</h3><h4 id="1-1-node环境安装"><a href="#1-1-node环境安装" class="headerlink" title="1.1 node环境安装"></a>1.1 node环境安装</h4><p>具体安装教程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://blog.csdn.net/mengchuan6666/article/details/125893199?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=window%E5%AE%89%E8%A3%85vue4.5&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-125893199.142^v91^insertT0,239^v3^control&amp;spm=1018.2226.3001.4187</span><br></pre></td></tr></table></figure>

<p>node.js安装包下载地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://nodejs.org/dist/v14.17.0/</span><br></pre></td></tr></table></figure>

<p>我安装的版本是 node-v14.17.0-x64.msi</p>
<p>安装成功后查看版本号</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h4 id="1-2-NPM安装vue-js"><a href="#1-2-NPM安装vue-js" class="headerlink" title="1.2 NPM安装vue.js"></a>1.2 NPM安装vue.js</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install vue -g</span><br></pre></td></tr></table></figure>

<h4 id="1-3-全局安装vue-cli"><a href="#1-3-全局安装vue-cli" class="headerlink" title="1.3 全局安装vue-cli"></a>1.3 全局安装vue-cli</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli </span><br></pre></td></tr></table></figure>

<h3 id="2-前端项目启动"><a href="#2-前端项目启动" class="headerlink" title="2.前端项目启动"></a>2.前端项目启动</h3><h4 id="2-1-修改ChatBox-vue文件"><a href="#2-1-修改ChatBox-vue文件" class="headerlink" title="2.1 修改ChatBox.vue文件"></a>2.1 修改ChatBox.vue文件</h4><p>将ip地址192.168.100.204替换成自己电脑的ip地址</p>
<p><img src="/posts/9fa1f056/websocket%E5%9C%B0%E5%9D%80.png" alt="websocket地址"></p>
<h4 id="2-2-启动前端项目"><a href="#2-2-启动前端项目" class="headerlink" title="2.2 启动前端项目"></a>2.2 启动前端项目</h4><p>a. 以管理员身份运行命令窗口，cd进入项目根目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd C:\chatgpt_vue-master</span><br></pre></td></tr></table></figure>

<p>b. 启动项目，注意先启动后端项目再启动前端项目</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>

<p>c. 启动成功后可以看到以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DONE  Compiled successfully in 15920ms                                                             上午8:54:02</span><br><span class="line"> App running at:</span><br><span class="line"> - Local:   http://localhost:8081/</span><br><span class="line"> - Network: http://192.168.8.209:8081/</span><br></pre></td></tr></table></figure>

<p>d.浏览器访问地址即可打开网页</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8081/</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/9fa1f056.html">http://ulemony.github.io/posts/9fa1f056.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>springsecurity之@PreAuthorize讲解</title>
    <url>/posts/9d7a9baf.html</url>
    <content><![CDATA[<h2 id="PreAuthorize注解使用讲解"><a href="#PreAuthorize注解使用讲解" class="headerlink" title="@PreAuthorize注解使用讲解"></a>@PreAuthorize注解使用讲解</h2><p>@PreAuthorize 可以在方法前进行权限验证，如果没有对应权限则无法执行方法，下面是使用案例</p>
<h4 id="a-在对应方法使用-PreAuthorize注解，值为EL表达式"><a href="#a-在对应方法使用-PreAuthorize注解，值为EL表达式" class="headerlink" title="a.在对应方法使用@PreAuthorize注解，值为EL表达式"></a>a.在对应方法使用@PreAuthorize注解，值为EL表达式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;导出用户数据&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(value = &quot;/download&quot;)</span></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@el.check(&#x27;user:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportUser</span><span class="params">(HttpServletResponse response, UserQueryCriteria criteria)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    userService.download(userService.queryAll(criteria), response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-在SpringSecurityConfig上使用注解-EnableGlobalMethodSecurity"><a href="#b-在SpringSecurityConfig上使用注解-EnableGlobalMethodSecurity" class="headerlink" title="b.在SpringSecurityConfig上使用注解@EnableGlobalMethodSecurity"></a>b.在SpringSecurityConfig上使用注解@EnableGlobalMethodSecurity</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="comment">//开启prePostEnabled和securedEnabled</span></span><br><span class="line"><span class="meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringSecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br></pre></td></tr></table></figure>

<h4 id="c-对el表达式进行处理"><a href="#c-对el表达式进行处理" class="headerlink" title="c.对el表达式进行处理"></a>c.对el表达式进行处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(value = &quot;el&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorityConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">check</span><span class="params">(String ...permissions)</span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前用户的所有权限</span></span><br><span class="line">        List&lt;String&gt; elPermissions = SecurityUtils.getCurrentUser().getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">// 判断当前用户为admin或者含有对应权限则验证通过</span></span><br><span class="line">        <span class="keyword">return</span> elPermissions.contains(<span class="string">&quot;admin&quot;</span>) || Arrays.stream(permissions).anyMatch(elPermissions::contains);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="PreAuthorize源码讲解"><a href="#PreAuthorize源码讲解" class="headerlink" title="@PreAuthorize源码讲解"></a>@PreAuthorize源码讲解</h2><p>首先看该注解的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PreAuthorize &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该注解并不能直接进行权限验证，那它是怎么生效的呢？主要靠注解@EnableGlobalMethodSecurity(prePostEnabled &#x3D; true, securedEnabled &#x3D; true)，它通过Import导入了GlobalMethodSecuritySelector.class，而在这个类中注册了GlobalMethodSecurityConfiguration.class</p>
<h4 id="GlobalMethodSecuritySelector-class关键源码"><a href="#GlobalMethodSecuritySelector-class关键源码" class="headerlink" title="GlobalMethodSecuritySelector.class关键源码"></a>GlobalMethodSecuritySelector.class关键源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">GlobalMethodSecuritySelector</span> <span class="keyword">implements</span> <span class="title class_">ImportSelector</span> &#123;</span><br><span class="line">    GlobalMethodSecuritySelector() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] selectImports(AnnotationMetadata importingClassMetadata) &#123;</span><br><span class="line">        Class&lt;EnableGlobalMethodSecurity&gt; annoType = EnableGlobalMethodSecurity.class;</span><br><span class="line">        Map&lt;String, Object&gt; annotationAttributes = importingClassMetadata.getAnnotationAttributes(annoType.getName(), <span class="literal">false</span>);</span><br><span class="line">        <span class="type">AnnotationAttributes</span> <span class="variable">attributes</span> <span class="operator">=</span> AnnotationAttributes.fromMap(annotationAttributes);</span><br><span class="line">        Assert.notNull(attributes, () -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> String.format(<span class="string">&quot;@%s is not present on importing class &#x27;%s&#x27; as expected&quot;</span>, annoType.getSimpleName(), importingClassMetadata.getClassName());</span><br><span class="line">        &#125;);</span><br><span class="line">        Class&lt;?&gt; importingClass = ClassUtils.resolveClassName(importingClassMetadata.getClassName(), ClassUtils.getDefaultClassLoader());</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">skipMethodSecurityConfiguration</span> <span class="operator">=</span> GlobalMethodSecurityConfiguration.class.isAssignableFrom(importingClass);</span><br><span class="line">        <span class="type">AdviceMode</span> <span class="variable">mode</span> <span class="operator">=</span> (AdviceMode)attributes.getEnum(<span class="string">&quot;mode&quot;</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isProxy</span> <span class="operator">=</span> AdviceMode.PROXY == mode;</span><br><span class="line">        <span class="type">String</span> <span class="variable">autoProxyClassName</span> <span class="operator">=</span> isProxy ? AutoProxyRegistrar.class.getName() : GlobalMethodSecurityAspectJAutoProxyRegistrar.class.getName();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">jsr250Enabled</span> <span class="operator">=</span> attributes.getBoolean(<span class="string">&quot;jsr250Enabled&quot;</span>);</span><br><span class="line">        List&lt;String&gt; classNames = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">if</span> (isProxy) &#123;</span><br><span class="line">            classNames.add(MethodSecurityMetadataSourceAdvisorRegistrar.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        classNames.add(autoProxyClassName);</span><br><span class="line">        <span class="keyword">if</span> (!skipMethodSecurityConfiguration) &#123;</span><br><span class="line">          <span class="comment">//注册了GlobalMethodSecurityConfiguration.class</span></span><br><span class="line">            classNames.add(GlobalMethodSecurityConfiguration.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (jsr250Enabled) &#123;</span><br><span class="line">            classNames.add(Jsr250MetadataSourceConfiguration.class.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (String[])classNames.toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GlobalMethodSecurityConfiguration-class关键源码"><a href="#GlobalMethodSecurityConfiguration-class关键源码" class="headerlink" title="GlobalMethodSecurityConfiguration.class关键源码"></a>GlobalMethodSecurityConfiguration.class关键源码</h4><p>这个类非常关键，负责生成权限验证所需要的拦截器、权限管理器、EL表达式处理器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GlobalMethodSecurityConfiguration.class</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MethodInterceptor <span class="title function_">methodSecurityInterceptor</span><span class="params">(MethodSecurityMetadataSource methodSecurityMetadataSource)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor = (MethodSecurityInterceptor)(<span class="built_in">this</span>.isAspectJ() ? <span class="keyword">new</span> <span class="title class_">AspectJMethodSecurityInterceptor</span>() : <span class="keyword">new</span> <span class="title class_">MethodSecurityInterceptor</span>());</span><br><span class="line">  <span class="comment">//设置访问决策管理器 </span></span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setAccessDecisionManager(<span class="built_in">this</span>.accessDecisionManager());</span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setAfterInvocationManager(<span class="built_in">this</span>.afterInvocationManager());</span><br><span class="line">  <span class="comment">//设置安全元数据源 用于获取方法级别的安全性配置信息</span></span><br><span class="line">    <span class="built_in">this</span>.methodSecurityInterceptor.setSecurityMetadataSource(methodSecurityMetadataSource);</span><br><span class="line">    <span class="type">RunAsManager</span> <span class="variable">runAsManager</span> <span class="operator">=</span> <span class="built_in">this</span>.runAsManager();</span><br><span class="line">    <span class="keyword">if</span> (runAsManager != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.methodSecurityInterceptor.setRunAsManager(runAsManager);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.methodSecurityInterceptor;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这段代码的作用是根据配置创建一个 AccessDecisionManager 实例，并配置其中的访问决策投票者。这些投票者负责根据不同的投票逻辑，决定用户是否有权限执行某个方法</span></span><br><span class="line">   <span class="keyword">protected</span> AccessDecisionManager <span class="title function_">accessDecisionManager</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"><span class="comment">//@EnableGlobalMethodSecurity注解需要开启prePostEnabled = true,如果启用了 Pre-Post 注解（@PreAuthorize 和 @PostAuthorize），则创建并添加一个基于表达式的 Pre-Invocation 投票者</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.prePostEnabled()) &#123;</span><br><span class="line">            <span class="type">ExpressionBasedPreInvocationAdvice</span> <span class="variable">expressionAdvice</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExpressionBasedPreInvocationAdvice</span>();</span><br><span class="line">          <span class="comment">//获取El表达式处理器</span></span><br><span class="line">            expressionAdvice.setExpressionHandler(<span class="built_in">this</span>.getExpressionHandler());</span><br><span class="line">            decisionVoters.add(<span class="keyword">new</span> <span class="title class_">PreInvocationAuthorizationAdviceVoter</span>(expressionAdvice));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.jsr250Enabled()) &#123;</span><br><span class="line">            decisionVoters.add(<span class="keyword">new</span> <span class="title class_">Jsr250Voter</span>());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RoleVoter</span> <span class="variable">roleVoter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleVoter</span>();</span><br><span class="line">        <span class="type">GrantedAuthorityDefaults</span> <span class="variable">grantedAuthorityDefaults</span> <span class="operator">=</span> (GrantedAuthorityDefaults)<span class="built_in">this</span>.getSingleBeanOrNull(GrantedAuthorityDefaults.class);</span><br><span class="line">        <span class="keyword">if</span> (grantedAuthorityDefaults != <span class="literal">null</span>) &#123;</span><br><span class="line">            roleVoter.setRolePrefix(grantedAuthorityDefaults.getRolePrefix());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        decisionVoters.add(roleVoter);</span><br><span class="line">        decisionVoters.add(<span class="keyword">new</span> <span class="title class_">AuthenticatedVoter</span>());</span><br><span class="line">     <span class="comment">//这些投票者被组合到 AffirmativeBased 决策管理器中。</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AffirmativeBased</span>(decisionVoters);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="权限生效源码分析"><a href="#权限生效源码分析" class="headerlink" title="权限生效源码分析"></a>权限生效源码分析</h2><p>上面介绍了和权限相关的核心类，下面分析权限验证是怎么生效的</p>
<h4 id="a-获取安全元数据信息"><a href="#a-获取安全元数据信息" class="headerlink" title="a. 获取安全元数据信息"></a>a. 获取安全元数据信息</h4><p>首先执行MethodSecurityInterceptor 父类AbstractSecurityInterceptor的beforeInvocation方法获取安全元数据信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractSecurityInterceptor.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">Collection</span>&lt;ConfigAttribute&gt; attributes = <span class="built_in">this</span>.obtainSecurityMetadataSource().getAttributes(object);</span><br></pre></td></tr></table></figure>

<p>由PrePostAnnotationSecurityMetadataSource 类进行获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PrePostAnnotationSecurityMetadataSource.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> Collection&lt;ConfigAttribute&gt; <span class="title function_">getAttributes</span><span class="params">(Method method, Class&lt;?&gt; targetClass)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">PreFilter</span> <span class="variable">preFilter</span> <span class="operator">=</span> (PreFilter)<span class="built_in">this</span>.findAnnotation(method, targetClass, PreFilter.class);</span><br><span class="line">      <span class="comment">//处理注解@PreAuthorize</span></span><br><span class="line">        <span class="type">PreAuthorize</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> (PreAuthorize)<span class="built_in">this</span>.findAnnotation(method, targetClass, PreAuthorize.class);</span><br><span class="line">        <span class="type">PostFilter</span> <span class="variable">postFilter</span> <span class="operator">=</span> (PostFilter)<span class="built_in">this</span>.findAnnotation(method, targetClass, PostFilter.class);</span><br><span class="line">        <span class="type">PostAuthorize</span> <span class="variable">postAuthorize</span> <span class="operator">=</span> (PostAuthorize)<span class="built_in">this</span>.findAnnotation(method, targetClass, PostAuthorize.class);</span><br><span class="line">      <span class="comment">//.....省略代码</span></span><br><span class="line">      <span class="comment">//返回元数据 格式如下[authorize: &#x27;@el.check()&#x27;, filter: &#x27;null&#x27;, filterTarget: &#x27;null&#x27;]</span></span><br><span class="line">            <span class="keyword">return</span> attrs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="b-进行权限验证"><a href="#b-进行权限验证" class="headerlink" title="b.进行权限验证"></a>b.进行权限验证</h4><p>接着在beforeInvocation方法中调用attemptAuthorization方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractSecurityInterceptor.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">private</span> <span class="keyword">void</span> <span class="title function_">attemptAuthorization</span><span class="params">(Object object, Collection&lt;ConfigAttribute&gt; attributes, Authentication authenticated)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//利用AccessDecisionManager，也就是前面GlobalMethodSecurityConfiguration.class中配置的AffirmativeBased 决策管理器进行权限检验</span></span><br><span class="line">        <span class="built_in">this</span>.accessDecisionManager.decide(authenticated, object, attributes);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (AccessDeniedException var5) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(LogMessage.format(<span class="string">&quot;Failed to authorize %s with attributes %s using %s&quot;</span>, object, attributes, <span class="built_in">this</span>.accessDecisionManager));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.debug(LogMessage.format(<span class="string">&quot;Failed to authorize %s with attributes %s&quot;</span>, object, attributes));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.publishEvent(<span class="keyword">new</span> <span class="title class_">AuthorizationFailureEvent</span>(object, attributes, authenticated, var5));</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="c-决策管理器验证"><a href="#c-决策管理器验证" class="headerlink" title="c.决策管理器验证"></a>c.决策管理器验证</h4><p>核心是voter执行vote方法进行投票</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AffirmativeBased</span> <span class="keyword">extends</span> <span class="title class_">AbstractAccessDecisionManager</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AffirmativeBased</span><span class="params">(List&lt;AccessDecisionVoter&lt;?&gt;&gt; decisionVoters)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(decisionVoters);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getDecisionVoters().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">AccessDecisionVoter</span> <span class="variable">voter</span> <span class="operator">=</span> (AccessDecisionVoter)var5.next();</span><br><span class="line">          <span class="comment">//会利用PreInvocationAuthorizationAdviceVoter 进行投票</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> voter.vote(authentication, object, configAttributes);</span><br><span class="line">            <span class="keyword">switch</span>(result) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                ++deny;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractAccessDecisionManager.accessDenied&quot;</span>, <span class="string">&quot;Access is denied&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.checkAllowIfAllAbstainDecisions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="d-EL表达式处理"><a href="#d-EL表达式处理" class="headerlink" title="d.EL表达式处理"></a>d.EL表达式处理</h4><p>在PreInvocationAuthorizationAdviceVoter中执行vote方法，最终落实到自定义的el表达式处理逻辑</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreInvocationAuthorizationAdviceVoter.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> <span class="type">int</span> <span class="title function_">vote</span><span class="params">(Authentication authentication, MethodInvocation method, Collection&lt;ConfigAttribute&gt; attributes)</span> &#123;</span><br><span class="line">    <span class="type">PreInvocationAttribute</span> <span class="variable">preAttr</span> <span class="operator">=</span> <span class="built_in">this</span>.findPreInvocationAttribute(attributes);</span><br><span class="line">    <span class="keyword">if</span> (preAttr == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//调用before方法进入el表达式处理逻辑，如果返回true获得票数1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.preAdvice.before(authentication, method, preAttr) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExpressionBasedPreInvocationAdvice.class</span><br><span class="line">  <span class="comment">//执行before方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">before</span><span class="params">(Authentication authentication, MethodInvocation mi, PreInvocationAttribute attr)</span> &#123;</span><br><span class="line">    <span class="type">PreInvocationExpressionAttribute</span> <span class="variable">preAttr</span> <span class="operator">=</span> (PreInvocationExpressionAttribute)attr;</span><br><span class="line">    <span class="type">EvaluationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="built_in">this</span>.expressionHandler.createEvaluationContext(authentication, mi);</span><br><span class="line">    <span class="type">Expression</span> <span class="variable">preFilter</span> <span class="operator">=</span> preAttr.getFilterExpression();</span><br><span class="line">    <span class="type">Expression</span> <span class="variable">preAuthorize</span> <span class="operator">=</span> preAttr.getAuthorizeExpression();</span><br><span class="line">    <span class="keyword">if</span> (preFilter != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">filterTarget</span> <span class="operator">=</span> <span class="built_in">this</span>.findFilterTarget(preAttr.getFilterTarget(), ctx, mi);</span><br><span class="line">        <span class="built_in">this</span>.expressionHandler.filter(filterTarget, preFilter, ctx);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//进入自定义的el表达式处理逻辑，也就是上面AuthorityConfig 自定义的权限验证逻辑，如果有对应权限则返回true</span></span><br><span class="line">    <span class="keyword">return</span> preAuthorize != <span class="literal">null</span> ? ExpressionUtils.evaluateAsBoolean(preAuthorize, ctx) : <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="e-投票结果"><a href="#e-投票结果" class="headerlink" title="e.投票结果"></a>e.投票结果</h4><p>回到上面的决策管理器AffirmativeBased 当投票结果result&#x3D;1时 直接return表示权限验证通过，否则++deny表示权限验证不通过，抛出AccessDeniedException异常，至此完成权限验证</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AffirmativeBased.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"> <span class="title class_">public</span> <span class="keyword">void</span> <span class="title function_">decide</span><span class="params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="keyword">throws</span> AccessDeniedException &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">deny</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getDecisionVoters().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">            <span class="type">AccessDecisionVoter</span> <span class="variable">voter</span> <span class="operator">=</span> (AccessDecisionVoter)var5.next();</span><br><span class="line">          <span class="comment">// 当el表达式返回true时获得票数1否则为-1</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> voter.vote(authentication, object, configAttributes);</span><br><span class="line">            <span class="keyword">switch</span>(result) &#123;</span><br><span class="line">            <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">                ++deny;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//deny大于0 表示权限验证不通过，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (deny &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AccessDeniedException</span>(<span class="built_in">this</span>.messages.getMessage(<span class="string">&quot;AbstractAccessDecisionManager.accessDenied&quot;</span>, <span class="string">&quot;Access is denied&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.checkAllowIfAllAbstainDecisions();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<p>链接 <a href="http://ulemony.github.io/posts/9d7a9baf.html">http://ulemony.github.io/posts/9d7a9baf.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>SpringSecurity</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/posts/4ebad2d4.html</url>
    <content><![CDATA[<h1 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h1><h2 id="Pom依赖"><a href="#Pom依赖" class="headerlink" title="Pom依赖"></a>Pom依赖</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">       &lt;!--集成redis--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">2.1</span><span class="number">.7</span>.RELEASE&lt;/version&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--序列化--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.2</span><span class="number">.54</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;!--lombok,自动生成set、get等方法--&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;<span class="number">1.18</span><span class="number">.10</span>&lt;/version&gt;</span><br><span class="line">           &lt;scope&gt;compile&lt;/scope&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h2 id="自定义封装RedisTemplate"><a href="#自定义封装RedisTemplate" class="headerlink" title="自定义封装RedisTemplate"></a>自定义封装RedisTemplate</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        <span class="comment">// 我们为了自己开发方便，一般直接使用 &lt;String, Object&gt;</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">// Json序列化配置</span></span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// String 的序列化</span></span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RedisUtils类"><a href="#RedisUtils类" class="headerlink" title="RedisUtils类"></a>RedisUtils类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">keys</span><span class="params">(String keys)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.keys(keys);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> key == <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入, 不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().setIfAbsent(key,value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间,不存在放入，存在返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">setnx</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by 要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end 结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/4ebad2d4.html">http://ulemony.github.io/posts/4ebad2d4.html</a> </p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring之Bean的生命周期</title>
    <url>/posts/c7e03167.html</url>
    <content><![CDATA[<h2 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h2><h3 id="1-实例化"><a href="#1-实例化" class="headerlink" title="1.实例化"></a>1.实例化</h3><h4 id="实例化前"><a href="#实例化前" class="headerlink" title="实例化前"></a>实例化前</h4><p>实例化前,会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessBeforeInstantiation方法，可以用于动态地创建或替换 bean 实例，从而实现更高级的定制和控制。</p>
<h4 id="实例化前的部分源码"><a href="#实例化前的部分源码" class="headerlink" title="实例化前的部分源码"></a>实例化前的部分源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">createBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">RootBeanDefinition</span> <span class="variable">mbdToUse</span> <span class="operator">=</span> mbd;</span><br><span class="line">        Class&lt;?&gt; resolvedClass = <span class="built_in">this</span>.resolveBeanClass(mbd, beanName, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (resolvedClass != <span class="literal">null</span> &amp;&amp; !mbd.hasBeanClass() &amp;&amp; mbd.getBeanClassName() != <span class="literal">null</span>) &#123;</span><br><span class="line">            mbdToUse = <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(mbd);</span><br><span class="line">            mbdToUse.setBeanClass(resolvedClass);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mbdToUse.prepareMethodOverrides();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var9) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanDefinitionStoreException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Validation of method overrides failed&quot;</span>, var9);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Object beanInstance;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//实例化前</span></span><br><span class="line">            beanInstance = <span class="built_in">this</span>.resolveBeforeInstantiation(beanName, mbdToUse);</span><br><span class="line">            <span class="keyword">if</span> (beanInstance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> beanInstance;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var10) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;BeanPostProcessor before instantiation of bean failed&quot;</span>, var10);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//创建对象</span></span><br><span class="line">            beanInstance = <span class="built_in">this</span>.doCreateBean(beanName, mbdToUse, args);</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Finished creating instance of bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> beanInstance;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ImplicitlyAppearedSingletonException | BeanCreationException var7) &#123;</span><br><span class="line">            <span class="keyword">throw</span> var7;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var8) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbdToUse.getResourceDescription(), beanName, <span class="string">&quot;Unexpected exception during bean creation&quot;</span>, var8);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">resolveBeforeInstantiation</span><span class="params">(String beanName, RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!Boolean.FALSE.equals(mbd.beforeInstantiationResolved)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                Class&lt;?&gt; targetType = <span class="built_in">this</span>.determineTargetType(beanName, mbd);</span><br><span class="line">                <span class="keyword">if</span> (targetType != <span class="literal">null</span>) &#123;</span><br><span class="line">                    bean = <span class="built_in">this</span>.applyBeanPostProcessorsBeforeInstantiation(targetType, beanName);</span><br><span class="line">                    <span class="keyword">if</span> (bean != <span class="literal">null</span>) &#123;</span><br><span class="line">                        bean = <span class="built_in">this</span>.applyBeanPostProcessorsAfterInitialization(bean, beanName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            mbd.beforeInstantiationResolved = bean != <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInstantiation</span><span class="params">(Class&lt;?&gt; beanClass, String beanName)</span> &#123;</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">var3</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var3.next();</span><br><span class="line">            <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">              <span class="comment">//会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessBeforeInstantiation方法</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ibp.postProcessBeforeInstantiation(beanClass, beanName);</span><br><span class="line">                <span class="keyword">if</span> (result != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> result;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="实例化时的部分源码"><a href="#实例化时的部分源码" class="headerlink" title="实例化时的部分源码"></a>实例化时的部分源码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span> </span><br><span class="line"></span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> <span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line">        <span class="type">BeanWrapper</span> <span class="variable">instanceWrapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (mbd.isSingleton()) &#123;</span><br><span class="line">            instanceWrapper = (BeanWrapper)<span class="built_in">this</span>.factoryBeanInstanceCache.remove(beanName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (instanceWrapper == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//创建bean实例，推断构造方法</span></span><br><span class="line">            instanceWrapper = <span class="built_in">this</span>.createBeanInstance(beanName, mbd, args);</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//创建bean</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> instanceWrapper.getWrappedInstance();</span><br><span class="line">        Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass();</span><br><span class="line">        <span class="keyword">if</span> (beanType != NullBean.class) &#123;</span><br><span class="line">            mbd.resolvedTargetType = beanType;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span>(mbd.postProcessingLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.postProcessed) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var17) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Post-processing of merged bean definition failed&quot;</span>, var17);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                mbd.postProcessed = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">earlySingletonExposure</span> <span class="operator">=</span> mbd.isSingleton() &amp;&amp; <span class="built_in">this</span>.allowCircularReferences &amp;&amp; <span class="built_in">this</span>.isSingletonCurrentlyInCreation(beanName);</span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Eagerly caching bean &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; to allow for resolving potential circular references&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">this</span>.addSingletonFactory(beanName, () -&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.getEarlyBeanReference(beanName, mbd, bean);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> bean;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//属性填充</span></span><br><span class="line">            <span class="built_in">this</span>.populateBean(beanName, mbd, instanceWrapper);</span><br><span class="line">          <span class="comment">//初始化bean</span></span><br><span class="line">            exposedObject = <span class="built_in">this</span>.initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var18) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var18 <span class="keyword">instanceof</span> BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (BeanCreationException)var18;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Initialization of bean failed&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (earlySingletonExposure) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">earlySingletonReference</span> <span class="operator">=</span> <span class="built_in">this</span>.getSingleton(beanName, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">if</span> (earlySingletonReference != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (exposedObject == bean) &#123;</span><br><span class="line">                    exposedObject = earlySingletonReference;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">this</span>.allowRawInjectionDespiteWrapping &amp;&amp; <span class="built_in">this</span>.hasDependentBean(beanName)) &#123;</span><br><span class="line">                    String[] dependentBeans = <span class="built_in">this</span>.getDependentBeans(beanName);</span><br><span class="line">                    Set&lt;String&gt; actualDependentBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>(dependentBeans.length);</span><br><span class="line">                    String[] var12 = dependentBeans;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">var13</span> <span class="operator">=</span> dependentBeans.length;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var14</span> <span class="operator">=</span> <span class="number">0</span>; var14 &lt; var13; ++var14) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">dependentBean</span> <span class="operator">=</span> var12[var14];</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="built_in">this</span>.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) &#123;</span><br><span class="line">                            actualDependentBeans.add(dependentBean);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!actualDependentBeans.isEmpty()) &#123;</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCurrentlyInCreationException</span>(beanName, <span class="string">&quot;Bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27; has been injected into other beans [&quot;</span> + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + <span class="string">&quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &#x27;getBeanNamesOfType&#x27; with the &#x27;allowEagerInit&#x27; flag turned off, for example.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.registerDisposableBeanIfNecessary(beanName, bean, mbd);</span><br><span class="line">            <span class="keyword">return</span> exposedObject;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (BeanDefinitionValidationException var16) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Invalid destruction signature&quot;</span>, var16);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-属性赋值"><a href="#2-属性赋值" class="headerlink" title="2.属性赋值"></a>2.属性赋值</h3><p>在赋值的过程中会执行InstantiationAwareBeanPostProcessor这种后置处理器的postProcessAfterInstantiation方法，进行一些额外的控制或自定义操作。如果返回 <code>false</code>，则表示中断属性注入过程。</p>
<p>实现InstantiationAwareBeanPostProcessor接口重写postProcessProperties方法，在bean实例化后，属性注入前，可以根据属性描述，动态的新增，删除，修改一些属性。</p>
<p>属性填充源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">protected</span> <span class="keyword">void</span> <span class="title function_">populateBean</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> BeanWrapper bw)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (bw == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.hasPropertyValues()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Cannot apply property values to null instance&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">continueWithPropertyPopulation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!mbd.isSynthetic() &amp;&amp; <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors()) &#123;</span><br><span class="line">                <span class="type">Iterator</span> <span class="variable">var5</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span>(var5.hasNext()) &#123;</span><br><span class="line">                    <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var5.next();</span><br><span class="line">                    <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                        <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                 <span class="comment">//如果后置处理器存在且其中任何一个的 postProcessAfterInstantiation 方法返回 false，则中断属性注入过程。    </span></span><br><span class="line">                        <span class="keyword">if</span> (!ibp.postProcessAfterInstantiation(bw.getWrappedInstance(), beanName)) &#123;</span><br><span class="line">                            continueWithPropertyPopulation = <span class="literal">false</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (continueWithPropertyPopulation) &#123;</span><br><span class="line">                <span class="type">PropertyValues</span> <span class="variable">pvs</span> <span class="operator">=</span> mbd.hasPropertyValues() ? mbd.getPropertyValues() : <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span> || mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="type">MutablePropertyValues</span> <span class="variable">newPvs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>((PropertyValues)pvs);</span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">1</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.autowireByName(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (mbd.getResolvedAutowireMode() == <span class="number">2</span>) &#123;</span><br><span class="line">                        <span class="built_in">this</span>.autowireByType(beanName, mbd, bw, newPvs);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    pvs = newPvs;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="type">boolean</span> <span class="variable">hasInstAwareBpps</span> <span class="operator">=</span> <span class="built_in">this</span>.hasInstantiationAwareBeanPostProcessors();</span><br><span class="line">                <span class="type">boolean</span> <span class="variable">needsDepCheck</span> <span class="operator">=</span> mbd.getDependencyCheck() != <span class="number">0</span>;</span><br><span class="line">                PropertyDescriptor[] filteredPds = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (hasInstAwareBpps) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (pvs == <span class="literal">null</span>) &#123;</span><br><span class="line">                        pvs = mbd.getPropertyValues();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="type">Iterator</span> <span class="variable">var9</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">                        <span class="type">BeanPostProcessor</span> <span class="variable">bp</span> <span class="operator">=</span> (BeanPostProcessor)var9.next();</span><br><span class="line">                        <span class="keyword">if</span> (bp <span class="keyword">instanceof</span> InstantiationAwareBeanPostProcessor) &#123;</span><br><span class="line">                            <span class="type">InstantiationAwareBeanPostProcessor</span> <span class="variable">ibp</span> <span class="operator">=</span> (InstantiationAwareBeanPostProcessor)bp;</span><br><span class="line">                            <span class="type">PropertyValues</span> <span class="variable">pvsToUse</span> <span class="operator">=</span> ibp.postProcessProperties((PropertyValues)pvs, bw.getWrappedInstance(), beanName);</span><br><span class="line">                            <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    filteredPds = <span class="built_in">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                                &#125;</span><br><span class="line">                              <span class="comment">//执行postProcessProperties方法</span></span><br><span class="line"></span><br><span class="line">                                pvsToUse = ibp.postProcessPropertyValues((PropertyValues)pvs, filteredPds, bw.getWrappedInstance(), beanName);</span><br><span class="line">                                <span class="keyword">if</span> (pvsToUse == <span class="literal">null</span>) &#123;</span><br><span class="line">                                    <span class="keyword">return</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line"></span><br><span class="line">                            pvs = pvsToUse;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (needsDepCheck) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (filteredPds == <span class="literal">null</span>) &#123;</span><br><span class="line">                        filteredPds = <span class="built_in">this</span>.filterPropertyDescriptorsForDependencyCheck(bw, mbd.allowCaching);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">this</span>.checkDependencies(beanName, mbd, filteredPds, (PropertyValues)pvs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (pvs != <span class="literal">null</span>) &#123;</span><br><span class="line">                  <span class="comment">//属性最终填充</span></span><br><span class="line">                    <span class="built_in">this</span>.applyPropertyValues(beanName, mbd, bw, (PropertyValues)pvs);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-初始化"><a href="#3-初始化" class="headerlink" title="3.初始化"></a>3.初始化</h3><h4 id="初始化前"><a href="#初始化前" class="headerlink" title="初始化前"></a>初始化前</h4><p>初始化前会处理Aware回调，执行invokeAwareMethods(beanName, bean)方法，使用 <code>Aware</code> 回调接口获取容器的名称、类加载器和工厂信息，以便在 bean 内部执行定制的逻辑。</p>
<p>然后执行BeanPostProcessor的postProcessBeforeInitialization方法，这允许开发人员在 bean 初始化前介入 bean 的创建过程，执行一些自定义逻辑，例如初始化前的数据校验。这是 Spring 容器提供的一个非常有用的扩展点，用于实现各种定制和增强功能。</p>
<h4 id="初始化时"><a href="#初始化时" class="headerlink" title="初始化时"></a>初始化时</h4><p>实现InitializingBean的afterPropertiesSet()方法</p>
<p>执行自定义的初始化方法</p>
<h4 id="初始化后"><a href="#初始化后" class="headerlink" title="初始化后"></a>初始化后</h4><p>执行BeanPostProcessor的postProcessAfterInitialization方法，可以进行AOP等操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">protected</span> Object <span class="title function_">initializeBean</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">           AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">               <span class="built_in">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">           &#125;, <span class="built_in">this</span>.getAccessControlContext());</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeAwareMethods(beanName, bean);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">Object</span> <span class="variable">wrappedBean</span> <span class="operator">=</span> bean;</span><br><span class="line">       <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">         <span class="comment">//执行BeanPostProcessor的postProcessBeforeInitialization方法</span></span><br><span class="line">           wrappedBean = <span class="built_in">this</span>.applyBeanPostProcessorsBeforeInitialization(bean, beanName);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeInitMethods(beanName, wrappedBean, mbd);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd != <span class="literal">null</span> ? mbd.getResourceDescription() : <span class="literal">null</span>, beanName, <span class="string">&quot;Invocation of init method failed&quot;</span>, var6);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mbd == <span class="literal">null</span> || !mbd.isSynthetic()) &#123;</span><br><span class="line">           wrappedBean = <span class="built_in">this</span>.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> wrappedBean;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeAwareMethods</span><span class="params">(String beanName, Object bean)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> Aware) &#123;</span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanNameAware) &#123;</span><br><span class="line">               ((BeanNameAware)bean).setBeanName(beanName);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanClassLoaderAware) &#123;</span><br><span class="line">               <span class="type">ClassLoader</span> <span class="variable">bcl</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanClassLoader();</span><br><span class="line">               <span class="keyword">if</span> (bcl != <span class="literal">null</span>) &#123;</span><br><span class="line">                   ((BeanClassLoaderAware)bean).setBeanClassLoader(bcl);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> BeanFactoryAware) &#123;</span><br><span class="line">               ((BeanFactoryAware)bean).setBeanFactory(<span class="built_in">this</span>);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">invokeInitMethods</span><span class="params">(String beanName, Object bean, <span class="meta">@Nullable</span> RootBeanDefinition mbd)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">       <span class="type">boolean</span> <span class="variable">isInitializingBean</span> <span class="operator">=</span> bean <span class="keyword">instanceof</span> InitializingBean;</span><br><span class="line">       <span class="keyword">if</span> (isInitializingBean &amp;&amp; (mbd == <span class="literal">null</span> || !mbd.isExternallyManagedInitMethod(<span class="string">&quot;afterPropertiesSet&quot;</span>))) &#123;</span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">this</span>.logger.isTraceEnabled()) &#123;</span><br><span class="line">               <span class="built_in">this</span>.logger.trace(<span class="string">&quot;Invoking afterPropertiesSet() on bean with name &#x27;&quot;</span> + beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                   AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                       ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;, <span class="built_in">this</span>.getAccessControlContext());</span><br><span class="line">               &#125; <span class="keyword">catch</span> (PrivilegedActionException var6) &#123;</span><br><span class="line">                   <span class="keyword">throw</span> var6.getException();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             <span class="comment">//执行InitializingBean的afterPropertiesSet()方法</span></span><br><span class="line">               ((InitializingBean)bean).afterPropertiesSet();</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (mbd != <span class="literal">null</span> &amp;&amp; bean.getClass() != NullBean.class) &#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">initMethodName</span> <span class="operator">=</span> mbd.getInitMethodName();</span><br><span class="line">           <span class="keyword">if</span> (StringUtils.hasLength(initMethodName) &amp;&amp; (!isInitializingBean || !<span class="string">&quot;afterPropertiesSet&quot;</span>.equals(initMethodName)) &amp;&amp; !mbd.isExternallyManagedInitMethod(initMethodName)) &#123;</span><br><span class="line">             <span class="comment">//执行自定义的方法</span></span><br><span class="line">               <span class="built_in">this</span>.invokeCustomInitMethod(beanName, bean, mbd);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">AbstractAutowireCapableBeanFactory.<span class="keyword">class</span></span><br><span class="line">  </span><br><span class="line"><span class="title class_">public</span> Object <span class="title function_">applyBeanPostProcessorsBeforeInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"></span><br><span class="line">        Object current;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator(); var4.hasNext(); result = current) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (BeanPostProcessor)var4.next();</span><br><span class="line">            current = processor.postProcessBeforeInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">applyBeanPostProcessorsAfterInitialization</span><span class="params">(Object existingBean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> existingBean;</span><br><span class="line"></span><br><span class="line">        Object current;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">Iterator</span> <span class="variable">var4</span> <span class="operator">=</span> <span class="built_in">this</span>.getBeanPostProcessors().iterator(); var4.hasNext(); result = current) &#123;</span><br><span class="line">            <span class="type">BeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (BeanPostProcessor)var4.next();</span><br><span class="line">            current = processor.postProcessAfterInitialization(result, beanName);</span><br><span class="line">            <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-销毁"><a href="#4-销毁" class="headerlink" title="4.销毁"></a>4.销毁</h3><p>将所有容器中的单例bean相关信息移除，回调所有相关的后置处理器和bean的销毁方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (!CollectionUtils.isEmpty(<span class="built_in">this</span>.beanPostProcessors)) &#123;</span><br><span class="line">           <span class="type">Iterator</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="built_in">this</span>.beanPostProcessors.iterator();</span><br><span class="line"></span><br><span class="line">           <span class="keyword">while</span>(var1.hasNext()) &#123;</span><br><span class="line">               <span class="type">DestructionAwareBeanPostProcessor</span> <span class="variable">processor</span> <span class="operator">=</span> (DestructionAwareBeanPostProcessor)var1.next();</span><br><span class="line">               processor.postProcessBeforeDestruction(<span class="built_in">this</span>.bean, <span class="built_in">this</span>.beanName);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.invokeDisposableBean) &#123;</span><br><span class="line">           <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">               logger.trace(<span class="string">&quot;Invoking destroy() on bean with name &#x27;&quot;</span> + <span class="built_in">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">                   AccessController.doPrivileged(() -&gt; &#123;</span><br><span class="line">                       ((DisposableBean)<span class="built_in">this</span>.bean).destroy();</span><br><span class="line">                       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                   &#125;, <span class="built_in">this</span>.acc);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                 <span class="comment">//实现DisposableBean接口的destoy()方法</span></span><br><span class="line">                   ((DisposableBean)<span class="built_in">this</span>.bean).destroy();</span><br><span class="line">               &#125;</span><br><span class="line">           &#125; <span class="keyword">catch</span> (Throwable var3) &#123;</span><br><span class="line">               <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Invocation of destroy method failed on bean with name &#x27;&quot;</span> + <span class="built_in">this</span>.beanName + <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">               <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                   logger.info(msg, var3);</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   logger.info(msg + <span class="string">&quot;: &quot;</span> + var3);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (<span class="built_in">this</span>.destroyMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="built_in">this</span>.invokeCustomDestroyMethod(<span class="built_in">this</span>.destroyMethod);</span><br><span class="line">       &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.destroyMethodName != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="type">Method</span> <span class="variable">methodToCall</span> <span class="operator">=</span> <span class="built_in">this</span>.determineDestroyMethod(<span class="built_in">this</span>.destroyMethodName);</span><br><span class="line">           <span class="keyword">if</span> (methodToCall != <span class="literal">null</span>) &#123;</span><br><span class="line">             <span class="comment">//自定义的销毁方法</span></span><br><span class="line">               <span class="built_in">this</span>.invokeCustomDestroyMethod(methodToCall);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>


<p>链接 <a href="http://ulemony.github.io/posts/c7e03167.html">http://ulemony.github.io/posts/c7e03167.html</a> </p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
